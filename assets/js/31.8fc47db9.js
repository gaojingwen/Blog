(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{129:function(e,t,s){"use strict";s.r(t);var n=s(0),r=Object(n.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[e._m(0),e._v(" "),s("p",[e._v("本系列文章为"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fbook.douban.com%2Fsubject%2F26819950%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《Node.js Design Patterns Second Edition》"),s("OutboundLink")],1),e._v("的原文翻译和读书笔记，在GitHub连载更新，"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fxingbofeng%2FNode.js-Design-Patterns-Second-Edition",target:"_blank",rel:"noopener noreferrer"}},[e._v("同步翻译版链接"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("欢迎关注我的专栏，之后的博文将在专栏同步：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fuser%2F587a050661ff4b0065f1951c",target:"_blank",rel:"noopener noreferrer"}},[e._v("Encounter的掘金专栏"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fencounter",target:"_blank",rel:"noopener noreferrer"}},[e._v("知乎专栏 Encounter的编程思考"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fblog%2Fxingbofeng",target:"_blank",rel:"noopener noreferrer"}},[e._v("segmentfault专栏 前端小站"),s("OutboundLink")],1)])]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),s("p",[e._v("在本章中，将会学到以下内容：")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),s("p",[e._v("但是这两种方法有什么区别呢？ 我们可以将它们概括为两点：")]),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._m(22),e._v(" "),e._m(23),e._m(24),e._v(" "),e._m(25),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"141"}}),e._v(")")]),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),e._m(35),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._v(" "),s("p",[e._v("现在，运行这个应用程序，我们首先使用以下命令启动服务器：")]),e._v(" "),e._m(39),e._m(40),e._v(" "),e._m(41),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"399"}}),e._v(")")]),e._v(" "),e._m(42),e._v(" "),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1118",height:"420"}}),e._v(")")]),e._v(" "),s("p",[e._v("一个文件被处理的过程，它经过以下阶段：")]),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._v(" "),e._m(46),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),e._m(49),s("p",[e._v("使用相同的方式，我们更新服务端的代码，使得它可以在数据块进行解压之前先解密：")]),e._v(" "),e._m(50),s("blockquote",[s("p",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnodejs.org%2Fdist%2Flatest-v9.x%2Fdocs%2Fapi%2Fcrypto.html%23crypto_crypto",target:"_blank",rel:"noopener noreferrer"}},[e._v("crypto"),s("OutboundLink")],1),e._v("是Node.js的核心模块之一，提供了一系列加密算法。")])]),e._v(" "),e._m(51),e._v(" "),e._m(52),e._v(" "),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._v(" "),e._m(58),e._v(" "),e._m(59),e._v(" "),e._m(60),e._v(" "),e._m(61),e._v(" "),e._m(62),e._v(" "),e._m(63),e._v(" "),e._m(64),e._v(" "),e._m(65),e._v(" "),e._m(66),e._v(" "),e._m(67),e._v(" "),e._m(68),e._v(" "),e._m(69),e._v(" "),e._m(70),e._v(" "),e._m(71),e._m(72),e._v(" "),e._m(73),e._v(" "),e._m(74),e._m(75),e._v(" "),e._m(76),e._v(" "),e._m(77),e._v(" "),e._m(78),e._v(" "),e._m(79),e._v(" "),e._m(80),s("p",[e._v("这是流式范例是一个通用接口的一个很好的例子，它使得我们的程序能够进行通信，而不管它们是用什么语言写的。")]),e._v(" "),e._m(81),e._v(" "),e._m(82),e._v(" "),e._m(83),e._m(84),e._v(" "),e._m(85),e._v(" "),e._m(86),e._v(" "),e._m(87),e._v(" "),e._m(88),e._m(89),e._v(" "),e._m(90),e._v(" "),e._m(91),e._v(" "),e._m(92),s("p",[e._v("在文件顶部，我们将加载我们的依赖关系。除了我们正在加载一个"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fchance",target:"_blank",rel:"noopener noreferrer"}},[e._v("chance的npm模块"),s("OutboundLink")],1),e._v("之外，没有什么特别之处，它是一个用于生成各种随机值的库，从数字到字符串到整个句子都能生成随机值。")]),e._v(" "),e._m(93),e._v(" "),e._m(94),e._v(" "),e._m(95),e._v(" "),e._m(96),e._v(" "),e._m(97),e._v(" "),e._m(98),e._v(" "),e._m(99),e._m(100),e._v(" "),e._m(101),e._v(" "),e._m(102),e._v(" "),e._m(103),e._v(" "),e._m(104),e._v(" "),e._m(105),e._m(106),e._v(" "),e._m(107),e._v(" "),e._m(108),e._m(109),e._v(" "),e._m(110),e._v(" "),e._m(111),e._m(112),e._v(" "),e._m(113),e._v(" "),e._m(114),e._v(" "),e._m(115),e._m(116),e._v(" "),e._m(117),e._v(" "),e._m(118),e._v(" "),e._m(119),e._v(" "),e._m(120),e._v(" "),e._m(121),e._v(" "),e._m(122),s("p",[e._v("前面代码中最重要的步骤可以概括如下：")]),e._v(" "),e._m(123),e._v(" "),e._m(124),e._v(" "),e._m(125),e._v(" "),e._m(126),e._v(" "),e._m(127),e._v(" "),e._m(128),e._m(129),e._v(" "),e._m(130),e._v(" "),e._m(131),e._m(132),e._v(" "),e._m(133),e._v(" "),e._m(134),e._v(" "),e._m(135),e._v(" "),e._m(136),e._v(" "),e._m(137),e._v(" "),e._m(138),e._v(" "),e._m(139),s("p",[e._v("有了这个，我们创建并使用了我们的第一个自定义的可写入流。 像往常一样运行新模块来检查其输出；你会看到执行后会创建三个新文件。")]),e._v(" "),e._m(140),e._v(" "),e._m(141),e._v(" "),e._m(142),e._v(" "),e._m(143),e._v(" "),e._m(144),e._m(145),e._v(" "),e._m(146),e._v(" "),e._m(147),e._v(" "),e._m(148),e._v(" "),e._m(149),e._v(" "),e._m(150),e._v(" "),e._m(151),e._v(" "),e._m(152),e._v(" "),e._m(153),e._v(" "),e._m(154),e._v(" "),e._m(155),e._v(" "),e._m(156),e._v(" "),e._m(157),s("p",[e._v("与往常一样，我们将从其依赖项开始构建模块。这次我们没有使用第三方模块。")]),e._v(" "),e._m(158),e._v(" "),e._m(159),e._v(" "),e._m(160),e._v(" "),e._m(161),e._v(" "),e._m(162),e._v(" "),e._m(163),e._v(" "),e._m(164),e._v(" "),e._m(165),e._m(166),e._v(" "),e._m(167),e._m(168),e._v(" "),e._m(169),e._v(" "),e._m(170),e._v(" "),e._m(171),e._m(172),e._v(" "),e._m(173),e._v(" "),e._m(174),e._m(175),e._v(" "),e._m(176),e._v(" "),e._m(177),e._v(" "),e._m(178),e._m(179),e._v(" "),e._m(180),s("p",[e._v("运行上述程序，会输出如下结果：")]),e._v(" "),e._m(181),e._m(182),e._v(" "),e._m(183),e._v(" "),e._m(184),e._m(185),e._v(" "),e._m(186),e._v(" "),e._m(187),e._v(" "),s("p",[e._v("然而，大多数情况下，我们并不需要原型继承可以给予的所有权力和可扩展性，但通常我们想要的仅仅是定义新"),s("code",[e._v("Streams")]),e._v("的一种快速开发的模式。"),s("code",[e._v("Node.js")]),e._v("社区当然也为此创建了一个解决方案。 一个完美的例子是"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fthrough2",target:"_blank",rel:"noopener noreferrer"}},[e._v("through2"),s("OutboundLink")],1),e._v("，一个使得我们可以简单地创建转换的"),s("code",[e._v("Streams")]),e._v("的小型库。 通过"),s("code",[e._v("through2")]),e._v("，我们可以通过调用一个简单的函数来创建一个新的可转换的"),s("code",[e._v("Streams")]),e._v("：")]),e._v(" "),e._m(188),s("p",[e._v("类似的，"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Ffrom2",target:"_blank",rel:"noopener noreferrer"}},[e._v("from2"),s("OutboundLink")],1),e._v("也允许我们像下面这样创建一个可读的"),s("code",[e._v("Streams")]),e._v("：")]),e._v(" "),e._m(189),s("p",[e._v("接下来，我们将在本章其余部分展示它们的用法，那时，我们会清楚使用这些小型库的好处。")]),e._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fthrough",target:"_blank",rel:"noopener noreferrer"}},[e._v("through"),s("OutboundLink")],1),e._v("和"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffrom",target:"_blank",rel:"noopener noreferrer"}},[e._v("from"),s("OutboundLink")],1),e._v("是基于"),s("code",[e._v("Stream1")]),e._v("规范的顶层库。")])]),e._v(" "),e._m(190),e._v(" "),e._m(191),e._v(" "),e._m(192),e._v(" "),e._m(193),e._v(" "),e._m(194),e._v(" "),e._m(195),e._m(196),e._v(" "),e._m(197),e._m(198),e._v(" "),e._m(199),e._v(" "),e._m(200),e._v(" "),e._m(201),s("p",[e._v("我们现在可以运行上述程序，将目标文件作为第一个命令行参数，接着是要连接的文件列表，例如：")]),e._v(" "),e._m(202),e._m(203),e._v(" "),e._m(204),e._v(" "),e._m(205),e._v(" "),e._m(206),e._v(" "),e._m(207),e._v(" "),e._m(208),e._v(" "),e._m(209),e._v(" "),e._m(210),e._v(" "),e._m(211),e._v(" "),e._m(212),e._m(213),e._v(" "),e._m(214),e._v(" "),e._m(215),e._v(" "),e._m(216),e._v(" "),e._m(217),e._v(" "),e._m(218),e._v(" "),e._m(219),e._v(" "),e._m(220),e._v(" "),e._m(221),e._v(" "),e._m(222),s("p",[e._v("正如我们所看到的，通过流，我们的代码看起来非常优雅，直观。 让我们看看它是如何工作的：")]),e._v(" "),s("ol",[e._m(223),e._v(" "),s("li",[e._v("我们通过"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fsplit",target:"_blank",rel:"noopener noreferrer"}},[e._v("split"),s("OutboundLink")],1),e._v("将输入的文件的"),s("code",[e._v("Streams")]),e._v("的内容输出一个可转换的"),s("code",[e._v("Streams")]),e._v("到管道中，并且分隔了数据块的每一行。")]),e._v(" "),e._m(224),e._v(" "),e._m(225)]),e._v(" "),e._m(226),e._m(227),e._v(" "),e._m(228),e._v(" "),e._m(229),e._v(" "),e._m(230),e._v(" "),e._m(231),e._v(" "),e._m(232),e._v(" "),e._m(233),e._v(" "),e._m(234),e._v(" "),e._m(235),e._v(" "),s("p",[e._v("让我们看看它的构造函数：")]),e._v(" "),e._m(236),e._m(237),e._v(" "),e._m(238),e._m(239),e._v(" "),e._m(240),e._v(" "),e._m(241),e._m(242),e._v(" "),e._m(243),e._v(" "),e._m(244),e._v(" "),e._m(245),e._v(" "),s("p",[e._v("这种技术涉及使用"),s("code",[e._v("buffer")]),e._v("，在每个正在运行的任务发出时重新排序块。为简洁起见，我们不打算提供这样一个"),s("code",[e._v("stream")]),e._v("的实现，因为这本书的范围是相当冗长的；我们要做的就是重用为了这个特定目的而构建的"),s("code",[e._v("npm")]),e._v("上的一个可用包，例如"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fthrough2-parallel",target:"_blank",rel:"noopener noreferrer"}},[e._v("through2-parallel"),s("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(246),e._v(" "),e._m(247),e._m(248),e._v(" "),e._m(249),e._v(" "),e._m(250),e._v(" "),e._m(251),e._v(" "),e._m(252),e._v(" "),e._m(253),e._v(" "),e._m(254),e._v(" "),s("p",[e._v("从上图中，我们看到了如何组合几个流的了：")]),e._v(" "),e._m(255),e._v(" "),e._m(256),e._v(" "),s("blockquote",[s("p",[e._v("要从两个不同的Streams（一个可读的Streams和一个可写入的Streams）中创建一个多重的Streams，我们可以使用一个npm模块，例如"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fduplexer2",target:"_blank",rel:"noopener noreferrer"}},[e._v("duplexer2"),s("OutboundLink")],1),e._v("。")])]),e._v(" "),e._m(257),e._v(" "),e._m(258),e._v(" "),e._m(259),e._v(" "),s("p",[e._v("组合的"),s("code",[e._v("Streams")]),e._v("是一个非常通用和普遍的做法，所以如果我们没有任何特殊的需要，我们可能只想重用现有的解决方案，如"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.org%2Fpackage%2Fmultipipe",target:"_blank",rel:"noopener noreferrer"}},[e._v("multipipe"),s("OutboundLink")],1),e._v("或"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.org%2Fpackage%2Fcombine-stream",target:"_blank",rel:"noopener noreferrer"}},[e._v("combine-stream"),s("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(260),e._v(" "),e._m(261),e._v(" "),e._m(262),e._v(" "),e._m(263),e._v(" "),e._m(264),e._m(265),e._v(" "),e._m(266),e._m(267),e._v(" "),e._m(268),e._m(269),e._v(" "),e._m(270),e._m(271),e._v(" "),e._m(272),e._m(273),e._v(" "),e._m(274),e._v(" "),e._m(275),e._v(" "),e._m(276),e._v(" "),e._m(277),e._v(" "),e._m(278),e._v(" "),e._m(279),e._v(" "),e._m(280),e._m(281),e._v(" "),e._m(282),e._m(283),e._v(" "),e._m(284),e._v(" "),e._m(285),e._v(" "),e._m(286),e._v(" "),e._m(287),e._v(" "),e._m(288),e._v(" "),e._m(289),e._v(" "),e._m(290),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ftar",target:"_blank",rel:"noopener noreferrer"}},[e._v("tar"),s("OutboundLink")],1),e._v("用来创建压缩包")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffstream",target:"_blank",rel:"noopener noreferrer"}},[e._v("fstream"),s("OutboundLink")],1),e._v("从文件系统文件创建对象streams的库")])]),e._v(" "),e._m(291),e._v(" "),e._m(292),e._m(293),e._v(" "),e._m(294),e._v(" "),e._m(295),e._m(296),e._v(" "),e._m(297),e._m(298),e._v(" "),e._m(299),e._v(" "),e._m(300),e._m(301),e._v(" "),e._m(302),e._v(" "),e._m(303),e._m(304),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmerge-stream",target:"_blank",rel:"noopener noreferrer"}},[e._v("merge-stream"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmultistream-merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("multistream-merge"),s("OutboundLink")],1)])]),e._v(" "),e._m(305),e._v(" "),s("p",[e._v("然而，我们可以通过一种模式按顺序合并"),s("code",[e._v("Stream")]),e._v("; 它包含一个接一个地合并源"),s("code",[e._v("Stream")]),e._v("，当前一个结束时，开始发送第二段数据块（就像连接所有源"),s("code",[e._v("Stream")]),e._v("的输出一样）。在"),s("code",[e._v("npm")]),e._v("上，我们可以找到一些也处理这种情况的软件包。其中之一是"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fmultistream",target:"_blank",rel:"noopener noreferrer"}},[e._v("multistream"),s("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(306),e._v(" "),e._m(307),e._v(" "),e._m(308),e._v(" "),e._m(309),e._v(" "),e._m(310),e._v(" "),e._m(311),e._v(" "),e._m(312),e._v(" "),s("p",[e._v("如图所示，这个例子的协议大概是这样，数据被封装成具有以下结构的数据包：")]),e._v(" "),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"471",height:"153"}}),e._v(")")]),e._v(" "),e._m(313),e._v(" "),e._m(314),e._v(" "),s("p",[e._v("开始定义模块，首先加载依赖：")]),e._v(" "),e._m(315),s("p",[e._v("然后开始实现多路复用的函数：")]),e._v(" "),e._m(316),e._m(317),e._v(" "),e._m(318),e._v(" "),e._m(319),e._v(" "),e._m(320),s("p",[e._v("在最后，我们执行以下操作：")]),e._v(" "),e._m(321),e._v(" "),e._m(322),e._v(" "),e._m(323),e._v(" "),e._m(324),e._v(" "),e._m(325),e._m(326),e._v(" "),e._m(327),e._v(" "),e._m(328),e._v(" "),e._m(329),e._m(330),e._v(" "),e._m(331),e._v(" "),e._m(332),e._v(" "),e._m(333),s("p",[e._v("首先，让我们开始运行服务端：")]),e._v(" "),e._m(334),s("p",[e._v("然后运行客户端，需要提供作为子进程的文件参数：")]),e._v(" "),e._m(335),e._m(336),e._v(" "),e._m(337),e._v(" "),e._m(338),e._v(" "),e._m(339),e._v(" "),e._m(340),e._v(" "),e._m(341),e._v(" "),e._m(342),e._v(" "),e._m(343),e._v(" "),e._m(344),e._v(" "),e._m(345),e._v(" "),e._m(346),e._v(" "),e._m(347),e._v(" "),s("p",[e._v("本系列文章为"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fbook.douban.com%2Fsubject%2F26819950%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《Node.js Design Patterns Second Edition》"),s("OutboundLink")],1),e._v("的原文翻译和读书笔记，在GitHub连载更新，"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fxingbofeng%2FNode.js-Design-Patterns-Second-Edition",target:"_blank",rel:"noopener noreferrer"}},[e._v("同步翻译版链接"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("欢迎关注我的专栏，之后的博文将在专栏同步：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fuser%2F587a050661ff4b0065f1951c",target:"_blank",rel:"noopener noreferrer"}},[e._v("Encounter的掘金专栏"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fencounter",target:"_blank",rel:"noopener noreferrer"}},[e._v("知乎专栏 Encounter的编程思考"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fblog%2Fxingbofeng",target:"_blank",rel:"noopener noreferrer"}},[e._v("segmentfault专栏 前端小站"),s("OutboundLink")],1)])]),e._v(" "),e._m(348),e._v(" "),e._m(349),e._v(" "),e._m(350),e._v(" "),s("p",[e._v("在本章中，将会学到以下内容：")]),e._v(" "),e._m(351),e._v(" "),e._m(352),e._v(" "),e._m(353),e._v(" "),e._m(354),e._v(" "),e._m(355),e._v(" "),e._m(356),e._v(" "),e._m(357),e._v(" "),e._m(358),e._v(" "),e._m(359),e._v(" "),e._m(360),e._v(" "),e._m(361),e._v(" "),s("p",[e._v("但是这两种方法有什么区别呢？ 我们可以将它们概括为两点：")]),e._v(" "),e._m(362),e._v(" "),e._m(363),e._v(" "),e._m(364),e._v(" "),e._m(365),e._v(" "),e._m(366),e._v(" "),e._m(367),e._v(" "),e._m(368),e._m(369),e._v(" "),e._m(370),e._m(371),e._v(" "),e._m(372),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"141"}}),e._v(")")]),e._v(" "),e._m(373),e._v(" "),e._m(374),e._v(" "),e._m(375),e._v(" "),e._m(376),e._v(" "),e._m(377),e._m(378),e._v(" "),e._m(379),e._v(" "),e._m(380),e._v(" "),e._m(381),e._v(" "),e._m(382),e._m(383),e._v(" "),e._m(384),e._v(" "),e._m(385),e._v(" "),s("p",[e._v("现在，运行这个应用程序，我们首先使用以下命令启动服务器：")]),e._v(" "),e._m(386),e._m(387),e._v(" "),e._m(388),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"399"}}),e._v(")")]),e._v(" "),e._m(389),e._v(" "),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1118",height:"420"}}),e._v(")")]),e._v(" "),s("p",[e._v("一个文件被处理的过程，它经过以下阶段：")]),e._v(" "),e._m(390),e._v(" "),e._m(391),e._v(" "),e._m(392),e._v(" "),e._m(393),e._v(" "),e._m(394),e._v(" "),e._m(395),e._v(" "),e._m(396),s("p",[e._v("使用相同的方式，我们更新服务端的代码，使得它可以在数据块进行解压之前先解密：")]),e._v(" "),e._m(397),s("blockquote",[s("p",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnodejs.org%2Fdist%2Flatest-v9.x%2Fdocs%2Fapi%2Fcrypto.html%23crypto_crypto",target:"_blank",rel:"noopener noreferrer"}},[e._v("crypto"),s("OutboundLink")],1),e._v("是Node.js的核心模块之一，提供了一系列加密算法。")])]),e._v(" "),e._m(398),e._v(" "),e._m(399),e._v(" "),e._m(400),e._v(" "),e._m(401),e._v(" "),e._m(402),e._v(" "),e._m(403),e._v(" "),e._m(404),e._v(" "),e._m(405),e._v(" "),e._m(406),e._v(" "),e._m(407),e._v(" "),e._m(408),e._v(" "),e._m(409),e._v(" "),e._m(410),e._v(" "),e._m(411),e._v(" "),e._m(412),e._v(" "),e._m(413),e._v(" "),e._m(414),e._v(" "),e._m(415),e._v(" "),e._m(416),e._v(" "),e._m(417),e._v(" "),e._m(418),e._m(419),e._v(" "),e._m(420),e._v(" "),e._m(421),e._m(422),e._v(" "),e._m(423),e._v(" "),e._m(424),e._v(" "),e._m(425),e._v(" "),e._m(426),e._v(" "),e._m(427),s("p",[e._v("这是流式范例是一个通用接口的一个很好的例子，它使得我们的程序能够进行通信，而不管它们是用什么语言写的。")]),e._v(" "),e._m(428),e._v(" "),e._m(429),e._v(" "),e._m(430),e._m(431),e._v(" "),e._m(432),e._v(" "),e._m(433),e._v(" "),e._m(434),e._v(" "),e._m(435),e._m(436),e._v(" "),e._m(437),e._v(" "),e._m(438),e._v(" "),e._m(439),s("p",[e._v("在文件顶部，我们将加载我们的依赖关系。除了我们正在加载一个"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fchance",target:"_blank",rel:"noopener noreferrer"}},[e._v("chance的npm模块"),s("OutboundLink")],1),e._v("之外，没有什么特别之处，它是一个用于生成各种随机值的库，从数字到字符串到整个句子都能生成随机值。")]),e._v(" "),e._m(440),e._v(" "),e._m(441),e._v(" "),e._m(442),e._v(" "),e._m(443),e._v(" "),e._m(444),e._v(" "),e._m(445),e._v(" "),e._m(446),e._m(447),e._v(" "),e._m(448),e._v(" "),e._m(449),e._v(" "),e._m(450),e._v(" "),e._m(451),e._v(" "),e._m(452),e._m(453),e._v(" "),e._m(454),e._v(" "),e._m(455),e._m(456),e._v(" "),e._m(457),e._v(" "),e._m(458),e._m(459),e._v(" "),e._m(460),e._v(" "),e._m(461),e._v(" "),e._m(462),e._m(463),e._v(" "),e._m(464),e._v(" "),e._m(465),e._v(" "),e._m(466),e._v(" "),e._m(467),e._v(" "),e._m(468),e._v(" "),e._m(469),s("p",[e._v("前面代码中最重要的步骤可以概括如下：")]),e._v(" "),e._m(470),e._v(" "),e._m(471),e._v(" "),e._m(472),e._v(" "),e._m(473),e._v(" "),e._m(474),e._v(" "),e._m(475),e._m(476),e._v(" "),e._m(477),e._v(" "),e._m(478),e._m(479),e._v(" "),e._m(480),e._v(" "),e._m(481),e._v(" "),e._m(482),e._v(" "),e._m(483),e._v(" "),e._m(484),e._v(" "),e._m(485),e._v(" "),e._m(486),s("p",[e._v("有了这个，我们创建并使用了我们的第一个自定义的可写入流。 像往常一样运行新模块来检查其输出；你会看到执行后会创建三个新文件。")]),e._v(" "),e._m(487),e._v(" "),e._m(488),e._v(" "),e._m(489),e._v(" "),e._m(490),e._v(" "),e._m(491),e._m(492),e._v(" "),e._m(493),e._v(" "),e._m(494),e._v(" "),e._m(495),e._v(" "),e._m(496),e._v(" "),e._m(497),e._v(" "),e._m(498),e._v(" "),e._m(499),e._v(" "),e._m(500),e._v(" "),e._m(501),e._v(" "),e._m(502),e._v(" "),e._m(503),e._v(" "),e._m(504),s("p",[e._v("与往常一样，我们将从其依赖项开始构建模块。这次我们没有使用第三方模块。")]),e._v(" "),e._m(505),e._v(" "),e._m(506),e._v(" "),e._m(507),e._v(" "),e._m(508),e._v(" "),e._m(509),e._v(" "),e._m(510),e._v(" "),e._m(511),e._v(" "),e._m(512),e._m(513),e._v(" "),e._m(514),e._m(515),e._v(" "),e._m(516),e._v(" "),e._m(517),e._v(" "),e._m(518),e._m(519),e._v(" "),e._m(520),e._v(" "),e._m(521),e._m(522),e._v(" "),e._m(523),e._v(" "),e._m(524),e._v(" "),e._m(525),e._m(526),e._v(" "),e._m(527),s("p",[e._v("运行上述程序，会输出如下结果：")]),e._v(" "),e._m(528),e._m(529),e._v(" "),e._m(530),e._v(" "),e._m(531),e._m(532),e._v(" "),e._m(533),e._v(" "),e._m(534),e._v(" "),s("p",[e._v("然而，大多数情况下，我们并不需要原型继承可以给予的所有权力和可扩展性，但通常我们想要的仅仅是定义新"),s("code",[e._v("Streams")]),e._v("的一种快速开发的模式。"),s("code",[e._v("Node.js")]),e._v("社区当然也为此创建了一个解决方案。 一个完美的例子是"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fthrough2",target:"_blank",rel:"noopener noreferrer"}},[e._v("through2"),s("OutboundLink")],1),e._v("，一个使得我们可以简单地创建转换的"),s("code",[e._v("Streams")]),e._v("的小型库。 通过"),s("code",[e._v("through2")]),e._v("，我们可以通过调用一个简单的函数来创建一个新的可转换的"),s("code",[e._v("Streams")]),e._v("：")]),e._v(" "),e._m(535),s("p",[e._v("类似的，"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Ffrom2",target:"_blank",rel:"noopener noreferrer"}},[e._v("from2"),s("OutboundLink")],1),e._v("也允许我们像下面这样创建一个可读的"),s("code",[e._v("Streams")]),e._v("：")]),e._v(" "),e._m(536),s("p",[e._v("接下来，我们将在本章其余部分展示它们的用法，那时，我们会清楚使用这些小型库的好处。")]),e._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fthrough",target:"_blank",rel:"noopener noreferrer"}},[e._v("through"),s("OutboundLink")],1),e._v("和"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffrom",target:"_blank",rel:"noopener noreferrer"}},[e._v("from"),s("OutboundLink")],1),e._v("是基于"),s("code",[e._v("Stream1")]),e._v("规范的顶层库。")])]),e._v(" "),e._m(537),e._v(" "),e._m(538),e._v(" "),e._m(539),e._v(" "),e._m(540),e._v(" "),e._m(541),e._v(" "),e._m(542),e._m(543),e._v(" "),e._m(544),e._m(545),e._v(" "),e._m(546),e._v(" "),e._m(547),e._v(" "),e._m(548),s("p",[e._v("我们现在可以运行上述程序，将目标文件作为第一个命令行参数，接着是要连接的文件列表，例如：")]),e._v(" "),e._m(549),e._m(550),e._v(" "),e._m(551),e._v(" "),e._m(552),e._v(" "),e._m(553),e._v(" "),e._m(554),e._v(" "),e._m(555),e._v(" "),e._m(556),e._v(" "),e._m(557),e._v(" "),e._m(558),e._v(" "),e._m(559),e._m(560),e._v(" "),e._m(561),e._v(" "),e._m(562),e._v(" "),e._m(563),e._v(" "),e._m(564),e._v(" "),e._m(565),e._v(" "),e._m(566),e._v(" "),e._m(567),e._v(" "),e._m(568),e._v(" "),e._m(569),s("p",[e._v("正如我们所看到的，通过流，我们的代码看起来非常优雅，直观。 让我们看看它是如何工作的：")]),e._v(" "),s("ol",[e._m(570),e._v(" "),s("li",[e._v("我们通过"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fsplit",target:"_blank",rel:"noopener noreferrer"}},[e._v("split"),s("OutboundLink")],1),e._v("将输入的文件的"),s("code",[e._v("Streams")]),e._v("的内容输出一个可转换的"),s("code",[e._v("Streams")]),e._v("到管道中，并且分隔了数据块的每一行。")]),e._v(" "),e._m(571),e._v(" "),e._m(572)]),e._v(" "),e._m(573),e._m(574),e._v(" "),e._m(575),e._v(" "),e._m(576),e._v(" "),e._m(577),e._v(" "),e._m(578),e._v(" "),e._m(579),e._v(" "),e._m(580),e._v(" "),e._m(581),e._v(" "),e._m(582),e._v(" "),s("p",[e._v("让我们看看它的构造函数：")]),e._v(" "),e._m(583),e._m(584),e._v(" "),e._m(585),e._m(586),e._v(" "),e._m(587),e._v(" "),e._m(588),e._m(589),e._v(" "),e._m(590),e._v(" "),e._m(591),e._v(" "),e._m(592),e._v(" "),s("p",[e._v("这种技术涉及使用"),s("code",[e._v("buffer")]),e._v("，在每个正在运行的任务发出时重新排序块。为简洁起见，我们不打算提供这样一个"),s("code",[e._v("stream")]),e._v("的实现，因为这本书的范围是相当冗长的；我们要做的就是重用为了这个特定目的而构建的"),s("code",[e._v("npm")]),e._v("上的一个可用包，例如"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fthrough2-parallel",target:"_blank",rel:"noopener noreferrer"}},[e._v("through2-parallel"),s("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(593),e._v(" "),e._m(594),e._m(595),e._v(" "),e._m(596),e._v(" "),e._m(597),e._v(" "),e._m(598),e._v(" "),e._m(599),e._v(" "),e._m(600),e._v(" "),e._m(601),e._v(" "),s("p",[e._v("从上图中，我们看到了如何组合几个流的了：")]),e._v(" "),e._m(602),e._v(" "),e._m(603),e._v(" "),s("blockquote",[s("p",[e._v("要从两个不同的Streams（一个可读的Streams和一个可写入的Streams）中创建一个多重的Streams，我们可以使用一个npm模块，例如"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fduplexer2",target:"_blank",rel:"noopener noreferrer"}},[e._v("duplexer2"),s("OutboundLink")],1),e._v("。")])]),e._v(" "),e._m(604),e._v(" "),e._m(605),e._v(" "),e._m(606),e._v(" "),s("p",[e._v("组合的"),s("code",[e._v("Streams")]),e._v("是一个非常通用和普遍的做法，所以如果我们没有任何特殊的需要，我们可能只想重用现有的解决方案，如"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.org%2Fpackage%2Fmultipipe",target:"_blank",rel:"noopener noreferrer"}},[e._v("multipipe"),s("OutboundLink")],1),e._v("或"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.org%2Fpackage%2Fcombine-stream",target:"_blank",rel:"noopener noreferrer"}},[e._v("combine-stream"),s("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(607),e._v(" "),e._m(608),e._v(" "),e._m(609),e._v(" "),e._m(610),e._v(" "),e._m(611),e._m(612),e._v(" "),e._m(613),e._m(614),e._v(" "),e._m(615),e._m(616),e._v(" "),e._m(617),e._m(618),e._v(" "),e._m(619),e._m(620),e._v(" "),e._m(621),e._v(" "),e._m(622),e._v(" "),e._m(623),e._v(" "),e._m(624),e._v(" "),e._m(625),e._v(" "),e._m(626),e._v(" "),e._m(627),e._m(628),e._v(" "),e._m(629),e._m(630),e._v(" "),e._m(631),e._v(" "),e._m(632),e._v(" "),e._m(633),e._v(" "),e._m(634),e._v(" "),e._m(635),e._v(" "),e._m(636),e._v(" "),e._m(637),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ftar",target:"_blank",rel:"noopener noreferrer"}},[e._v("tar"),s("OutboundLink")],1),e._v("用来创建压缩包")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Ffstream",target:"_blank",rel:"noopener noreferrer"}},[e._v("fstream"),s("OutboundLink")],1),e._v("从文件系统文件创建对象streams的库")])]),e._v(" "),e._m(638),e._v(" "),e._m(639),e._m(640),e._v(" "),e._m(641),e._v(" "),e._m(642),e._m(643),e._v(" "),e._m(644),e._m(645),e._v(" "),e._m(646),e._v(" "),e._m(647),e._m(648),e._v(" "),e._m(649),e._v(" "),e._m(650),e._m(651),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmerge-stream",target:"_blank",rel:"noopener noreferrer"}},[e._v("merge-stream"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmultistream-merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("multistream-merge"),s("OutboundLink")],1)])]),e._v(" "),e._m(652),e._v(" "),s("p",[e._v("然而，我们可以通过一种模式按顺序合并"),s("code",[e._v("Stream")]),e._v("; 它包含一个接一个地合并源"),s("code",[e._v("Stream")]),e._v("，当前一个结束时，开始发送第二段数据块（就像连接所有源"),s("code",[e._v("Stream")]),e._v("的输出一样）。在"),s("code",[e._v("npm")]),e._v("上，我们可以找到一些也处理这种情况的软件包。其中之一是"),s("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fnpmjs.org%2Fpackage%2Fmultistream",target:"_blank",rel:"noopener noreferrer"}},[e._v("multistream"),s("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(653),e._v(" "),e._m(654),e._v(" "),e._m(655),e._v(" "),e._m(656),e._v(" "),e._m(657),e._v(" "),e._m(658),e._v(" "),e._m(659),e._v(" "),s("p",[e._v("如图所示，这个例子的协议大概是这样，数据被封装成具有以下结构的数据包：")]),e._v(" "),s("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"471",height:"153"}}),e._v(")")]),e._v(" "),e._m(660),e._v(" "),e._m(661),e._v(" "),s("p",[e._v("开始定义模块，首先加载依赖：")]),e._v(" "),e._m(662),s("p",[e._v("然后开始实现多路复用的函数：")]),e._v(" "),e._m(663),e._m(664),e._v(" "),e._m(665),e._v(" "),e._m(666),e._v(" "),e._m(667),s("p",[e._v("在最后，我们执行以下操作：")]),e._v(" "),e._m(668),e._v(" "),e._m(669),e._v(" "),e._m(670),e._v(" "),e._m(671),e._v(" "),e._m(672),e._m(673),e._v(" "),e._m(674),e._v(" "),e._m(675),e._v(" "),e._m(676),e._m(677),e._v(" "),e._m(678),e._v(" "),e._m(679),e._v(" "),e._m(680),s("p",[e._v("首先，让我们开始运行服务端：")]),e._v(" "),e._m(681),s("p",[e._v("然后运行客户端，需要提供作为子进程的文件参数：")]),e._v(" "),e._m(682),e._m(683),e._v(" "),e._m(684),e._v(" "),e._m(685),e._v(" "),e._m(686),e._v(" "),e._m(687),e._v(" "),e._m(688),e._v(" "),e._m(689),e._v(" "),e._m(690),e._v(" "),e._m(691),e._v(" "),e._m(692),e._v(" "),e._m(693),e._v(" "),e._m(694)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"《node-js设计模式》使用流进行编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《node-js设计模式》使用流进行编码","aria-hidden":"true"}},[this._v("#")]),this._v(" 《Node.js设计模式》使用流进行编码")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"coding-with-streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#coding-with-streams","aria-hidden":"true"}},[this._v("#")]),this._v(" Coding with Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("Streams")]),e._v("是"),s("code",[e._v("Node.js")]),e._v("最重要的组件和模式之一。 社区中有一句格言“Stream all the things（Steam就是所有的）”，仅此一点就足以描述流在"),s("code",[e._v("Node.js")]),e._v("中的地位。 "),s("code",[e._v("Dominic Tarr")]),e._v("作为"),s("code",[e._v("Node.js")]),e._v("社区的最大贡献者，它将流定义为"),s("code",[e._v("Node.js")]),e._v("最好，也是最难以理解的概念。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("使"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("如此吸引人还有其它原因; 此外，"),s("code",[e._v("Streams")]),e._v("不仅与性能或效率等技术特性有关，更重要的是它们的优雅性以及它们与"),s("code",[e._v("Node.js")]),e._v("的设计理念完美契合的方式。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[s("code",[e._v("Streams")]),e._v("对于"),s("code",[e._v("Node.js")]),e._v("的重要性。")]),e._v(" "),s("li",[e._v("如何创建并使用"),s("code",[e._v("Streams")]),e._v("。")]),e._v(" "),s("li",[s("code",[e._v("Streams")]),e._v("作为编程范式，不只是对于"),s("code",[e._v("I/O")]),e._v("而言，在多种应用场景下它的应用和强大的功能。")]),e._v(" "),s("li",[e._v("管道模式和在不同的配置中连接"),s("code",[e._v("Streams")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"发现streams的重要性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发现streams的重要性","aria-hidden":"true"}},[this._v("#")]),this._v(" 发现Streams的重要性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在基于事件的平台（如"),t("code",[this._v("Node.js")]),this._v("）中，处理"),t("code",[this._v("I / O")]),this._v("的最有效的方法是实时处理，一旦有输入的信息，立马进行处理，一旦有需要输出的结果，也立马输出反馈。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在本节中，我们将首先介绍"),t("code",[this._v("Node.js")]),this._v("的"),t("code",[this._v("Streams")]),this._v("和它的优点。 请记住，这只是一个概述，因为本章后面将会详细介绍如何使用和组合"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"streams和buffer的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streams和buffer的比较","aria-hidden":"true"}},[this._v("#")]),this._v(" Streams和Buffer的比较")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们在本书中几乎所有看到过的异步API都是使用的"),t("code",[this._v("Buffer")]),this._v("模式。 对于输入操作，"),t("code",[this._v("Buffer")]),this._v("模式会将来自资源的所有数据收集到"),t("code",[this._v("Buffer")]),this._v("区中; 一旦读取完整个资源，就会把结果传递给回调函数。 下图显示了这个范例的一个真实的例子：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8eb6b75a9c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("从上图我们可以看到，在"),t("strong",[this._v("t1")]),this._v("时刻，一些数据从资源接收并保存到缓冲区。 在"),t("strong",[this._v("t2")]),this._v("时刻，最后一段数据被接收到另一个数据块，完成读取操作，这时，把整个缓冲区的内容发送给消费者。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另一方面，"),t("code",[this._v("Streams")]),this._v("允许你在数据到达时立即处理数据。 如下图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8eb858cfbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这一张图显示了"),t("code",[this._v("Streams")]),this._v("如何从资源接收每个新的数据块，并立即提供给消费者，消费者现在不必等待缓冲区中收集所有数据再处理每个数据块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("空间效率")]),this._v(" "),t("li",[this._v("时间效率")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("此外，"),t("code",[this._v("Node.js")]),this._v("的"),t("code",[this._v("Streams")]),this._v("具有另一个重要的优点："),t("strong",[this._v("可组合性（composability）")]),this._v("。 现在让我们看看这些属性对我们设计和编写应用程序的方式会产生什么影响。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"空间效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间效率","aria-hidden":"true"}},[this._v("#")]),this._v(" 空间效率")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("首先，"),s("code",[e._v("Streams")]),e._v("允许我们做一些看起来不可能的事情，通过缓冲数据并一次性处理。 例如，考虑一下我们必须读取一个非常大的文件，比如说数百"),s("code",[e._v("MB")]),e._v("甚至千"),s("code",[e._v("MB")]),e._v("。 显然，等待完全读取文件时返回大"),s("code",[e._v("Buffer")]),e._v("的"),s("code",[e._v("API")]),e._v("不是一个好主意。 想象一下，如果并发读取一些大文件， 我们的应用程序很容易耗尽内存。 除此之外，"),s("code",[e._v("V8")]),e._v("中的"),s("code",[e._v("Buffer")]),e._v("不能大于"),s("code",[e._v("0x3FFFFFFF")]),e._v("字节（小于"),s("code",[e._v("1GB")]),e._v("）。 所以，在耗尽物理内存之前，我们可能会碰壁。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"使用buffered的api进行压缩文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用buffered的api进行压缩文件","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用Buffered的API进行压缩文件")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("举一个具体的例子，让我们考虑一个简单的命令行接口（"),s("code",[e._v("CLI")]),e._v("）的应用程序，它使用"),s("code",[e._v("Gzip")]),e._v("格式压缩文件。 使用"),s("code",[e._v("Buffered")]),e._v("的"),s("code",[e._v("API")]),e._v("，这样的应用程序在"),s("code",[e._v("Node.js")]),e._v("中大概这么编写（为简洁起见，省略了异常处理）：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst zlib = require('zlib');\nconst file = process.argv[2];\nfs.readFile(file, (err, buffer) => {\n  zlib.gzip(buffer, (err, buffer) => {\n    fs.writeFile(file + '.gz', buffer, err => {\n      console.log('File successfully compressed');\n    });\n  });\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，我们可以尝试将前面的代码放在一个叫做"),t("code",[this._v("gzip.js")]),this._v("的文件中，然后执行下面的命令：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node gzip <path to file>\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果我们选择一个足够大的文件，比如说大于"),t("code",[this._v("1GB")]),this._v("的文件，我们会收到一个错误信息，说明我们要读取的文件大于最大允许的缓冲区大小，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("RangeError: File size is greater than possible Buffer:0x3FFFFFFF\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("上面的例子中，没找到一个大文件，但确实对于大文件的读取速率慢了许多。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("正如我们所预料到的那样，使用"),t("code",[this._v("Buffer")]),this._v("来进行大文件的读取显然是错误的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"使用streams进行压缩文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用streams进行压缩文件","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用Streams进行压缩文件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们必须修复我们的"),t("code",[this._v("Gzip")]),this._v("应用程序，并使其处理大文件的最简单方法是使用"),t("code",[this._v("Streams")]),this._v("的"),t("code",[this._v("API")]),this._v("。 让我们看看如何实现这一点。 让我们用下面的代码替换刚创建的模块的内容：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst zlib = require('zlib');\nconst file = process.argv[2];\nfs.createReadStream(file)\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream(file + '.gz'))\n  .on('finish', () => console.log('File successfully compressed'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("“是吗？”你可能会问。是的；正如我们所说的，由于"),t("code",[this._v("Streams")]),this._v("的接口和可组合性，因此我们还能写出这样的更加简洁，优雅和精炼的代码。 我们稍后会详细地看到这一点，但是现在需要认识到的重要一点是，程序可以顺畅地运行在任何大小的文件上，理想情况是内存利用率不变。 尝试一下（但考虑压缩一个大文件可能需要一段时间）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"时间效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间效率","aria-hidden":"true"}},[this._v("#")]),this._v(" 时间效率")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在让我们考虑一个压缩文件并将其上传到远程"),s("code",[e._v("HTTP")]),e._v("服务器的应用程序的例子，该远程"),s("code",[e._v("HTTP")]),e._v("服务器进而将其解压缩并保存到文件系统中。如果我们的客户端是使用"),s("code",[e._v("Buffered")]),e._v("的"),s("code",[e._v("API")]),e._v("实现的，那么只有当整个文件被读取和压缩时，上传才会开始。 另一方面，只有在接收到所有数据的情况下，解压缩才会在服务器上启动。 实现相同结果的更好的解决方案涉及使用"),s("code",[e._v("Streams")]),e._v("。 在客户端机器上，"),s("code",[e._v("Streams")]),e._v("只要从文件系统中读取就可以压缩和发送数据块，而在服务器上，只要从远程对端接收到数据块，就可以解压每个数据块。 我们通过构建前面提到的应用程序来展示这一点，从服务器端开始。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们创建一个叫做"),t("code",[this._v("gzipReceive.js")]),this._v("的模块，代码如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\nconst fs = require('fs');\nconst zlib = require('zlib');\n\nconst server = http.createServer((req, res) => {\n  const filename = req.headers.filename;\n  console.log('File request received: ' + filename);\n  req\n    .pipe(zlib.createGunzip())\n    .pipe(fs.createWriteStream(filename))\n    .on('finish', () => {\n      res.writeHead(201, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('That\\'s it\\n');\n      console.log(`File saved: ${filename}`);\n    });\n});\n\nserver.listen(3000, () => console.log('Listening'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("服务器从网络接收数据块，将其解压缩，并在接收到数据块后立即保存，这要归功于"),t("code",[this._v("Node.js")]),this._v("的"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们的应用程序的客户端将进入一个名为"),t("code",[this._v("gzipSend.js")]),this._v("的模块，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在前面的代码中，我们再次使用"),t("code",[this._v("Streams")]),this._v("从文件中读取数据，然后在从文件系统中读取的同时压缩并发送每个数据块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node gzipReceive\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，我们可以通过指定要发送的文件和服务器的地址（例如"),t("code",[this._v("localhost")]),this._v("）来启动客户端：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node gzipSend <path to file> localhost\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果我们选择一个足够大的文件，我们将更容易地看到数据如何从客户端流向服务器，但为什么这种模式下，我们使用"),t("code",[this._v("Streams")]),this._v("，比使用"),t("code",[this._v("Buffered")]),this._v("的"),t("code",[this._v("API")]),this._v("更有效率？ 下图应该给我们一个提示：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("客户端从文件系统中读取")]),e._v(" "),s("li",[e._v("客户端压缩数据")]),e._v(" "),s("li",[e._v("客户端将数据发送到服务器")]),e._v(" "),s("li",[e._v("服务端接收数据")]),e._v(" "),s("li",[e._v("服务端解压数据")]),e._v(" "),s("li",[e._v("服务端将数据写入磁盘")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了完成处理，我们必须按照流水线顺序那样经过每个阶段，直到最后。在上图中，我们可以看到，使用"),s("code",[e._v("Buffered")]),e._v("的"),s("code",[e._v("API")]),e._v("，这个过程完全是顺序的。为了压缩数据，我们首先必须等待整个文件被读取完毕，然后，发送数据，我们必须等待整个文件被读取和压缩，依此类推。当我们使用"),s("code",[e._v("Streams")]),e._v("时，只要我们收到第一个数据块，流水线就会被启动，而不需要等待整个文件的读取。但更令人惊讶的是，当下一块数据可用时，不需要等待上一组任务完成；相反，另一条装配线是并行启动的。因为我们执行的每个任务都是异步的，这样显得很完美，所以可以通过"),s("code",[e._v("Node.js")]),e._v("来并行执行"),s("code",[e._v("Streams")]),e._v("的相关操作；唯一的限制就是每个阶段都必须保证数据块的到达顺序。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("从前面的图可以看出，使用"),t("code",[this._v("Streams")]),this._v("的结果是整个过程花费的时间更少，因为我们不用等待所有数据被全部读取完毕和处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"组合性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合性","aria-hidden":"true"}},[this._v("#")]),this._v(" 组合性")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("到目前为止，我们已经看到的代码已经告诉我们如何使用"),s("code",[e._v("pipe()")]),e._v("方法来组装"),s("code",[e._v("Streams")]),e._v("的数据块，"),s("code",[e._v("Streams")]),e._v("允许我们连接不同的处理单元，每个处理单元负责单一的职责（这是符合"),s("code",[e._v("Node.js")]),e._v("风格的）。这是可能的，因为"),s("code",[e._v("Streams")]),e._v("具有统一的接口，并且就"),s("code",[e._v("API")]),e._v("而言，不同"),s("code",[e._v("Streams")]),e._v("也可以很好的进行交互。唯一的先决条件是管道的下一个"),s("code",[e._v("Streams")]),e._v("必须支持上一个"),s("code",[e._v("Streams")]),e._v("生成的数据类型，可以是二进制，文本甚至是对象，我们将在后面的章节中看到。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了证明"),s("code",[e._v("Streams")]),e._v("组合性的优势，我们可以尝试在我们先前构建的"),s("code",[e._v("gzipReceive / gzipSend")]),e._v("应用程序中添加加密功能。 为此，我们只需要通过向流水线添加另一个"),s("code",[e._v("Streams")]),e._v("来更新客户端。 确切地说，由"),s("code",[e._v("crypto.createChipher()")]),e._v("返回的流。 由此产生的代码应如下所示：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst zlib = require('zlib');\nconst crypto = require('crypto');\nconst http = require('http');\nconst path = require('path');\n\nconst file = process.argv[2];\nconst server = process.argv[3];\n\nconst options = {\n  hostname: server,\n  port: 3000,\n  path: '/',\n  method: 'PUT',\n  headers: {\n    filename: path.basename(file),\n    'Content-Type': 'application/octet-stream',\n    'Content-Encoding': 'gzip'\n  }\n};\n\nconst req = http.request(options, res => {\n  console.log('Server response: ' + res.statusCode);\n});\n\nfs.createReadStream(file)\n  .pipe(zlib.createGzip())\n  .pipe(crypto.createCipher('aes192', 'a_shared_secret'))\n  .pipe(req)\n  .on('finish', () => {\n    console.log('File successfully sent');\n  });\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\nconst fs = require('fs');\nconst zlib = require('zlib');\nconst crypto = require('crypto');\n\nconst server = http.createServer((req, res) => {\n  const filename = req.headers.filename;\n  console.log('File request received: ' + filename);\n  req\n    .pipe(crypto.createDecipher('aes192', 'a_shared_secret'))\n    .pipe(zlib.createGunzip())\n    .pipe(fs.createWriteStream(filename))\n    .on('finish', () => {\n      res.writeHead(201, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('That\\'s it\\n');\n      console.log(`File saved: ${filename}`);\n    });\n});\n\nserver.listen(3000, () => console.log('Listening'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("只需几行代码，我们就在应用程序中添加了一个加密层。 我们只需要简单地通过把已经存在的"),t("code",[this._v("Streams")]),this._v("模块和加密层组合到一起，就可以。类似的，我们可以添加和合并其他"),t("code",[this._v("Streams")]),this._v("，如同在玩乐高积木一样。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("显然，这种方法的主要优点是可重用性，但正如我们从目前为止所介绍的代码中可以看到的那样，"),t("code",[this._v("Streams")]),this._v("也可以实现更清晰，更模块化，更加简洁的代码。 出于这些原因，流通常不仅仅用于处理纯粹的"),t("code",[this._v("I / O")]),this._v("，而且它还是简化和模块化代码的手段。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"开始使用streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开始使用streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 开始使用Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在前面的章节中，我们了解了为什么"),s("code",[e._v("Streams")]),e._v("如此强大，而且它在"),s("code",[e._v("Node.js")]),e._v("中无处不在，甚至在"),s("code",[e._v("Node.js")]),e._v("的核心模块中也有其身影。 例如，我们已经看到，"),s("code",[e._v("fs")]),e._v("模块具有用于从文件读取的"),s("code",[e._v("createReadStream()")]),e._v("和用于写入文件的"),s("code",[e._v("createWriteStream()")]),e._v("，"),s("code",[e._v("HTTP")]),e._v("请求和响应对象本质上是"),s("code",[e._v("Streams")]),e._v("，并且"),s("code",[e._v("zlib")]),e._v("模块允许我们使用"),s("code",[e._v("Streams")]),e._v("式"),s("code",[e._v("API")]),e._v("压缩和解压缩数据块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在我们知道为什么"),t("code",[this._v("Streams")]),this._v("是如此重要，让我们退后一步，开始更详细地探索它。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"streams的结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streams的结构","aria-hidden":"true"}},[this._v("#")]),this._v(" Streams的结构")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Node.js")]),this._v("中的每个"),t("code",[this._v("Streams")]),this._v("都是"),t("code",[this._v("Streams")]),this._v("核心模块中可用的四个基本抽象类之一的实现：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("stream.Readable")])]),this._v(" "),t("li",[t("code",[this._v("stream.Writable")])]),this._v(" "),t("li",[t("code",[this._v("stream.Duplex")])]),this._v(" "),t("li",[t("code",[this._v("stream.Transform")])])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("每个"),s("code",[e._v("stream")]),e._v("类也是"),s("code",[e._v("EventEmitter")]),e._v("的一个实例。实际上，"),s("code",[e._v("Streams")]),e._v("可以产生几种类型的事件，比如"),s("code",[e._v("end")]),e._v("事件会在一个可读的"),s("code",[e._v("Streams")]),e._v("完成读取，或者错误读取，或其过程中产生异常时触发。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("请注意，为简洁起见，在本章介绍的例子中，我们经常会忽略适当的错误处理。但是，在生产环境下中，总是建议为所有Stream注册错误事件侦听器。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Streams")]),this._v("之所以如此灵活的原因之一是它不仅能够处理二进制数据，而且几乎可以处理任何"),t("code",[this._v("JavaScript")]),this._v("值。实际上，"),t("code",[this._v("Streams")]),this._v("可以支持两种操作模式：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("二进制模式：以数据块形式（例如"),s("code",[e._v("buffers")]),e._v("或"),s("code",[e._v("strings")]),e._v("）流式传输数据")]),e._v(" "),s("li",[e._v("对象模式：将流数据视为一系列离散对象（这使得我们几乎可以使用任何"),s("code",[e._v("JavaScript")]),e._v("值）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这两种操作模式使我们不仅可以使用"),t("code",[this._v("I / O")]),this._v("流，而且还可以作为一种工具，以函数式的风格优雅地组合处理单元，我们将在本章后面看到。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("在本章中，我们将主要使用在Node.js 0.11中引入的Node.js流接口，也称为版本3。 有关与旧接口差异的更多详细信息，请参阅StrongLoop在https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/中的优秀博客文章。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"可读的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可读的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 可读的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("一个可读的"),s("code",[e._v("Streams")]),e._v("表示一个数据源，在"),s("code",[e._v("Node.js")]),e._v("中，它使用"),s("code",[e._v("stream")]),e._v("模块中的"),s("code",[e._v("Readableabstract")]),e._v("类实现。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"从streams中读取信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从streams中读取信息","aria-hidden":"true"}},[this._v("#")]),this._v(" 从Streams中读取信息")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("从可读"),t("code",[this._v("Streams")]),this._v("接收数据有两种方式："),t("code",[this._v("non-flowing")]),this._v("模式和"),t("code",[this._v("flowing")]),this._v("模式。 我们来更详细地分析这些模式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"non-flowing模式（不流动模式）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#non-flowing模式（不流动模式）","aria-hidden":"true"}},[this._v("#")]),this._v(" non-flowing模式（不流动模式）")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("从可读的"),s("code",[e._v("Streams")]),e._v("中读取数据的默认模式是为其附加一个可读事件侦听器，用于指示要读取的新数据的可用性。然后，在一个循环中，我们读取所有的数据，直到内部"),s("code",[e._v("buffer")]),e._v("被清空。这可以使用"),s("code",[e._v("read()")]),e._v("方法完成，该方法同步从内部缓冲区中读取数据，并返回表示数据块的"),s("code",[e._v("Buffer")]),e._v("或"),s("code",[e._v("String")]),e._v("对象。"),s("code",[e._v("read()")]),e._v("方法以如下使用模式：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("readable.read([size]);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用这种方法，数据随时可以直接从"),t("code",[this._v("Streams")]),this._v("中按需提取。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了说明这是如何工作的，我们创建一个名为"),t("code",[this._v("readStdin.js")]),this._v("的新模块，它实现了一个简单的程序，它从标准输入（一个可读流）中读取数据，并将所有数据回送到标准输出：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("process.stdin\n  .on('readable', () => {\n    let chunk;\n    console.log('New data available');\n    while ((chunk = process.stdin.read()) !== null) {\n      console.log(\n        `Chunk read: (${chunk.length}) \"${chunk.toString()}\"`\n      );\n    }\n  })\n  .on('end', () => process.stdout.write('End of stream'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("read()")]),e._v("方法是一个同步操作，它从可读"),s("code",[e._v("Streams")]),e._v("的内部"),s("code",[e._v("Buffers")]),e._v("区中提取数据块。如果"),s("code",[e._v("Streams")]),e._v("在二进制模式下工作，返回的数据块默认为一个"),s("code",[e._v("Buffer")]),e._v("对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("在以二进制模式工作的可读的Stream中，我们可以通过在Stream上调用setEncoding(encoding)来读取字符串而不是Buffer对象，并提供有效的编码格式（例如utf8）。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("数据是从可读的侦听器中读取的，只要有新的数据，就会调用这个侦听器。当内部缓冲区中没有更多数据可用时，"),s("code",[e._v("read()")]),e._v("方法返回"),s("code",[e._v("null")]),e._v("；在这种情况下，我们不得不等待另一个可读的事件被触发，告诉我们可以再次读取或者等待表示"),s("code",[e._v("Streams")]),e._v("读取过程结束的"),s("code",[e._v("end")]),e._v("事件触发。当一个流以二进制模式工作时，我们也可以通过向"),s("code",[e._v("read()")]),e._v("方法传递一个"),s("code",[e._v("size")]),e._v("参数来指定我们想要读取的数据大小。这在实现网络协议或解析特定数据格式时特别有用。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在，我们准备运行"),s("code",[e._v("readStdin")]),e._v("模块并进行实验。让我们在控制台中键入一些字符，然后按"),s("code",[e._v("Enter")]),e._v("键查看回显到标准输出中的数据。要终止流并因此生成一个正常的结束事件，我们需要插入一个"),s("code",[e._v("EOF")]),e._v("（文件结束）字符（在"),s("code",[e._v("Windows")]),e._v("上使用"),s("code",[e._v("Ctrl + Z")]),e._v("或在"),s("code",[e._v("Linux")]),e._v("上使用"),s("code",[e._v("Ctrl + D")]),e._v("）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们也可以尝试将我们的程序与其他程序连接起来;这可以使用管道运算符（"),t("code",[this._v("|")]),this._v("），它将程序的标准输出重定向到另一个程序的标准输入。例如，我们可以运行如下命令：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("cat <path to a file> | node readStdin\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"flowing模式（流动模式）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flowing模式（流动模式）","aria-hidden":"true"}},[this._v("#")]),this._v(" flowing模式（流动模式）")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("从"),s("code",[e._v("Streams")]),e._v("中读取的另一种方法是将侦听器附加到"),s("code",[e._v("data")]),e._v("事件；这会将"),s("code",[e._v("Streams")]),e._v("切换为"),s("code",[e._v("flowing")]),e._v("模式，其中数据不是使用"),s("code",[e._v("read()")]),e._v("函数来提取的，而是一旦有数据到达"),s("code",[e._v("data")]),e._v("监听器就被推送到监听器内。例如，我们之前创建的"),s("code",[e._v("readStdin")]),e._v("应用程序将使用流动模式：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("process.stdin\n  .on('data', chunk => {\n    console.log('New data available');\n    console.log(\n      `Chunk read: (${chunk.length}) \"${chunk.toString()}\"`\n    );\n  })\n  .on('end', () => process.stdout.write('End of stream'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("flowing")]),e._v("模式是旧版"),s("code",[e._v("Streams")]),e._v("接口（也称为"),s("code",[e._v("Streams1")]),e._v("）的继承，其灵活性较低，"),s("code",[e._v("API")]),e._v("较少。随着"),s("code",[e._v("Streams2")]),e._v("接口的引入，"),s("code",[e._v("flowing")]),e._v("模式不是默认的工作模式，要启用它，需要将侦听器附加到"),s("code",[e._v("data")]),e._v("事件或显式调用"),s("code",[e._v("resume()")]),e._v("方法。 要暂时中断"),s("code",[e._v("Streams")]),e._v("触发"),s("code",[e._v("data")]),e._v("事件，我们可以调用"),s("code",[e._v("pause()")]),e._v("方法，导致任何传入数据缓存在内部"),s("code",[e._v("buffer")]),e._v("中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("调用pause()不会导致Streams切换回non-flowing模式。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现可读的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现可读的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现可读的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在我们知道如何从"),s("code",[e._v("Streams")]),e._v("中读取数据，下一步是学习如何实现一个新的"),s("code",[e._v("Readable")]),e._v("数据流。为此，有必要通过继承"),s("code",[e._v("stream.Readable")]),e._v("的原型来创建一个新的类。 具体流必须提供"),s("code",[e._v("_read()")]),e._v("方法的实现：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("readable._read(size)\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Readable")]),this._v("类的内部将调用"),t("code",[this._v("_read()")]),this._v("方法，而该方法又将启动 使用"),t("code",[this._v("push()")]),this._v("填充内部缓冲区：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("请注意，read()是Stream消费者调用的方法，而_read()是一个由Stream子类实现的方法，不能直接调用。下划线通常表示该方法为私有方法，不应该直接调用。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了演示如何实现新的可读"),s("code",[e._v("Streams")]),e._v("，我们可以尝试实现一个生成随机字符串的"),s("code",[e._v("Streams")]),e._v("。 我们来创建一个名为"),s("code",[e._v("randomStream.js")]),e._v("的新模块，它将包含我们的字符串的"),s("code",[e._v("generator")]),e._v("的代码：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\nconst Chance = require('chance');\n\nconst chance = new Chance();\n\nclass RandomStream extends stream.Readable {\n  constructor(options) {\n    super(options);\n  }\n\n  _read(size) {\n    const chunk = chance.string(); //[1]\n    console.log(`Pushing chunk of size: ${chunk.length}`);\n    this.push(chunk, 'utf8'); //[2]\n    if (chance.bool({\n        likelihood: 5\n      })) { //[3]\n      this.push(null);\n    }\n  }\n}\n\nmodule.exports = RandomStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("下一步是创建一个名为"),s("code",[e._v("RandomStream")]),e._v("的新类，并指定"),s("code",[e._v("stream.Readable")]),e._v("作为其父类。 在前面的代码中，我们调用父类的构造函数来初始化其内部状态，并将收到的"),s("code",[e._v("options")]),e._v("参数作为输入。通过"),s("code",[e._v("options")]),e._v("对象传递的可能参数包括以下内容：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("用于将"),s("code",[e._v("Buffers")]),e._v("转换为"),s("code",[e._v("Strings")]),e._v("的"),s("code",[e._v("encoding")]),e._v("参数（默认值为"),s("code",[e._v("null")]),e._v("）")]),e._v(" "),s("li",[e._v("是否启用对象模式（"),s("code",[e._v("objectMode")]),e._v("默认为"),s("code",[e._v("false")]),e._v("）")]),e._v(" "),s("li",[e._v("存储在内部"),s("code",[e._v("buffer")]),e._v("区中的数据的上限，一旦超过这个上限，则暂停从"),s("code",[e._v("data source")]),e._v("读取（"),s("code",[e._v("highWaterMark")]),e._v("默认为"),s("code",[e._v("16KB")]),e._v("）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("好的，现在让我们来解释一下我们重写的"),t("code",[this._v("stream.Readable")]),this._v("类的"),t("code",[this._v("_read()")]),this._v("方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("该方法使用"),s("code",[e._v("chance")]),e._v("生成随机字符串。")]),e._v(" "),s("li",[e._v("它将字符串"),s("code",[e._v("push")]),e._v("内部"),s("code",[e._v("buffer")]),e._v("。 请注意，由于我们"),s("code",[e._v("push")]),e._v("的是"),s("code",[e._v("String")]),e._v("，此外我们还指定了编码为"),s("code",[e._v("utf8")]),e._v("（如果数据块只是一个二进制"),s("code",[e._v("Buffer")]),e._v("，则不需要）。")]),e._v(" "),s("li",[e._v("以"),s("code",[e._v("5%")]),e._v("的概率随机中断"),s("code",[e._v("stream")]),e._v("的随机字符串产生，通过"),s("code",[e._v("push")]),e._v(" "),s("code",[e._v("null")]),e._v("到内部"),s("code",[e._v("Buffer")]),e._v("来表示"),s("code",[e._v("EOF")]),e._v("，即"),s("code",[e._v("stream")]),e._v("的结束。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们还可以看到在"),s("code",[e._v("_read()")]),e._v("函数的输入中给出的"),s("code",[e._v("size")]),e._v("参数被忽略了，因为它是一个建议的参数。 我们可以简单地把所有可用的数据都"),s("code",[e._v("push")]),e._v("到内部的"),s("code",[e._v("buffer")]),e._v("中，但是如果在同一个调用中有多个推送，那么我们应该检查"),s("code",[e._v("push()")]),e._v("是否返回"),s("code",[e._v("false")]),e._v("，因为这意味着内部"),s("code",[e._v("buffer")]),e._v("已经达到了"),s("code",[e._v("highWaterMark")]),e._v("限制，我们应该停止添加更多的数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("以上就是"),t("code",[this._v("RandomStream")]),this._v("模块，我们现在准备好使用它。我们来创建一个名为"),t("code",[this._v("generateRandom.js")]),this._v("的新模块，在这个模块中我们实例化一个新的"),t("code",[this._v("RandomStream")]),this._v("对象并从中提取一些数据：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const RandomStream = require('./randomStream');\nconst randomStream = new RandomStream();\n\nrandomStream.on('readable', () => {\n  let chunk;\n  while ((chunk = randomStream.read()) !== null) {\n    console.log(`Chunk received: ${chunk.toString()}`);\n  }\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，一切都准备好了，我们尝试新的自定义的"),t("code",[this._v("stream")]),this._v("。 像往常一样简单地执行"),t("code",[this._v("generateRandom")]),this._v("模块，观察随机的字符串在屏幕上流动。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"可写的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可写的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 可写的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("一个可写的"),s("code",[e._v("stream")]),e._v("表示一个数据终点，在"),s("code",[e._v("Node.js")]),e._v("中，它使用"),s("code",[e._v("stream")]),e._v("模块中的"),s("code",[e._v("Writable")]),e._v("抽象类来实现。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"写入一个stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写入一个stream","aria-hidden":"true"}},[this._v("#")]),this._v(" 写入一个stream")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("把一些数据放在可写入的"),t("code",[this._v("stream")]),this._v("中是一件简单的事情， 我们所要做的就是使用"),t("code",[this._v("write()")]),this._v("方法，它具有以下格式：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("writable.write(chunk, [encoding], [callback])\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("encoding")]),e._v("参数是可选的，其在"),s("code",[e._v("chunk")]),e._v("是"),s("code",[e._v("String")]),e._v("类型时指定（默认为"),s("code",[e._v("utf8")]),e._v("，如果"),s("code",[e._v("chunk")]),e._v("是"),s("code",[e._v("Buffer")]),e._v("，则忽略）；当数据块被刷新到底层资源中时，"),s("code",[e._v("callback")]),e._v("就会被调用，"),s("code",[e._v("callback")]),e._v("参数也是可选的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了表示没有更多的数据将被写入"),t("code",[this._v("stream")]),this._v("中，我们必须使用"),t("code",[this._v("end()")]),this._v("方法：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("writable.end([chunk], [encoding], [callback])\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们可以通过"),s("code",[e._v("end()")]),e._v("方法提供最后一块数据。在这种情况下，"),s("code",[e._v("callbak")]),e._v("函数相当于为"),s("code",[e._v("finish")]),e._v("事件注册一个监听器，当数据块全部被写入"),s("code",[e._v("stream")]),e._v("中时，会触发该事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，让我们通过创建一个输出随机字符串序列的小型"),t("code",[this._v("HTTP")]),this._v("服务器来演示这是如何工作的：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const Chance = require('chance');\nconst chance = new Chance();\n\nrequire('http').createServer((req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/plain'\n  }); //[1]\n  while (chance.bool({\n      likelihood: 95\n    })) { //[2]\n    res.write(chance.string() + '\\n'); //[3]\n  }\n  res.end('\\nThe end...\\n'); //[4]\n  res.on('finish', () => console.log('All data was sent')); //[5]\n}).listen(8080, () => console.log('Listening on http://localhost:8080'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们创建了一个"),s("code",[e._v("HTTP服务器")]),e._v("，并把数据写入"),s("code",[e._v("res")]),e._v("对象，"),s("code",[e._v("res")]),e._v("对象是"),s("code",[e._v("http.ServerResponse")]),e._v("的一个实例，也是一个可写入的"),s("code",[e._v("stream")]),e._v("。下面来解释上述代码发生了什么：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们首先写"),s("code",[e._v("HTTP response")]),e._v("的头部。请注意，"),s("code",[e._v("writeHead()")]),e._v("不是"),s("code",[e._v("Writable")]),e._v("接口的一部分，实际上，这个方法是"),s("code",[e._v("http.ServerResponse")]),e._v("类公开的辅助方法。")]),e._v(" "),s("li",[e._v("我们开始一个"),s("code",[e._v("5％")]),e._v("的概率终止的循环（进入循环体的概率为"),s("code",[e._v("chance.bool()")]),e._v("产生，其为"),s("code",[e._v("95％")]),e._v("）。")]),e._v(" "),s("li",[e._v("在循环内部，我们写入一个随机字符串到"),s("code",[e._v("stream")]),e._v("。")]),e._v(" "),s("li",[e._v("一旦我们不在循环中，我们调用"),s("code",[e._v("stream")]),e._v("的"),s("code",[e._v("end()")]),e._v("，表示没有更多 数据块将被写入。另外，我们在结束之前提供一个最终的字符串写入流中。")]),e._v(" "),s("li",[e._v("最后，我们注册一个"),s("code",[e._v("finish")]),e._v("事件的监听器，当所有的数据块都被刷新到底层"),s("code",[e._v("socket")]),e._v("中时，这个事件将被触发。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以调用这个小模块称为"),t("code",[this._v("entropyServer.js")]),this._v("，然后执行它。要测试这个服务器，我们可以在地址"),t("code",[this._v("http：// localhost:8080")]),this._v("打开一个浏览器，或者从终端使用"),t("code",[this._v("curl")]),this._v("命令，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("curl localhost:8080\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("此时，服务器应该开始向您选择的"),t("code",[this._v("HTTP客户端")]),this._v("发送随机字符串（请注意，某些浏览器可能会缓冲数据，并且流式传输行为可能不明显）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"back-pressure（反压）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#back-pressure（反压）","aria-hidden":"true"}},[this._v("#")]),this._v(" Back-pressure（反压）")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("类似于在真实管道系统中流动的液体，"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("stream")]),e._v("也可能遭受瓶颈，数据写入速度可能快于"),s("code",[e._v("stream")]),e._v("的消耗。 解决这个问题的机制包括缓冲输入数据；然而，如果数据"),s("code",[e._v("stream")]),e._v("没有给生产者任何反馈，我们可能会产生越来越多的数据被累积到内部缓冲区的情况，导致内存泄露的发生。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了防止这种情况的发生，当内部"),s("code",[e._v("buffer")]),e._v("超过"),s("code",[e._v("highWaterMark")]),e._v("限制时，"),s("code",[e._v("writable.write()")]),e._v("将返回"),s("code",[e._v("false")]),e._v("。 可写入的"),s("code",[e._v("stream")]),e._v("具有"),s("code",[e._v("highWaterMark")]),e._v("属性，这是"),s("code",[e._v("write()")]),e._v("方法开始返回"),s("code",[e._v("false")]),e._v("的内部"),s("code",[e._v("Buffer")]),e._v("区大小的限制，一旦"),s("code",[e._v("Buffer")]),e._v("区的大小超过这个限制，表示应用程序应该停止写入。 当缓冲器被清空时，会触发一个叫做"),s("code",[e._v("drain")]),e._v("的事件，通知再次开始写入是安全的。 这种机制被称为"),s("code",[e._v("back-pressure")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("本节介绍的机制同样适用于可读的stream。事实上，在可读stream中也存在back-pressure，并且在_read()内调用的push()方法返回false时触发。 但是，这对于stream实现者来说是一个特定的问题，所以我们将不经常处理它。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过修改之前创建的"),t("code",[this._v("entropyServer")]),this._v("模块来演示可写入的"),t("code",[this._v("stream")]),this._v("的"),t("code",[this._v("back-pressure")]),this._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const Chance = require('chance');\nconst chance = new Chance();\n\nrequire('http').createServer((req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/plain'\n  });\n\n  function generateMore() { //[1]\n    while (chance.bool({\n        likelihood: 95\n      })) {\n      const shouldContinue = res.write(\n        chance.string({\n          length: (16 * 1024) - 1\n        }) //[2]\n      );\n      if (!shouldContinue) { //[3]\n        console.log('Backpressure');\n        return res.once('drain', generateMore);\n      }\n    }\n    res.end('\\nThe end...\\n', () => console.log('All data was sent'));\n  }\n  generateMore();\n}).listen(8080, () => console.log('Listening on http://localhost:8080'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们将主逻辑封装在一个名为"),s("code",[e._v("generateMore()")]),e._v("的函数中。")]),e._v(" "),s("li",[e._v("为了增加获得一些"),s("code",[e._v("back-pressure")]),e._v("的机会，我们将数据块的大小增加到"),s("code",[e._v("16KB-1Byte")]),e._v("，这非常接近默认的"),s("code",[e._v("highWaterMark")]),e._v("限制。")]),e._v(" "),s("li",[e._v("在写入一大块数据之后，我们检查"),s("code",[e._v("res.write()")]),e._v("的返回值。 如果它返回"),s("code",[e._v("false")]),e._v("，这意味着内部"),s("code",[e._v("buffer")]),e._v("已满，我们应该停止发送更多的数据。在这种情况下，我们从函数中退出，然后新注册一个写入事件的发布者，当"),s("code",[e._v("drain")]),e._v("事件触发时调用"),s("code",[e._v("generateMore")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果我们现在尝试再次运行服务器，然后使用"),t("code",[this._v("curl")]),this._v("生成客户端请求，则很可能会有一些"),t("code",[this._v("back-pressure")]),this._v("，因为服务器以非常高的速度生成数据，速度甚至会比底层"),t("code",[this._v("socket")]),this._v("更快。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现可写入的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现可写入的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现可写入的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过继承"),t("code",[this._v("stream.Writable")]),this._v("类来实现一个新的可写入的流，并为"),t("code",[this._v("_write()")]),this._v("方法提供一个实现。实现一个我们自定义的可写入的"),t("code",[this._v("Streams")]),this._v("类。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们构建一个可写入的"),t("code",[this._v("stream")]),this._v("，它接收对象的格式如下：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("{\n  path: <path to a file>\n  content: <string or buffer>\n}\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br"),t("span",{staticClass:"line-number"},[this._v("5")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("这个类的作用是这样的：对于每一个对象，我们的"),s("code",[e._v("stream")]),e._v("必须将"),s("code",[e._v("content")]),e._v("部分保存到在给定路径中创建的文件中。 我们可以立即看到，我们"),s("code",[e._v("stream")]),e._v("的输入是对象，而不是"),s("code",[e._v("Strings")]),e._v("或"),s("code",[e._v("Buffers")]),e._v("，这意味着我们的"),s("code",[e._v("stream")]),e._v("必须以对象模式工作。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("调用模块"),t("code",[this._v("toFileStream.js")]),this._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\nconst fs = require('fs');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\n\nclass ToFileStream extends stream.Writable {\n  constructor() {\n    super({\n      objectMode: true\n    });\n  }\n\n  _write(chunk, encoding, callback) {\n    mkdirp(path.dirname(chunk.path), err => {\n      if (err) {\n        return callback(err);\n      }\n      fs.writeFile(chunk.path, chunk.content, callback);\n    });\n  }\n}\nmodule.exports = ToFileStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("作为第一步，我们加载所有我们所需要的依赖包。注意，我们需要模块"),t("code",[this._v("mkdirp")]),this._v("，正如你应该从前几章中所知道的，它应该使用"),t("code",[this._v("npm")]),this._v("安装。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们创建了一个新类，它从"),t("code",[this._v("stream.Writable")]),this._v("扩展而来。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们不得不调用父构造函数来初始化其内部状态；我们还提供了一个"),t("code",[this._v("option")]),this._v("对象作为参数，用于指定流在对象模式下工作（"),t("code",[this._v("objectMode：true")]),this._v("）。"),t("code",[this._v("stream.Writable")]),this._v("接受的其他选项如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[s("code",[e._v("highWaterMark")]),e._v("（默认值是"),s("code",[e._v("16KB")]),e._v("）：控制"),s("code",[e._v("back-pressure")]),e._v("的上限。")]),e._v(" "),s("li",[s("code",[e._v("decodeStrings")]),e._v("（默认为"),s("code",[e._v("true")]),e._v("）：在字符串传递给"),s("code",[e._v("_write()")]),e._v("方法之前，将字符串自动解码为二进制"),s("code",[e._v("buffer")]),e._v("区。 在对象模式下这个参数被忽略。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("最后，我们为"),s("code",[e._v("_write()")]),e._v("方法提供了一个实现。正如你所看到的，这个方法接受一个数据块，一个编码方式（只有在二进制模式下，"),s("code",[e._v("stream")]),e._v("选项"),s("code",[e._v("decodeStrings")]),e._v("设置为"),s("code",[e._v("false")]),e._v("时才有意义）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另外，该方法接受一个回调函数，该函数在操作完成时需要调用；而不必要传递操作的结果，但是如果需要的话，我们仍然可以传递一个"),t("code",[this._v("error")]),this._v("对象，这将导致"),t("code",[this._v("stream")]),this._v("触发"),t("code",[this._v("error")]),this._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，为了尝试我们刚刚构建的"),t("code",[this._v("stream")]),this._v("，我们可以创建一个名为"),t("code",[this._v("writeToFile.js")]),this._v("的新模块，并对该流执行一些写操作：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const ToFileStream = require(\'./toFileStream.js\');\nconst tfs = new ToFileStream();\n\ntfs.write({path: "file1.txt", content: "Hello"});\ntfs.write({path: "file2.txt", content: "Node.js"});\ntfs.write({path: "file3.txt", content: "Streams"});\ntfs.end(() => console.log("All files created"));\n复制代码\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"双重的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双重的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 双重的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("双重的"),s("code",[e._v("stream")]),e._v("既是可读的，也可写的。 当我们想描述一个既是数据源又是数据终点的实体时（例如"),s("code",[e._v("socket")]),e._v("），这就显得十分有用了。 双工流继承"),s("code",[e._v("stream.Readable")]),e._v("和"),s("code",[e._v("stream.Writable")]),e._v("的方法，所以它对我们来说并不新鲜。这意味着我们可以"),s("code",[e._v("read()")]),e._v("或"),s("code",[e._v("write()")]),e._v("数据，或者可以监听"),s("code",[e._v("readable")]),e._v("和"),s("code",[e._v("drain")]),e._v("事件。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("要创建一个自定义的双重"),s("code",[e._v("stream")]),e._v("，我们必须为"),s("code",[e._v("_read()")]),e._v("和"),s("code",[e._v("_write()")]),e._v("提供一个实现。传递给"),s("code",[e._v("Duplex()")]),e._v("构造函数的"),s("code",[e._v("options")]),e._v("对象在内部被转发给"),s("code",[e._v("Readable")]),e._v("和"),s("code",[e._v("Writable")]),e._v("的构造函数。"),s("code",[e._v("options")]),e._v("参数的内容与前面讨论的相同，"),s("code",[e._v("options")]),e._v("增加了一个名为"),s("code",[e._v("allowHalfOpen")]),e._v("值（默认为"),s("code",[e._v("true")]),e._v("），如果设置为"),s("code",[e._v("false")]),e._v("，则会导致只要"),s("code",[e._v("stream")]),e._v("的一方（"),s("code",[e._v("Readable")]),e._v("和"),s("code",[e._v("Writable")]),e._v("）结束，"),s("code",[e._v("stream")]),e._v("就结束了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("为了使双重的stream在一方以对象模式工作，而在另一方以二进制模式工作，我们需要在流构造器中手动设置以下属性：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("this._writableState.objectMode\nthis._readableState.objectMode\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"转换的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 转换的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("转换的"),t("code",[this._v("Streams")]),this._v("是专门设计用于处理数据转换的一种特殊类型的双重"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在一个简单的双重"),s("code",[e._v("Streams")]),e._v("中，从"),s("code",[e._v("stream")]),e._v("中读取的数据和写入到其中的数据之间没有直接的关系（至少"),s("code",[e._v("stream")]),e._v("是不可知的）。 想想一个"),s("code",[e._v("TCP socket")]),e._v("，它只是向远程节点发送数据和从远程节点接收数据。"),s("code",[e._v("TCP socket")]),e._v("自身没有意识到输入和输出之间有任何关系。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下图说明了双重"),t("code",[this._v("Streams")]),this._v("中的数据流：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8ebb1158b0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另一方面，转换的"),t("code",[this._v("Streams")]),this._v("对从可写入端接收到的每个数据块应用某种转换，然后在其可读端使转换的数据可用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下图显示了数据如何在转换的"),t("code",[this._v("Streams")]),this._v("中流动：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8ef108f983?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("从外面看，转换的"),s("code",[e._v("Streams")]),e._v("的接口与双重"),s("code",[e._v("Streams")]),e._v("的接口完全相同。但是，当我们想要构建一个新的双重"),s("code",[e._v("Streams")]),e._v("时，我们必须提供"),s("code",[e._v("_read()")]),e._v("和"),s("code",[e._v("_write()")]),e._v("方法，而为了实现一个新的变换流，我们必须填写另一对方法："),s("code",[e._v("_transform()")]),e._v("和"),s("code",[e._v("_flush()")]),e._v("）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们来演示如何用一个例子来创建一个新的转换的"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现转换的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现转换的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现转换的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们来实现一个转换的"),t("code",[this._v("Streams")]),this._v("，它将替换给定所有出现的字符串。 要做到这一点，我们必须创建一个名为"),t("code",[this._v("replaceStream.js")]),this._v("的新模块。 让我们直接看怎么实现它：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\nconst util = require('util');\n\nclass ReplaceStream extends stream.Transform {\n  constructor(searchString, replaceString) {\n    super();\n    this.searchString = searchString;\n    this.replaceString = replaceString;\n    this.tailPiece = '';\n  }\n\n  _transform(chunk, encoding, callback) {\n    const pieces = (this.tailPiece + chunk)         //[1]\n      .split(this.searchString);\n    const lastPiece = pieces[pieces.length - 1];\n    const tailPieceLen = this.searchString.length - 1;\n\n    this.tailPiece = lastPiece.slice(-tailPieceLen);     //[2]\n    pieces[pieces.length - 1] = lastPiece.slice(0,-tailPieceLen);\n\n    this.push(pieces.join(this.replaceString));       //[3]\n    callback();\n  }\n\n  _flush(callback) {\n    this.push(this.tailPiece);\n    callback();\n  }\n}\n\nmodule.exports = ReplaceStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("然后我们创建了一个从"),s("code",[e._v("stream.Transform")]),e._v("基类继承的新类。该类的构造函数接受两个参数："),s("code",[e._v("searchString")]),e._v("和"),s("code",[e._v("replaceString")]),e._v("。 正如你所想象的那样，它们允许我们定义要匹配的文本以及用作替换的字符串。 我们还初始化一个将由"),s("code",[e._v("_transform()")]),e._v("方法使用的"),s("code",[e._v("tailPiece")]),e._v("内部变量。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在，我们来分析一下"),s("code",[e._v("_transform()")]),e._v("方法，它是我们新类的核心。"),s("code",[e._v("_transform()")]),e._v("方法与可写入的"),s("code",[e._v("stream")]),e._v("的"),s("code",[e._v("_write()")]),e._v("方法具有几乎相同的格式，但不是将数据写入底层资源，而是使用"),s("code",[e._v("this.push()")]),e._v("将其推入内部"),s("code",[e._v("buffer")]),e._v("，这与我们会在可读流的"),s("code",[e._v("_read()")]),e._v("方法中执行。这显示了转换的"),s("code",[e._v("Streams")]),e._v("的双方如何实际连接。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("ReplaceStream")]),this._v("的"),t("code",[this._v("_transform()")]),this._v("方法实现了我们这个新类的核心。正常情况下，搜索和替换"),t("code",[this._v("buffer")]),this._v("区中的字符串是一件容易的事情；但是，当数据流式传输时，情况则完全不同，可能的匹配可能分布在多个数据块中。代码后面的程序可以解释如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们的算法使用"),s("code",[e._v("searchString")]),e._v("函数作为分隔符来分割块。")]),e._v(" "),s("li",[e._v("然后，它取出分隔后生成的数组的最后一项"),s("code",[e._v("lastPiece")]),e._v("，并提取其最后一个字符"),s("code",[e._v("searchString.length - 1")]),e._v("。结果被保存到"),s("code",[e._v("tailPiece")]),e._v("变量中，它将会被作为下一个数据块的前缀。")]),e._v(" "),s("li",[e._v("最后，所有从"),s("code",[e._v("split()")]),e._v("得到的片段用"),s("code",[e._v("replaceString")]),e._v("作为分隔符连接在一起，并推入内部"),s("code",[e._v("buffer")]),e._v("区。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("当"),s("code",[e._v("stream")]),e._v("结束时，我们可能仍然有最后一个"),s("code",[e._v("tailPiece")]),e._v("变量没有被压入内部缓冲区。这正是"),s("code",[e._v("_flush()")]),e._v("方法的用途；它在"),s("code",[e._v("stream")]),e._v("结束之前被调用，并且这是我们最终有机会完成流或者在完全结束流之前推送任何剩余数据的地方。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("_flush()")]),this._v("方法只需要一个回调函数作为参数，当所有的操作完成后，我们必须确保调用这个回调函数。完成了这个，我们已经完成了我们的"),t("code",[this._v("ReplaceStream")]),this._v("类。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，是时候尝试新的"),t("code",[this._v("stream")]),this._v("。我们可以创建另一个名为"),t("code",[this._v("replaceStreamTest.js")]),this._v("的模块来写入一些数据，然后读取转换的结果：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const ReplaceStream = require('./replaceStream');\n\nconst rs = new ReplaceStream('World', 'Node.js');\nrs.on('data', chunk => console.log(chunk.toString()));\n\nrs.write('Hello W');\nrs.write('orld!');\nrs.end();\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了使得这个例子更复杂一些，我们把搜索词分布在两个不同的数据块上；然后，使用"),t("code",[this._v("flowing")]),this._v("模式，我们从同一个"),t("code",[this._v("stream")]),this._v("中读取数据，记录每个已转换的块。运行前面的程序应该产生以下输出：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Hel\nlo Node.js\n!\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("有一个值得提及是，第五种类型的stream：stream.PassThrough。 与我们介绍的其他流类不同，PassThrough不是抽象的，可以直接实例化，而不需要实现任何方法。实际上，这是一个可转换的stream，它可以输出每个数据块，而不需要进行任何转换。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"使用管道连接streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用管道连接streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用管道连接Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Unix")]),this._v("管道的概念是由"),t("code",[this._v("Douglas Mcllroy")]),this._v("发明的；这使程序的输出能够连接到下一个的输入。看看下面的命令：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("echo Hello World! | sed s/World/Node.js/g\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在前面的命令中，"),s("code",[e._v("echo")]),e._v("会将"),s("code",[e._v("Hello World!")]),e._v("写入标准输出，然后被重定向到"),s("code",[e._v("sed")]),e._v("命令的标准输入（因为有管道操作符 "),s("code",[e._v("|")]),e._v("）。 然后"),s("code",[e._v("sed")]),e._v("用"),s("code",[e._v("Node.js")]),e._v("替换任何"),s("code",[e._v("World")]),e._v("，并将结果打印到它的标准输出（这次是控制台）。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("以类似的方式，可以使用可读的"),s("code",[e._v("Streams")]),e._v("的"),s("code",[e._v("pipe()")]),e._v("方法将"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("连接在一起，它具有以下接口：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("readable.pipe(writable, [options])\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("非常直观地，"),s("code",[e._v("pipe()")]),e._v("方法将从可读的"),s("code",[e._v("Streams")]),e._v("中发出的数据抽取到所提供的可写入的"),s("code",[e._v("Streams")]),e._v("中。 另外，当可读的"),s("code",[e._v("Streams")]),e._v("发出"),s("code",[e._v("end")]),e._v("事件（除非我们指定"),s("code",[e._v("{end：false}")]),e._v("作为"),s("code",[e._v("options")]),e._v("）时，可写入的"),s("code",[e._v("Streams")]),e._v("将自动结束。 "),s("code",[e._v("pipe()")]),e._v("方法返回作为参数传递的可写入的"),s("code",[e._v("Streams")]),e._v("，如果这样的"),s("code",[e._v("stream")]),e._v("也是可读的（例如双重或可转换的"),s("code",[e._v("Streams")]),e._v("），则允许我们创建链式调用。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("将两个"),s("code",[e._v("Streams")]),e._v("连接到一起时，则允许数据自动流向可写入的"),s("code",[e._v("Streams")]),e._v("，所以不需要调用"),s("code",[e._v("read()")]),e._v("或"),s("code",[e._v("write()")]),e._v("方法；但最重要的是不需要控制"),s("code",[e._v("back-pressure")]),e._v("，因为它会自动处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("举个简单的例子（将会有大量的例子），我们可以创建一个名为"),t("code",[this._v("replace.js")]),this._v("的新模块，它接受来自标准输入的文本流，应用替换转换，然后将数据返回到标准输出：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const ReplaceStream = require('./replaceStream');\nprocess.stdin\n  .pipe(new ReplaceStream(process.argv[2], process.argv[3]))\n  .pipe(process.stdout);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br"),t("span",{staticClass:"line-number"},[this._v("5")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上述程序将来自标准输入的数据传送到"),t("code",[this._v("ReplaceStream")]),this._v("，然后返回到标准输出。 现在，为了实践这个小应用程序，我们可以利用"),t("code",[this._v("Unix")]),this._v("管道将一些数据重定向到它的标准输入，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("echo Hello World! | node replace World Node.js\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Hello Node.js\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这个简单的例子演示了"),t("code",[this._v("Streams")]),this._v("（特别是文本"),t("code",[this._v("Streams")]),this._v("）是一个通用接口，管道几乎是构成和连接所有这些接口的通用方式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[t("code",[this._v("error")]),this._v("事件不会通过管道自动传播。举个例子，看如下代码片段：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("stream1\n  .pipe(stream2)\n  .on('error', function() {});\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("blockquote",[s("p",[e._v("在前面的链式调用中，我们将只捕获来自"),s("code",[e._v("stream2")]),e._v("的错误，这是由于我们给其添加了"),s("code",[e._v("erorr")]),e._v("事件侦听器。这意味着，如果我们想捕获从"),s("code",[e._v("stream1")]),e._v("生成的任何错误，我们必须直接附加另一个错误侦听器。 稍后我们将看到一种可以实现共同错误捕获的另一种模式（合并"),s("code",[e._v("Streams")]),e._v("）。 此外，我们应该注意到，如果目标"),s("code",[e._v("Streams")]),e._v("（读取的"),s("code",[e._v("Streams")]),e._v("）发出错误，它将会对源"),s("code",[e._v("Streams")]),e._v("通知一个"),s("code",[e._v("error")]),e._v("，之后导致管道的中断。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"streams如何通过管道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streams如何通过管道","aria-hidden":"true"}},[this._v("#")]),this._v(" Streams如何通过管道")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("到目前为止，我们创建自定义"),s("code",[e._v("Streams")]),e._v("的方式并不完全遵循"),s("code",[e._v("Node")]),e._v("定义的模式；实际上，从"),s("code",[e._v("stream")]),e._v("基类继承是违反"),s("code",[e._v("small surface area")]),e._v("的，并需要一些示例代码。 这并不意味着"),s("code",[e._v("Streams")]),e._v("设计得不好，实际上，我们不应该忘记，因为"),s("code",[e._v("Streams")]),e._v("是"),s("code",[e._v("Node.js")]),e._v("核心的一部分，所以它们必须尽可能地灵活，广泛拓展"),s("code",[e._v("Streams")]),e._v("以致于用户级模块能够将它们充分运用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const transform = through2([options], [_transform], [_flush]);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const readable = from2([options], _read);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"基于streams的异步控制流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于streams的异步控制流","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于Streams的异步控制流")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("通过我们已经介绍的例子，应该清楚的是，"),t("code",[this._v("Streams")]),this._v("不仅可以用来处理"),t("code",[this._v("I / O")]),this._v("，而且可以用作处理任何类型数据的优雅编程模式。 但优点并不止这些；还可以利用"),t("code",[this._v("Streams")]),this._v("来实现异步控制流，在本节将会看到。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"顺序执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序执行","aria-hidden":"true"}},[this._v("#")]),this._v(" 顺序执行")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("默认情况下，"),s("code",[e._v("Streams")]),e._v("将按顺序处理数据；例如，转换的"),s("code",[e._v("Streams")]),e._v("的"),s("code",[e._v("_transform()")]),e._v("函数在前一个数据块执行"),s("code",[e._v("callback()")]),e._v("之后才会进行下一块数据块的调用。这是"),s("code",[e._v("Streams")]),e._v("的一个重要属性，按正确顺序处理每个数据块至关重要，但是也可以利用这一属性将"),s("code",[e._v("Streams")]),e._v("实现优雅的传统控制流模式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("代码总是比太多的解释要好得多，所以让我们来演示一下如何使用流来按顺序执行异步任务的例子。让我们创建一个函数来连接一组接收到的文件作为输入，确保遵守提供的顺序。我们创建一个名为"),t("code",[this._v("concatFiles.js")]),this._v("的新模块，并从其依赖开始：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const fromArray = require('from2-array');\nconst through = require('through2');\nconst fs = require('fs');\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们将使用"),s("code",[e._v("through2")]),e._v("来简化转换的"),s("code",[e._v("Streams")]),e._v("的创建，并使用"),s("code",[e._v("from2-array")]),e._v("从一个对象数组中创建可读的"),s("code",[e._v("Streams")]),e._v("。 接下来，我们可以定义"),s("code",[e._v("concatFiles()")]),e._v("函数：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function concatFiles(destination, files, callback) {\n  const destStream = fs.createWriteStream(destination);\n  fromArray.obj(files)             //[1]\n    .pipe(through.obj((file, enc, done) => {   //[2]\n      const src = fs.createReadStream(file);\n      src.pipe(destStream, {end: false});\n      src.on('end', done); //[3]\n    }))\n    .on('finish', () => {         //[4]\n      destStream.end();\n      callback();\n    });\n}\n\nmodule.exports = concatFiles;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("前面的函数通过将"),t("code",[this._v("files")]),this._v("数组转换为"),t("code",[this._v("Streams")]),this._v("来实现对"),t("code",[this._v("files")]),this._v("数组的顺序迭代。 该函数所遵循的程序解释如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("首先，我们使用"),s("code",[e._v("from2-array")]),e._v("从"),s("code",[e._v("files")]),e._v("数组创建一个可读的"),s("code",[e._v("Streams")]),e._v("。")]),e._v(" "),s("li",[e._v("接下来，我们使用"),s("code",[e._v("through")]),e._v("来创建一个转换的"),s("code",[e._v("Streams")]),e._v("来处理序列中的每个文件。对于每个文件，我们创建一个可读的"),s("code",[e._v("Streams")]),e._v("，并通过管道将其输入到表示输出文件的"),s("code",[e._v("destStream")]),e._v("中。 在源文件完成读取后，通过在"),s("code",[e._v("pipe()")]),e._v("方法的第二个参数中指定"),s("code",[e._v("{end：false}")]),e._v("，我们确保不关闭"),s("code",[e._v("destStream")]),e._v("。")]),e._v(" "),s("li",[e._v("当源文件的所有内容都被传送到"),s("code",[e._v("destStream")]),e._v("时，我们调用"),s("code",[e._v("through.obj")]),e._v("公开的"),s("code",[e._v("done")]),e._v("函数来传递当前处理已经完成，在我们的情况下这是需要触发处理下一个文件。")]),e._v(" "),s("li",[e._v("所有文件处理完后，"),s("code",[e._v("finish")]),e._v("事件被触发。我们最后可以结束"),s("code",[e._v("destStream")]),e._v("并调用"),s("code",[e._v("concatFiles()")]),e._v("的"),s("code",[e._v("callback()")]),e._v("函数，这个函数表示整个操作的完成。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们现在可以尝试使用我们刚刚创建的小模块。让我们创建一个名为"),t("code",[this._v("concat.js")]),this._v("的新文件来完成一个示例：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const concatFiles = require('./concatFiles');\n\nconcatFiles(process.argv[2], process.argv.slice(3), () => {\n  console.log('Files concatenated successfully');\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node concat allTogether.txt file1.txt file2.txt\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("执行这一条命令，会创建一个名为"),t("code",[this._v("allTogether.txt")]),this._v("的新文件，其中按顺序保存"),t("code",[this._v("file1.txt")]),this._v("和"),t("code",[this._v("file2.txt")]),this._v("的内容。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("使用"),s("code",[e._v("concatFiles()")]),e._v("函数，我们能够仅使用"),s("code",[e._v("Streams")]),e._v("实现异步操作的顺序执行。正如我们在"),s("code",[e._v("Chapter3 Asynchronous Control Flow Patters with Callbacks")]),e._v("中看到的那样，如果使用纯"),s("code",[e._v("JavaScript")]),e._v("实现，或者使用"),s("code",[e._v("async")]),e._v("等外部库，则需要使用或实现迭代器。我们现在提供了另外一个可以达到同样效果的方法，正如我们所看到的，它的实现方式非常优雅且可读性高。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("模式：使用Streams或Streams的组合，可以轻松地按顺序遍历一组异步任务。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"无序并行执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无序并行执行","aria-hidden":"true"}},[this._v("#")]),this._v(" 无序并行执行")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们刚刚看到"),s("code",[e._v("Streams")]),e._v("按顺序处理每个数据块，但有时这可能并不能这么做，因为这样并没有充分利用"),s("code",[e._v("Node.js")]),e._v("的并发性。如果我们必须对每个数据块执行一个缓慢的异步操作，那么并行化执行这一组异步任务完全是有必要的。当然，只有在每个数据块之间没有关系的情况下才能应用这种模式，这些数据块可能经常发生在对象模式的"),s("code",[e._v("Streams")]),e._v("中，但是对于二进制模式的"),s("code",[e._v("Streams")]),e._v("很少使用无序的并行执行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意：当处理数据的顺序很重要时，不能使用无序并行执行的Streams。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了并行化一个可转换的"),t("code",[this._v("Streams")]),this._v("的执行，我们可以运用"),t("code",[this._v("Chapter3 Asynchronous Control Flow Patters with Callbacks")]),this._v("所讲到的无序并行执行的相同模式，然后做出一些改变使它们适用于"),t("code",[this._v("Streams")]),this._v("。让我们看看这是如何更改的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"实现一个无序并行的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个无序并行的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个无序并行的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们用一个例子直接说明：我们创建一个叫做"),t("code",[this._v("parallelStream.js")]),this._v("的模块，然后自定义一个普通的可转换的"),t("code",[this._v("Streams")]),this._v("，然后给出一系列可转换流的方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\n\nclass ParallelStream extends stream.Transform {\n  constructor(userTransform) {\n    super({objectMode: true});\n    this.userTransform = userTransform;\n    this.running = 0;\n    this.terminateCallback = null;\n  }\n\n  _transform(chunk, enc, done) {\n    this.running++;\n    this.userTransform(chunk, enc, this._onComplete.bind(this), this.push.bind(this));\n    done();\n  }\n\n  _flush(done) {\n    if(this.running > 0) {\n      this.terminateCallback = done;\n    } else {\n      done();\n    }\n  }\n\n  _onComplete(err) {\n    this.running--;\n    if(err) {\n      return this.emit('error', err);\n    }\n    if(this.running === 0) {\n      this.terminateCallback && this.terminateCallback();\n    }\n  }\n}\n\nmodule.exports = ParallelStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们来分析一下这个新的自定义的类。正如你所看到的一样，构造函数接受一个"),t("code",[this._v("userTransform()")]),this._v("函数作为参数，然后将其另存为一个实例变量；我们也调用父构造函数，并且我们默认启用对象模式。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("接下来，来看"),s("code",[e._v("_transform()")]),e._v("方法，在这个方法中，我们执行"),s("code",[e._v("userTransform()")]),e._v("函数，然后增加当前正在运行的任务个数; 最后，我们通过调用"),s("code",[e._v("done()")]),e._v("来通知当前转换步骤已经完成。"),s("code",[e._v("_transform()")]),e._v("方法展示了如何并行处理另一项任务。我们不用等待"),s("code",[e._v("userTransform()")]),e._v("方法执行完毕再调用"),s("code",[e._v("done()")]),e._v("。 相反，我们立即执行"),s("code",[e._v("done()")]),e._v("方法。另一方面，我们提供了一个特殊的回调函数给"),s("code",[e._v("userTransform()")]),e._v("方法，这就是"),s("code",[e._v("this._onComplete()")]),e._v("方法；以便我们在"),s("code",[e._v("userTransform()")]),e._v("完成的时候收到通知。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在"),s("code",[e._v("Streams")]),e._v("终止之前，会调用"),s("code",[e._v("_flush()")]),e._v("方法，所以如果仍有任务正在运行，我们可以通过不立即调用"),s("code",[e._v("done()")]),e._v("回调函数来延迟"),s("code",[e._v("finish")]),e._v("事件的触发。相反，我们将其分配给"),s("code",[e._v("this.terminateCallback")]),e._v("变量。为了理解"),s("code",[e._v("Streams")]),e._v("如何正确终止，来看"),s("code",[e._v("_onComplete()")]),e._v("方法。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在每组异步任务最终完成时，"),s("code",[e._v("_onComplete()")]),e._v("方法会被调用。首先，它会检查是否有任务正在运行，如果没有，则调用"),s("code",[e._v("this.terminateCallback()")]),e._v("函数，这将导致"),s("code",[e._v("Streams")]),e._v("结束，触发"),s("code",[e._v("_flush()")]),e._v("方法的"),s("code",[e._v("finish")]),e._v("事件。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("利用刚刚构建的"),s("code",[e._v("ParallelStream")]),e._v("类可以轻松地创建一个无序并行执行的可转换的"),s("code",[e._v("Streams")]),e._v("实例，但是有个注意：它不会保留项目接收的顺序。实际上，异步操作可以在任何时候都有可能完成并推送数据，而跟它们开始的时刻并没有必然的联系。因此我们知道，对于二进制模式的"),s("code",[e._v("Streams")]),e._v("并不适用，因为二进制的"),s("code",[e._v("Streams")]),e._v("对顺序要求较高。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"实现一个url监控应用程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个url监控应用程序","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个URL监控应用程序")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在，让我们使用"),s("code",[e._v("ParallelStream")]),e._v("模块实现一个具体的例子。让我们想象以下我们想要构建一个简单的服务来监控一个大"),s("code",[e._v("URL")]),e._v("列表的状态，让我们想象以下，所有的这些"),s("code",[e._v("URL")]),e._v("包含在一个单独的文件中，并且每一个"),s("code",[e._v("URL")]),e._v("占据一个空行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Streams")]),this._v("能够为这个场景提供一个高效且优雅的解决方案。特别是当我们使用我们刚刚写的"),t("code",[this._v("ParallelStream")]),this._v("类来无序地审核这些"),t("code",[this._v("URL")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("接下来，让我们创建一个简单的放在"),t("code",[this._v("checkUrls.js")]),this._v("模块的应用程序。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst split = require('split');\nconst request = require('request');\nconst ParallelStream = require('./parallelStream');\n\nfs.createReadStream(process.argv[2])         //[1]\n  .pipe(split())                             //[2]\n  .pipe(new ParallelStream((url, enc, done, push) => {     //[3]\n    if(!url) return done();\n    request.head(url, (err, response) => {\n      push(url + ' is ' + (err ? 'down' : 'up') + '\\n');\n      done();\n    });\n  }))\n  .pipe(fs.createWriteStream('results.txt'))   //[4]\n  .on('finish', () => console.log('All urls were checked'))\n;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[this._v("首先，我们通过给定的文件参数创建一个可读的"),t("code",[this._v("Streams")]),this._v("，便于接下来读取文件。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("li",[e._v("然后，是时候使用我们的"),s("code",[e._v("ParallelStream")]),e._v("来检查"),s("code",[e._v("URL")]),e._v("了，我们发送一个"),s("code",[e._v("HEAD")]),e._v("请求然后等待请求的"),s("code",[e._v("response")]),e._v("。当请求返回时，我们把请求的结果"),s("code",[e._v("push")]),e._v("到"),s("code",[e._v("stream")]),e._v("中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[this._v("最后，通过管道把结果保存到"),t("code",[this._v("results.txt")]),this._v("文件中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node checkUrls urlList.txt\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这里的文件"),t("code",[this._v("urlList.txt")]),this._v("包含一组"),t("code",[this._v("URL")]),this._v("，例如：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("http://www.mariocasciaro.me/")])]),this._v(" "),t("li",[t("code",[this._v("http://loige.co/")])]),this._v(" "),t("li",[t("code",[this._v("http://thiswillbedownforsure.com/")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("当应用执行完成后，我们可以看到一个文件"),t("code",[this._v("results.txt")]),this._v("被创建，里面包含有操作的结果，例如：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("http://thiswillbedownforsure.com is down")])]),this._v(" "),t("li",[t("code",[this._v("http://loige.co is up")])]),this._v(" "),t("li",[t("code",[this._v("http://www.mariocasciaro.me is up")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("输出的结果的顺序很有可能与输入文件中指定"),t("code",[this._v("URL")]),this._v("的顺序不同。这是"),t("code",[this._v("Streams")]),this._v("无序并行执行任务的明显特征。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("出于好奇，我们可能想尝试用一个正常的through2流替换ParallelStream，并比较两者的行为和性能（你可能想这样做的一个练习）。我们将会看到，使用through2的方式会比较慢，因为每个URL都将按顺序进行检查，而且文件results.txt中结果的顺序也会被保留。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"无序限制并行执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无序限制并行执行","aria-hidden":"true"}},[this._v("#")]),this._v(" 无序限制并行执行")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果运行包含数千或数百万个URL的文件的"),t("code",[this._v("checkUrls")]),this._v("应用程序，我们肯定会遇到麻烦。我们的应用程序将同时创建不受控制的连接数量，并行发送大量数据，并可能破坏应用程序的稳定性和整个系统的可用性。我们已经知道，控制负载的无序限制并行执行是一个极好的解决方案。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们通过创建一个"),t("code",[this._v("limitedParallelStream.js")]),this._v("模块来看看它是如何工作的，这个模块是改编自上一节中创建的"),t("code",[this._v("parallelStream.js")]),this._v("模块。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class LimitedParallelStream extends stream.Transform {\n  constructor(concurrency, userTransform) {\n    super({objectMode: true});\n    this.concurrency = concurrency;\n    this.userTransform = userTransform;\n    this.running = 0;\n    this.terminateCallback = null;\n    this.continueCallback = null;\n  }\n// ...\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们需要一个"),s("code",[e._v("concurrency")]),e._v("变量作为输入来限制并发量，这次我们要保存两个回调函数，"),s("code",[e._v("continueCallback")]),e._v("用于任何挂起的"),s("code",[e._v("_transform")]),e._v("方法，"),s("code",[e._v("terminateCallback")]),e._v("用于_flush方法的回调。 接下来看"),s("code",[e._v("_transform()")]),e._v("方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_transform(chunk, enc, done) {\n  this.running++;\n  this.userTransform(chunk, enc,  this.push.bind(this), this._onComplete.bind(this));\n  if(this.running < this.concurrency) {\n    done();\n  } else {\n    this.continueCallback = done;\n  }\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("这次在"),s("code",[e._v("_transform()")]),e._v("方法中，我们必须在调用"),s("code",[e._v("done()")]),e._v("之前检查是否达到了最大并行数量的限制，如果没有达到了限制，才能触发下一个项目的处理。如果我们已经达到最大并行数量的限制，我们可以简单地将"),s("code",[e._v("done()")]),e._v("回调保存到"),s("code",[e._v("continueCallback")]),e._v("变量中，以便在任务完成后立即调用它。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("_flush()")]),this._v("方法与"),t("code",[this._v("ParallelStream")]),this._v("类保持完全一样，所以我们直接转到实现"),t("code",[this._v("_onComplete()")]),this._v("方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_onComplete(err) {\n  this.running--;\n  if(err) {\n    return this.emit('error', err);\n  }\n  const tmpCallback = this.continueCallback;\n  this.continueCallback = null;\n  tmpCallback && tmpCallback();\n  if(this.running === 0) {\n    this.terminateCallback && this.terminateCallback();\n  }\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("每当任务完成，我们调用任何已保存的"),t("code",[this._v("continueCallback()")]),this._v("将导致 "),t("code",[this._v("stream")]),this._v("解锁，触发下一个项目的处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这就是"),t("code",[this._v("limitedParallelStream")]),this._v("模块。 我们现在可以在"),t("code",[this._v("checkUrls")]),this._v("模块中使用它来代替"),t("code",[this._v("parallelStream")]),this._v("，并且将我们的任务的并发限制在我们设置的值上。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"顺序并行执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序并行执行","aria-hidden":"true"}},[this._v("#")]),this._v(" 顺序并行执行")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们以前创建的并行"),t("code",[this._v("Streams")]),this._v("可能会使得数据的顺序混乱，但是在某些情况下这是不可接受的。有时，实际上，有那种需要每个数据块都以接收到的相同顺序发出的业务场景。我们仍然可以并行运行"),t("code",[this._v("transform")]),this._v("函数。我们所要做的就是对每个任务发出的数据进行排序，使其遵循与接收数据相同的顺序。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过修改现有的"),t("code",[this._v("checkUrls")]),this._v("模块来快速检查一个有序的并行执行的行为。 假设我们希望我们的结果按照与输入文件中的"),t("code",[this._v("URL")]),this._v("相同的顺序编写。 我们可以使用通过"),t("code",[this._v("through2-parallel")]),this._v("来实现：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst split = require('split');\nconst request = require('request');\nconst throughParallel = require('through2-parallel');\n\nfs.createReadStream(process.argv[2])\n  .pipe(split())\n  .pipe(throughParallel.obj({concurrency: 2}, function (url, enc, done) {\n    if(!url) return done();\n    request.head(url, (err, response) => {\n      this.push(url + ' is ' + (err ? 'down' : 'up') + '\\n');\n      done();\n    });\n  }))\n  .pipe(fs.createWriteStream('results.txt'))\n  .on('finish', () => console.log('All urls were checked'))\n;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("正如我们所看到的，"),s("code",[e._v("through2-parallel")]),e._v("的接口与"),s("code",[e._v("through2")]),e._v("的接口非常相似；唯一的不同是在"),s("code",[e._v("through2-parallel")]),e._v("还可以为我们提供的"),s("code",[e._v("transform")]),e._v("函数指定一个并发限制。如果我们尝试运行这个新版本的"),s("code",[e._v("checkUrls")]),e._v("，我们会看到"),s("code",[e._v("results.txt")]),e._v("文件列出结果的顺序与输入文件中 URLs的出现顺序是一样的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("通过这个，我们总结了使用"),t("code",[this._v("Streams")]),this._v("实现异步控制流的分析；接下来，我们研究管道模式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"管道模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管道模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 管道模式")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("就像在现实生活中一样，"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("也可以按照不同的模式进行管道连接。事实上，我们可以将两个不同的"),s("code",[e._v("Streams")]),e._v("合并成一个"),s("code",[e._v("Streams")]),e._v("，将一个"),s("code",[e._v("Streams")]),e._v("分成两个或更多的管道，或者根据条件重定向流。 在本节中，我们将探讨可应用于"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("最重要的管道技术。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"组合的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 组合的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在本章中，我们强调"),t("code",[this._v("Streams")]),this._v("提供了一个简单的基础结构来模块化和重用我们的代码，但是却漏掉了一个重要的部分：如果我们想要模块化和重用整个流水线？如果我们想要合并多个"),t("code",[this._v("Streams")]),this._v("，使它们看起来像外部的"),t("code",[this._v("Streams")]),this._v("，那该怎么办？下图显示了这是什么意思：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8efb092002?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("当我们写入组合的"),s("code",[e._v("Streams")]),e._v("的时候，实际上我们是写入组合的"),s("code",[e._v("Streams")]),e._v("的第一个单元，即"),s("code",[e._v("StreamA")]),e._v("。")]),e._v(" "),s("li",[e._v("当我们从组合的"),s("code",[e._v("Streams")]),e._v("中读取信息时，实际上我们从组合的"),s("code",[e._v("Streams")]),e._v("的最后一个单元中读取。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("一个组合的"),t("code",[this._v("Streams")]),this._v("通常是一个多重的"),t("code",[this._v("Streams")]),this._v("，通过连接第一个单元的写入端和连接最后一个单元的读取端。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("但上述这么做并不完整。实际上，组合的"),s("code",[e._v("Streams")]),e._v("还应该做到捕获到管道中任意一段"),s("code",[e._v("Streams")]),e._v("单元产生的错误。我们已经说过，任何错误都不会自动传播到管道中。 所以，我们必须有适当的错误管理，我们将不得不显式附加一个错误监听器到每个"),s("code",[e._v("Streams")]),e._v("。但是，组合的"),s("code",[e._v("Streams")]),e._v("实际上是一个黑盒，这意味着我们无法访问管道中间的任何单元，所以对于管道中任意单元的异常捕获，组合的"),s("code",[e._v("Streams")]),e._v("也充当聚合器的角色。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("总而言之，组合的"),t("code",[this._v("Streams")]),this._v("具有两个主要优点：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("管道内部是一个黑盒，对使用者不可见。")]),this._v(" "),t("li",[this._v("简化了错误管理，因为我们不必为管道中的每个单元附加一个错误侦听器，而只需要给组合的"),t("code",[this._v("Streams")]),this._v("自身附加上就可以了。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现一个组合的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个组合的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个组合的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了说明一个简单的例子，我们来考虑下面两个组合的"),t("code",[this._v("Streams")]),this._v("的情况：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("压缩和加密数据")]),this._v(" "),t("li",[this._v("解压和解密数据")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("使用诸如"),s("code",[e._v("multipipe")]),e._v("之类的库，我们可以通过组合一些核心库中已有的"),s("code",[e._v("Streams")]),e._v("（文件"),s("code",[e._v("combinedStreams.js")]),e._v("）来轻松地构建组合的"),s("code",[e._v("Streams")]),e._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const zlib = require('zlib');\nconst crypto = require('crypto');\nconst combine = require('multipipe');\nmodule.exports.compressAndEncrypt = password => {\n  return combine(\n    zlib.createGzip(),\n    crypto.createCipher('aes192', password)\n  );\n};\nmodule.exports.decryptAndDecompress = password => {\n  return combine(\n    crypto.createDecipher('aes192', password),\n    zlib.createGunzip()\n  );\n};\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("例如，我们现在可以使用这些组合的数据流，如同黑盒，这些对我们均是不可见的，可以创建一个小型应用程序，通过压缩和加密来归档文件。 让我们在一个名为"),t("code",[this._v("archive.js")]),this._v("的新模块中做这件事：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst compressAndEncryptStream = require('./combinedStreams').compressAndEncrypt;\nfs.createReadStream(process.argv[3])\n  .pipe(compressAndEncryptStream(process.argv[2]))\n  .pipe(fs.createWriteStream(process.argv[3] + \".gz.enc\"));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过从我们创建的流水线中构建一个组合的"),t("code",[this._v("Stream")]),this._v("来进一步改进前面的代码，但这次并不只是为了获得对外不可见的黑盒，而是为了进行异常捕获。 实际上，正如我们已经提到过的那样，写下如下的代码只会捕获最后一个"),t("code",[this._v("Stream")]),this._v("单元发出的错误：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("fs.createReadStream(process.argv[3])\n  .pipe(compressAndEncryptStream(process.argv[2]))\n  .pipe(fs.createWriteStream(process.argv[3] + \".gz.enc\"))\n  .on('error', function(err) {\n    // 只会捕获最后一个单元的错误\n    console.log(err);\n  });\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("但是，通过把所有的"),t("code",[this._v("Streams")]),this._v("结合在一起，我们可以优雅地解决这个问题。重构后的"),t("code",[this._v("archive.js")]),this._v("如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const combine = require('multipipe');\n   const fs = require('fs');\n   const compressAndEncryptStream =\n     require('./combinedStreams').compressAndEncrypt;\n   combine(\n     fs.createReadStream(process.argv[3])\n     .pipe(compressAndEncryptStream(process.argv[2]))\n     .pipe(fs.createWriteStream(process.argv[3] + \".gz.enc\"))\n   ).on('error', err => {\n     // 使用组合的Stream可以捕获任意位置的错误\n     console.log(err);\n   });\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("正如我们所看到的，我们现在可以将一个错误侦听器直接附加到组合的"),s("code",[e._v("Streams")]),e._v("，它将接收任何内部流发出的任何"),s("code",[e._v("error")]),e._v("事件。 现在，要运行"),s("code",[e._v("archive")]),e._v("模块，只需在命令行参数中指定"),s("code",[e._v("password")]),e._v("和"),s("code",[e._v("file")]),e._v("参数，即压缩模块的参数：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node archive mypassword /path/to/a/file.text\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("通过这个例子，我们已经清楚地证明了组合的"),t("code",[this._v("Stream")]),this._v("是多么重要; 从一个方面来说，它允许我们创建流的可重用组合，从另一方面来说，它简化了管道的错误管理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"分开的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分开的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 分开的"),t("code",[this._v("Streams")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过将单个可读的"),t("code",[this._v("Stream")]),this._v("管道化为多个可写入的"),t("code",[this._v("Stream")]),this._v("来执行"),t("code",[this._v("Stream")]),this._v("的分支。当我们想要将相同的数据发送到不同的目的地时，这便体现其作用了，例如，两个不同的套接字或两个不同的文件。当我们想要对相同的数据执行不同的转换时，或者当我们想要根据一些标准拆分数据时，也可以使用它。如图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8eff79bcea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在"),t("code",[this._v("Node.js")]),this._v("中分开的"),t("code",[this._v("Stream")]),this._v("是一件小事。举例说明。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现一个多重校验和的生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个多重校验和的生成器","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个多重校验和的生成器")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们创建一个输出给定文件的"),t("code",[this._v("sha1")]),this._v("和"),t("code",[this._v("md5")]),this._v("散列的小工具。我们来调用这个新模块"),t("code",[this._v("generateHashes.js")]),this._v("，看如下的代码：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst crypto = require('crypto');\nconst sha1Stream = crypto.createHash('sha1');\nsha1Stream.setEncoding('base64');\nconst md5Stream = crypto.createHash('md5');\nmd5Stream.setEncoding('base64');\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("目前为止没什么特别的 该模块的下一个部分实际上是我们将从文件创建一个可读的"),t("code",[this._v("Stream")]),this._v("，并将其分叉到两个不同的流，以获得另外两个文件，其中一个包含"),t("code",[this._v("sha1")]),this._v("散列，另一个包含"),t("code",[this._v("md5")]),this._v("校验和：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const inputFile = process.argv[2];\nconst inputStream = fs.createReadStream(inputFile);\ninputStream\n  .pipe(sha1Stream)\n  .pipe(fs.createWriteStream(inputFile + '.sha1'));\ninputStream\n  .pipe(md5Stream)\n  .pipe(fs.createWriteStream(inputFile + '.md5'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这很简单："),t("code",[this._v("inputStream")]),this._v("变量通过管道一边输入到"),t("code",[this._v("sha1Stream")]),this._v("，另一边输入到"),t("code",[this._v("md5Stream")]),this._v("。但是要注意：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("当"),s("code",[e._v("inputStream")]),e._v("结束时，"),s("code",[e._v("md5Stream")]),e._v("和"),s("code",[e._v("sha1Stream")]),e._v("会自动结束，除非当调用"),s("code",[e._v("pipe()")]),e._v("时指定了"),s("code",[e._v("end")]),e._v("选项为"),s("code",[e._v("false")]),e._v("。")]),e._v(" "),s("li",[s("code",[e._v("Stream")]),e._v("的两个分支会接受相同的数据块，因此当对数据执行一些副作用的操作时我们必须非常谨慎，因为那样会影响另外一个分支。")]),e._v(" "),s("li",[e._v("黑盒外会产生背压，来自"),s("code",[e._v("inputStream")]),e._v("的数据流的流速会根据接收最慢的分支的流速作出调整。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"合并的streams"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并的streams","aria-hidden":"true"}},[this._v("#")]),this._v(" 合并的"),t("code",[this._v("Streams")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("合并与分开相对，通过把一组可读的"),t("code",[this._v("Streams")]),this._v("合并到一个单独的可写的"),t("code",[this._v("Stream")]),this._v("里，如图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8efd24ea8a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("将多个"),s("code",[e._v("Streams")]),e._v("合并为一个通常是一个简单的操作; 然而，我们必须注意我们处理"),s("code",[e._v("end")]),e._v("事件的方式，因为使用自动结束选项的管道系统会在一个源结束时立即结束目标流。 这通常会导致错误，因为其他还未结束的源将继续写入已终止的"),s("code",[e._v("Stream")]),e._v("。 解决此问题的方法是在将多个源传输到单个目标时使用选项"),s("code",[e._v("{end：false}")]),e._v("，并且只有在所有源完成读取后才在目标"),s("code",[e._v("Stream")]),e._v("上调用"),s("code",[e._v("end()")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"用多个源文件压缩为一个压缩包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用多个源文件压缩为一个压缩包","aria-hidden":"true"}},[this._v("#")]),this._v(" 用多个源文件压缩为一个压缩包")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("举一个简单的例子，我们来实现一个小程序，它根据两个不同目录的内容创建一个压缩包。 为此，我们将介绍两个新的"),t("code",[this._v("npm")]),this._v("模块：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们创建一个新模块"),t("code",[this._v("mergeTar.js")]),this._v("，如下开始初始化：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var tar = require('tar');\nvar fstream = require('fstream');\nvar path = require('path');\nvar destination = path.resolve(process.argv[2]);\nvar sourceA = path.resolve(process.argv[3]);\nvar sourceB = path.resolve(process.argv[4]);\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在前面的代码中，我们只加载全部依赖包和初始化包含目标文件和两个源目录("),t("code",[this._v("sourceA")]),this._v("和"),t("code",[this._v("sourceB")]),this._v(")的变量。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("接下来，我们创建"),t("code",[this._v("tar")]),this._v("的"),t("code",[this._v("Stream")]),this._v("并通过管道输出到一个可写入的"),t("code",[this._v("Stream")]),this._v("：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const pack = tar.Pack();\npack.pipe(fstream.Writer(destination));\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，我们开始初始化源"),t("code",[this._v("Stream")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let endCount = 0;\n\nfunction onEnd() {\n  if (++endCount === 2) {\n    pack.end();\n  }\n}\n\nconst sourceStreamA = fstream.Reader({\n    type: \"Directory\",\n    path: sourceA\n  })\n  .on('end', onEnd);\n\nconst sourceStreamB = fstream.Reader({\n    type: \"Directory\",\n    path: sourceB\n  })\n  .on('end', onEnd);\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在前面的代码中，我们创建了从两个源目录（"),s("code",[e._v("sourceStreamA")]),e._v("和"),s("code",[e._v("sourceStreamB")]),e._v("）中读取的"),s("code",[e._v("Stream")]),e._v("那么对于每个源"),s("code",[e._v("Stream")]),e._v("，我们附加一个"),s("code",[e._v("end")]),e._v("事件订阅者，只有当这两个目录被完全读取时，才会触发"),s("code",[e._v("pack")]),e._v("的"),s("code",[e._v("end")]),e._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("最后，合并两个"),t("code",[this._v("Stream")]),this._v("：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("sourceStreamA.pipe(pack, {end: false});\nsourceStreamB.pipe(pack, {end: false});\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们将两个源文件都压缩到"),s("code",[e._v("pack")]),e._v("这个"),s("code",[e._v("Stream")]),e._v("中，并通过设定"),s("code",[e._v("pipe()")]),e._v("的"),s("code",[e._v("option")]),e._v("参数为"),s("code",[e._v("{end：false}")]),e._v("配置终点"),s("code",[e._v("Stream")]),e._v("的自动触发"),s("code",[e._v("end")]),e._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这样，我们已经完成了我们简单的"),t("code",[this._v("TAR")]),this._v("程序。我们可以通过提供目标文件作为第一个命令行参数，然后是两个源目录来尝试运行这个实用程序：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node mergeTar dest.tar /path/to/sourceA /path/to/sourceB\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在"),t("code",[this._v("npm")]),this._v("中我们可以找到一些可以简化"),t("code",[this._v("Stream")]),this._v("的合并的模块：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("要注意，流入目标"),t("code",[this._v("Stream")]),this._v("的数据是随机混合的，这是一个在某些类型的对象流中可以接受的属性（正如我们在上一个例子中看到的那样），但是在处理二进制"),t("code",[this._v("Stream")]),this._v("时通常是一个不希望这样。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"多路复用和多路分解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多路复用和多路分解","aria-hidden":"true"}},[this._v("#")]),this._v(" 多路复用和多路分解")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("合并"),s("code",[e._v("Stream")]),e._v("模式有一个特殊的模式，我们并不是真的只想将多个"),s("code",[e._v("Stream")]),e._v("合并在一起，而是使用一个共享通道来传送一组数据"),s("code",[e._v("Stream")]),e._v("。与之前的不一样，因为源数据"),s("code",[e._v("Stream")]),e._v("在共享通道内保持逻辑分离，这使得一旦数据到达共享通道的另一端，我们就可以再次分离数据"),s("code",[e._v("Stream")]),e._v("。如图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8f05fcf733?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("将多个"),s("code",[e._v("Stream")]),e._v("组合在单个"),s("code",[e._v("Stream")]),e._v("上传输的操作被称为多路复用，而相反的操作（即，从共享"),s("code",[e._v("Stream")]),e._v("接收数据重构原始的"),s("code",[e._v("Stream")]),e._v("）则被称为多路分用。执行这些操作的设备分别称为多路复用器和多路分解器（。 这是一个在计算机科学和电信领域广泛研究的话题，因为它是几乎任何类型的通信媒体，如电话，广播，电视，当然还有互联网本身的基础之一。 对于本书的范围，我们不会过多解释，因为这是一个很大的话题。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们想在本节中演示的是，如何使用共享的"),t("code",[this._v("Node.js Streams")]),this._v("来传送多个逻辑上分离的"),t("code",[this._v("Stream")]),this._v("，然后在共享"),t("code",[this._v("Stream")]),this._v("的另一端再次分离，即实现一次多路复用和多路分解。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"创建一个远程logger日志记录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个远程logger日志记录","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建一个远程logger日志记录")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("举例说明，我们希望有一个小程序来启动子进程，并将其标准输出和标准错误都重定向到远程服务器，服务器接受它们然后保存为两个单独的文件。因此，在这种情况下，共享介质是"),s("code",[e._v("TCP")]),e._v("连接，而要复用的两个通道是子进程的"),s("code",[e._v("stdout")]),e._v("和"),s("code",[e._v("stderr")]),e._v("。 我们将利用分组交换的技术，这种技术与"),s("code",[e._v("IP")]),e._v("，"),s("code",[e._v("TCP")]),e._v("或"),s("code",[e._v("UDP")]),e._v("等协议所使用的技术相同，包括将数据封装在数据包中，允许我们指定各种源信息，这对多路复用，路由，控制 流程，检查损坏的数据都十分有帮助。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"在客户端实现多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在客户端实现多路复用","aria-hidden":"true"}},[this._v("#")]),this._v(" 在客户端实现多路复用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("先说客户端，创建一个名为"),t("code",[this._v("client.js")]),this._v("的模块，这是我们这个应用程序的一部分，它负责启动一个子进程并实现"),t("code",[this._v("Stream")]),this._v("多路复用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const child_process = require('child_process');\nconst net = require('net');\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function multiplexChannels(sources, destination) {\n  let totalChannels = sources.length;\n\n  for(let i = 0; i < sources.length; i++) {\n    sources[i]\n      .on('readable', function() { // [1]\n        let chunk;\n        while ((chunk = this.read()) !== null) {\n          const outBuff = new Buffer(1 + 4 + chunk.length); // [2]\n          outBuff.writeUInt8(i, 0);\n          outBuff.writeUInt32BE(chunk.length, 1);\n          chunk.copy(outBuff, 5);\n          console.log('Sending packet to channel: ' + i);\n          destination.write(outBuff); // [3]\n        }\n      })\n      .on('end', () => { //[4]\n        if (--totalChannels === 0) {\n          destination.end();\n        }\n      });\n  }\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("multiplexChannels()")]),this._v("函数接受要复用的源"),t("code",[this._v("Stream")]),this._v("作为输入 和复用接口作为参数，然后执行以下步骤：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("对于每个源"),s("code",[e._v("Stream")]),e._v("，它会注册一个"),s("code",[e._v("readable")]),e._v("事件侦听器，我们使用"),s("code",[e._v("non-flowing")]),e._v("模式从流中读取数据。")]),e._v(" "),s("li",[e._v("每读取一个数据块，我们将其封装到一个首部中，首部的顺序为："),s("code",[e._v("channel ID")]),e._v("为1字节（"),s("code",[e._v("UInt8")]),e._v("），数据包大小为4字节（"),s("code",[e._v("UInt32BE")]),e._v("），然后为实际数据。")]),e._v(" "),s("li",[e._v("数据包准备好后，我们将其写入目标"),s("code",[e._v("Stream")]),e._v("。")]),e._v(" "),s("li",[e._v("我们为"),s("code",[e._v("end")]),e._v("事件注册一个监听器，以便当所有源"),s("code",[e._v("Stream")]),e._v("结束时，"),s("code",[e._v("end")]),e._v("事件触发，通知目标"),s("code",[e._v("Stream")]),e._v("触发"),s("code",[e._v("end")]),e._v("事件。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意，我们的协议最多能够复用多达256个不同的源流，因为我们只有1个字节来标识"),t("code",[this._v("channel")]),this._v("。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const socket = net.connect(3000, () => { // [1]\n  const child = child_process.fork( // [2]\n    process.argv[2],\n    process.argv.slice(3), {\n      silent: true\n    }\n  );\n  multiplexChannels([child.stdout, child.stderr], socket); // [3]\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们创建一个新的"),s("code",[e._v("TCP")]),e._v("客户端连接到地址"),s("code",[e._v("localhost:3000")]),e._v("。")]),e._v(" "),s("li",[e._v("我们通过使用第一个命令行参数作为路径来启动子进程，同时我们提供剩余的"),s("code",[e._v("process.argv")]),e._v("数组作为子进程的参数。我们指定选项"),s("code",[e._v("{silent：true}")]),e._v("，以便子进程不会继承父级的"),s("code",[e._v("stdout")]),e._v("和"),s("code",[e._v("stderr")]),e._v("。")]),e._v(" "),s("li",[e._v("我们使用"),s("code",[e._v("mutiplexChannels()")]),e._v("函数将"),s("code",[e._v("stdout")]),e._v("和"),s("code",[e._v("stderr")]),e._v("多路复用到"),s("code",[e._v("socket")]),e._v("里。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"在服务端实现多路分解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在服务端实现多路分解","aria-hidden":"true"}},[this._v("#")]),this._v(" 在服务端实现多路分解")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在来看服务端，创建"),t("code",[this._v("server.js")]),this._v("模块，在这里我们将来自远程连接的"),t("code",[this._v("Stream")]),this._v("多路分解，并将它们传送到两个不同的文件中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("首先创建一个名为"),t("code",[this._v("demultiplexChannel()")]),this._v("的函数：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function demultiplexChannel(source, destinations) {\n  let currentChannel = null;\n  let currentLength = null;\n  source\n    .on('readable', () => { //[1]\n      let chunk;\n      if(currentChannel === null) {          //[2]\n        chunk = source.read(1);\n        currentChannel = chunk && chunk.readUInt8(0);\n      }\n    \n      if(currentLength === null) {          //[3]\n        chunk = source.read(4);\n        currentLength = chunk && chunk.readUInt32BE(0);\n        if(currentLength === null) {\n          return;\n        }\n      }\n    \n      chunk = source.read(currentLength);        //[4]\n      if(chunk === null) {\n        return;\n      }\n    \n      console.log('Received packet from: ' + currentChannel);\n    \n      destinations[currentChannel].write(chunk);      //[5]\n      currentChannel = null;\n      currentLength = null;\n    })\n    .on('end', () => {            //[6]\n      destinations.forEach(destination => destination.end());\n      console.log('Source channel closed');\n    })\n  ;\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面的代码可能看起来很复杂，仔细阅读并非如此；由于"),t("code",[this._v("Node.js")]),this._v("可读的"),t("code",[this._v("Stream")]),this._v("的拉动特性，我们可以很容易地实现我们的小协议的多路分解，如下所示：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们开始使用"),s("code",[e._v("non-flowing")]),e._v("模式从流中读取数据。")]),e._v(" "),s("li",[e._v("首先，如果我们还没有读取"),s("code",[e._v("channel ID")]),e._v("，我们尝试从流中读取1个字节，然后将其转换为数字。")]),e._v(" "),s("li",[e._v("下一步是读取首部的长度。我们需要读取4个字节，所以有可能在内部"),s("code",[e._v("Buffer")]),e._v("还没有足够的数据，这将导致"),s("code",[e._v("this.read()")]),e._v("调用返回"),s("code",[e._v("null")]),e._v("。在这种情况下，我们只是中断解析，然后重试下一个"),s("code",[e._v("readable")]),e._v("事件。")]),e._v(" "),s("li",[e._v("当我们最终还可以读取数据大小时，我们知道从内部"),s("code",[e._v("Buffer")]),e._v("中拉出多少数据，所以我们尝试读取所有数据。")]),e._v(" "),s("li",[e._v("当我们读取所有的数据时，我们可以把它写到正确的目标通道，一定要记得重置"),s("code",[e._v("currentChannel")]),e._v("和"),s("code",[e._v("currentLength")]),e._v("变量（这些变量将被用来解析下一个数据包）。")]),e._v(" "),s("li",[e._v("最后，当源"),s("code",[e._v("channel")]),e._v("结束时，一定不要忘记调用目标"),s("code",[e._v("Stream")]),e._v("的"),s("code",[e._v("end()")]),e._v("方法。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("既然我们可以多路分解源"),t("code",[this._v("Stream")]),this._v("，进行如下调用：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("net.createServer(socket => {\n  const stdoutStream = fs.createWriteStream('stdout.log');\n  const stderrStream = fs.createWriteStream('stderr.log');\n  demultiplexChannel(socket, [stdoutStream, stderrStream]);\n})\n  .listen(3000, () => console.log('Server started'))\n;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在上面的代码中，我们首先在"),s("code",[e._v("3000")]),e._v("端口上启动一个"),s("code",[e._v("TCP")]),e._v("服务器，然后对于我们接收到的每个连接，我们将创建两个可写入的"),s("code",[e._v("Stream")]),e._v("，指向两个不同的文件，一个用于标准输出，另一个用于标准错误; 这些是我们的目标"),s("code",[e._v("channel")]),e._v("。 最后，我们使用"),s("code",[e._v("demultiplexChannel()")]),e._v("将套接字流解复用为"),s("code",[e._v("stdoutStream")]),e._v("和"),s("code",[e._v("stderrStream")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"运行多路复用和多路分解应用程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行多路复用和多路分解应用程序","aria-hidden":"true"}},[this._v("#")]),this._v(" 运行多路复用和多路分解应用程序")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，我们准备尝试运行我们的新的多路复用/多路分解应用程序，但首先让我们创建一个小的"),t("code",[this._v("Node.js")]),this._v("程序来产生一些示例输出; 我们把它叫做"),t("code",[this._v("generateData.js")]),this._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('console.log("out1");\nconsole.log("out2");\nconsole.error("err1");\nconsole.log("out3");\nconsole.error("err2");\n复制代码\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node server\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node client generateData.js\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8f27939bc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("客户端几乎立马运行，但是进程结束时，"),t("code",[this._v("generateData")]),this._v("应用程序的标准输入和标准输出经过一个"),t("code",[this._v("TCP")]),this._v("连接，然后在服务器端，被多路分解成两个文件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意，当我们使用"),t("code",[this._v("child_process.fork()")]),this._v("时，我们的客户端能够启动别的"),t("code",[this._v("Node.js")]),this._v("模块。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"对象streams的多路复用和多路分解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象streams的多路复用和多路分解","aria-hidden":"true"}},[this._v("#")]),this._v(" 对象Streams的多路复用和多路分解")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们刚刚展示的例子演示了如何复用和解复用二进制/文本"),s("code",[e._v("Stream")]),e._v("，但值得一提的是，相同的规则也适用于对象"),s("code",[e._v("Stream")]),e._v("。 最大的区别是，使用对象，我们已经有了使用原子消息（对象）传输数据的方法，所以多路复用就像设置一个属性"),s("code",[e._v("channel ID")]),e._v("到每个对象一样简单，而多路分解只需要读"),s("code",[e._v("·channel ID")]),e._v("属性，并将每个对象路由到正确的目标"),s("code",[e._v("Stream")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("还有一种模式是取一个对象上的几个属性并分发到多个目的"),t("code",[this._v("Stream")]),this._v("的模式 通过这种模式，我们可以实现复杂的流程，如下图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8f2510f072?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("如上图所示，取一个对象"),s("code",[e._v("Stream")]),e._v("表示"),s("code",[e._v("animals")]),e._v("，然后根据动物类型："),s("code",[e._v("reptiles")]),e._v("，"),s("code",[e._v("amphibians")]),e._v("和"),s("code",[e._v("mammals")]),e._v("，然后分发到正确的目标"),s("code",[e._v("Stream")]),e._v("中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在本章中，我们已经对"),s("code",[e._v("Node.js Streams")]),e._v("及其使用案例进行了阐述，但同时也应该为编程范式打开一扇大门，几乎具有无限的可能性。我们了解了为什么"),s("code",[e._v("Stream")]),e._v("被"),s("code",[e._v("Node.js")]),e._v("社区赞誉，并且我们掌握了它们的基本功能，使我们能够利用它做更多有趣的事情。我们分析了一些先进的模式，并开始了解如何将不同配置的"),s("code",[e._v("Streams")]),e._v("连接在一起，掌握这些特性，从而使流如此多才多艺，功能强大。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("如果我们遇到不能用一个"),s("code",[e._v("Stream")]),e._v("来实现的功能，我们可以通过将其他"),s("code",[e._v("Streams")]),e._v("连接在一起来实现，这是"),s("code",[e._v("Node.js")]),e._v("的一个很好的特性；"),s("code",[e._v("Streams")]),e._v("在处理二进制数据，字符串和对象都十分有用，并具有鲜明的特点。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在下一章中，我们将重点介绍传统的面向对象的设计模式。尽管"),t("code",[this._v("JavaScript")]),this._v("在某种程度上是面向对象的语言，但在"),t("code",[this._v("Node.js")]),this._v("中，函数式或混合方法通常是首选。在阅读下一章便揭晓答案。《Node.js设计模式》使用流进行编码")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"coding-with-streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#coding-with-streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Coding with Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("Streams")]),e._v("是"),s("code",[e._v("Node.js")]),e._v("最重要的组件和模式之一。 社区中有一句格言“Stream all the things（Steam就是所有的）”，仅此一点就足以描述流在"),s("code",[e._v("Node.js")]),e._v("中的地位。 "),s("code",[e._v("Dominic Tarr")]),e._v("作为"),s("code",[e._v("Node.js")]),e._v("社区的最大贡献者，它将流定义为"),s("code",[e._v("Node.js")]),e._v("最好，也是最难以理解的概念。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("使"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("如此吸引人还有其它原因; 此外，"),s("code",[e._v("Streams")]),e._v("不仅与性能或效率等技术特性有关，更重要的是它们的优雅性以及它们与"),s("code",[e._v("Node.js")]),e._v("的设计理念完美契合的方式。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[s("code",[e._v("Streams")]),e._v("对于"),s("code",[e._v("Node.js")]),e._v("的重要性。")]),e._v(" "),s("li",[e._v("如何创建并使用"),s("code",[e._v("Streams")]),e._v("。")]),e._v(" "),s("li",[s("code",[e._v("Streams")]),e._v("作为编程范式，不只是对于"),s("code",[e._v("I/O")]),e._v("而言，在多种应用场景下它的应用和强大的功能。")]),e._v(" "),s("li",[e._v("管道模式和在不同的配置中连接"),s("code",[e._v("Streams")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"发现streams的重要性-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发现streams的重要性-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 发现Streams的重要性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在基于事件的平台（如"),t("code",[this._v("Node.js")]),this._v("）中，处理"),t("code",[this._v("I / O")]),this._v("的最有效的方法是实时处理，一旦有输入的信息，立马进行处理，一旦有需要输出的结果，也立马输出反馈。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在本节中，我们将首先介绍"),t("code",[this._v("Node.js")]),this._v("的"),t("code",[this._v("Streams")]),this._v("和它的优点。 请记住，这只是一个概述，因为本章后面将会详细介绍如何使用和组合"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"streams和buffer的比较-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streams和buffer的比较-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Streams和Buffer的比较")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们在本书中几乎所有看到过的异步API都是使用的"),t("code",[this._v("Buffer")]),this._v("模式。 对于输入操作，"),t("code",[this._v("Buffer")]),this._v("模式会将来自资源的所有数据收集到"),t("code",[this._v("Buffer")]),this._v("区中; 一旦读取完整个资源，就会把结果传递给回调函数。 下图显示了这个范例的一个真实的例子：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8eb6b75a9c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("从上图我们可以看到，在"),t("strong",[this._v("t1")]),this._v("时刻，一些数据从资源接收并保存到缓冲区。 在"),t("strong",[this._v("t2")]),this._v("时刻，最后一段数据被接收到另一个数据块，完成读取操作，这时，把整个缓冲区的内容发送给消费者。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另一方面，"),t("code",[this._v("Streams")]),this._v("允许你在数据到达时立即处理数据。 如下图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8eb858cfbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这一张图显示了"),t("code",[this._v("Streams")]),this._v("如何从资源接收每个新的数据块，并立即提供给消费者，消费者现在不必等待缓冲区中收集所有数据再处理每个数据块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("空间效率")]),this._v(" "),t("li",[this._v("时间效率")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("此外，"),t("code",[this._v("Node.js")]),this._v("的"),t("code",[this._v("Streams")]),this._v("具有另一个重要的优点："),t("strong",[this._v("可组合性（composability）")]),this._v("。 现在让我们看看这些属性对我们设计和编写应用程序的方式会产生什么影响。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"空间效率-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间效率-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 空间效率")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("首先，"),s("code",[e._v("Streams")]),e._v("允许我们做一些看起来不可能的事情，通过缓冲数据并一次性处理。 例如，考虑一下我们必须读取一个非常大的文件，比如说数百"),s("code",[e._v("MB")]),e._v("甚至千"),s("code",[e._v("MB")]),e._v("。 显然，等待完全读取文件时返回大"),s("code",[e._v("Buffer")]),e._v("的"),s("code",[e._v("API")]),e._v("不是一个好主意。 想象一下，如果并发读取一些大文件， 我们的应用程序很容易耗尽内存。 除此之外，"),s("code",[e._v("V8")]),e._v("中的"),s("code",[e._v("Buffer")]),e._v("不能大于"),s("code",[e._v("0x3FFFFFFF")]),e._v("字节（小于"),s("code",[e._v("1GB")]),e._v("）。 所以，在耗尽物理内存之前，我们可能会碰壁。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"使用buffered的api进行压缩文件-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用buffered的api进行压缩文件-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用Buffered的API进行压缩文件")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("举一个具体的例子，让我们考虑一个简单的命令行接口（"),s("code",[e._v("CLI")]),e._v("）的应用程序，它使用"),s("code",[e._v("Gzip")]),e._v("格式压缩文件。 使用"),s("code",[e._v("Buffered")]),e._v("的"),s("code",[e._v("API")]),e._v("，这样的应用程序在"),s("code",[e._v("Node.js")]),e._v("中大概这么编写（为简洁起见，省略了异常处理）：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst zlib = require('zlib');\nconst file = process.argv[2];\nfs.readFile(file, (err, buffer) => {\n  zlib.gzip(buffer, (err, buffer) => {\n    fs.writeFile(file + '.gz', buffer, err => {\n      console.log('File successfully compressed');\n    });\n  });\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，我们可以尝试将前面的代码放在一个叫做"),t("code",[this._v("gzip.js")]),this._v("的文件中，然后执行下面的命令：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node gzip <path to file>\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果我们选择一个足够大的文件，比如说大于"),t("code",[this._v("1GB")]),this._v("的文件，我们会收到一个错误信息，说明我们要读取的文件大于最大允许的缓冲区大小，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("RangeError: File size is greater than possible Buffer:0x3FFFFFFF\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("上面的例子中，没找到一个大文件，但确实对于大文件的读取速率慢了许多。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("正如我们所预料到的那样，使用"),t("code",[this._v("Buffer")]),this._v("来进行大文件的读取显然是错误的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"使用streams进行压缩文件-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用streams进行压缩文件-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用Streams进行压缩文件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们必须修复我们的"),t("code",[this._v("Gzip")]),this._v("应用程序，并使其处理大文件的最简单方法是使用"),t("code",[this._v("Streams")]),this._v("的"),t("code",[this._v("API")]),this._v("。 让我们看看如何实现这一点。 让我们用下面的代码替换刚创建的模块的内容：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst zlib = require('zlib');\nconst file = process.argv[2];\nfs.createReadStream(file)\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream(file + '.gz'))\n  .on('finish', () => console.log('File successfully compressed'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("“是吗？”你可能会问。是的；正如我们所说的，由于"),t("code",[this._v("Streams")]),this._v("的接口和可组合性，因此我们还能写出这样的更加简洁，优雅和精炼的代码。 我们稍后会详细地看到这一点，但是现在需要认识到的重要一点是，程序可以顺畅地运行在任何大小的文件上，理想情况是内存利用率不变。 尝试一下（但考虑压缩一个大文件可能需要一段时间）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"时间效率-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间效率-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 时间效率")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在让我们考虑一个压缩文件并将其上传到远程"),s("code",[e._v("HTTP")]),e._v("服务器的应用程序的例子，该远程"),s("code",[e._v("HTTP")]),e._v("服务器进而将其解压缩并保存到文件系统中。如果我们的客户端是使用"),s("code",[e._v("Buffered")]),e._v("的"),s("code",[e._v("API")]),e._v("实现的，那么只有当整个文件被读取和压缩时，上传才会开始。 另一方面，只有在接收到所有数据的情况下，解压缩才会在服务器上启动。 实现相同结果的更好的解决方案涉及使用"),s("code",[e._v("Streams")]),e._v("。 在客户端机器上，"),s("code",[e._v("Streams")]),e._v("只要从文件系统中读取就可以压缩和发送数据块，而在服务器上，只要从远程对端接收到数据块，就可以解压每个数据块。 我们通过构建前面提到的应用程序来展示这一点，从服务器端开始。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们创建一个叫做"),t("code",[this._v("gzipReceive.js")]),this._v("的模块，代码如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\nconst fs = require('fs');\nconst zlib = require('zlib');\n\nconst server = http.createServer((req, res) => {\n  const filename = req.headers.filename;\n  console.log('File request received: ' + filename);\n  req\n    .pipe(zlib.createGunzip())\n    .pipe(fs.createWriteStream(filename))\n    .on('finish', () => {\n      res.writeHead(201, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('That\\'s it\\n');\n      console.log(`File saved: ${filename}`);\n    });\n});\n\nserver.listen(3000, () => console.log('Listening'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("服务器从网络接收数据块，将其解压缩，并在接收到数据块后立即保存，这要归功于"),t("code",[this._v("Node.js")]),this._v("的"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们的应用程序的客户端将进入一个名为"),t("code",[this._v("gzipSend.js")]),this._v("的模块，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在前面的代码中，我们再次使用"),t("code",[this._v("Streams")]),this._v("从文件中读取数据，然后在从文件系统中读取的同时压缩并发送每个数据块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node gzipReceive\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，我们可以通过指定要发送的文件和服务器的地址（例如"),t("code",[this._v("localhost")]),this._v("）来启动客户端：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node gzipSend <path to file> localhost\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果我们选择一个足够大的文件，我们将更容易地看到数据如何从客户端流向服务器，但为什么这种模式下，我们使用"),t("code",[this._v("Streams")]),this._v("，比使用"),t("code",[this._v("Buffered")]),this._v("的"),t("code",[this._v("API")]),this._v("更有效率？ 下图应该给我们一个提示：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("客户端从文件系统中读取")]),e._v(" "),s("li",[e._v("客户端压缩数据")]),e._v(" "),s("li",[e._v("客户端将数据发送到服务器")]),e._v(" "),s("li",[e._v("服务端接收数据")]),e._v(" "),s("li",[e._v("服务端解压数据")]),e._v(" "),s("li",[e._v("服务端将数据写入磁盘")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了完成处理，我们必须按照流水线顺序那样经过每个阶段，直到最后。在上图中，我们可以看到，使用"),s("code",[e._v("Buffered")]),e._v("的"),s("code",[e._v("API")]),e._v("，这个过程完全是顺序的。为了压缩数据，我们首先必须等待整个文件被读取完毕，然后，发送数据，我们必须等待整个文件被读取和压缩，依此类推。当我们使用"),s("code",[e._v("Streams")]),e._v("时，只要我们收到第一个数据块，流水线就会被启动，而不需要等待整个文件的读取。但更令人惊讶的是，当下一块数据可用时，不需要等待上一组任务完成；相反，另一条装配线是并行启动的。因为我们执行的每个任务都是异步的，这样显得很完美，所以可以通过"),s("code",[e._v("Node.js")]),e._v("来并行执行"),s("code",[e._v("Streams")]),e._v("的相关操作；唯一的限制就是每个阶段都必须保证数据块的到达顺序。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("从前面的图可以看出，使用"),t("code",[this._v("Streams")]),this._v("的结果是整个过程花费的时间更少，因为我们不用等待所有数据被全部读取完毕和处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"组合性-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合性-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 组合性")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("到目前为止，我们已经看到的代码已经告诉我们如何使用"),s("code",[e._v("pipe()")]),e._v("方法来组装"),s("code",[e._v("Streams")]),e._v("的数据块，"),s("code",[e._v("Streams")]),e._v("允许我们连接不同的处理单元，每个处理单元负责单一的职责（这是符合"),s("code",[e._v("Node.js")]),e._v("风格的）。这是可能的，因为"),s("code",[e._v("Streams")]),e._v("具有统一的接口，并且就"),s("code",[e._v("API")]),e._v("而言，不同"),s("code",[e._v("Streams")]),e._v("也可以很好的进行交互。唯一的先决条件是管道的下一个"),s("code",[e._v("Streams")]),e._v("必须支持上一个"),s("code",[e._v("Streams")]),e._v("生成的数据类型，可以是二进制，文本甚至是对象，我们将在后面的章节中看到。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了证明"),s("code",[e._v("Streams")]),e._v("组合性的优势，我们可以尝试在我们先前构建的"),s("code",[e._v("gzipReceive / gzipSend")]),e._v("应用程序中添加加密功能。 为此，我们只需要通过向流水线添加另一个"),s("code",[e._v("Streams")]),e._v("来更新客户端。 确切地说，由"),s("code",[e._v("crypto.createChipher()")]),e._v("返回的流。 由此产生的代码应如下所示：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst zlib = require('zlib');\nconst crypto = require('crypto');\nconst http = require('http');\nconst path = require('path');\n\nconst file = process.argv[2];\nconst server = process.argv[3];\n\nconst options = {\n  hostname: server,\n  port: 3000,\n  path: '/',\n  method: 'PUT',\n  headers: {\n    filename: path.basename(file),\n    'Content-Type': 'application/octet-stream',\n    'Content-Encoding': 'gzip'\n  }\n};\n\nconst req = http.request(options, res => {\n  console.log('Server response: ' + res.statusCode);\n});\n\nfs.createReadStream(file)\n  .pipe(zlib.createGzip())\n  .pipe(crypto.createCipher('aes192', 'a_shared_secret'))\n  .pipe(req)\n  .on('finish', () => {\n    console.log('File successfully sent');\n  });\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\nconst fs = require('fs');\nconst zlib = require('zlib');\nconst crypto = require('crypto');\n\nconst server = http.createServer((req, res) => {\n  const filename = req.headers.filename;\n  console.log('File request received: ' + filename);\n  req\n    .pipe(crypto.createDecipher('aes192', 'a_shared_secret'))\n    .pipe(zlib.createGunzip())\n    .pipe(fs.createWriteStream(filename))\n    .on('finish', () => {\n      res.writeHead(201, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('That\\'s it\\n');\n      console.log(`File saved: ${filename}`);\n    });\n});\n\nserver.listen(3000, () => console.log('Listening'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("只需几行代码，我们就在应用程序中添加了一个加密层。 我们只需要简单地通过把已经存在的"),t("code",[this._v("Streams")]),this._v("模块和加密层组合到一起，就可以。类似的，我们可以添加和合并其他"),t("code",[this._v("Streams")]),this._v("，如同在玩乐高积木一样。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("显然，这种方法的主要优点是可重用性，但正如我们从目前为止所介绍的代码中可以看到的那样，"),t("code",[this._v("Streams")]),this._v("也可以实现更清晰，更模块化，更加简洁的代码。 出于这些原因，流通常不仅仅用于处理纯粹的"),t("code",[this._v("I / O")]),this._v("，而且它还是简化和模块化代码的手段。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"开始使用streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开始使用streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 开始使用Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在前面的章节中，我们了解了为什么"),s("code",[e._v("Streams")]),e._v("如此强大，而且它在"),s("code",[e._v("Node.js")]),e._v("中无处不在，甚至在"),s("code",[e._v("Node.js")]),e._v("的核心模块中也有其身影。 例如，我们已经看到，"),s("code",[e._v("fs")]),e._v("模块具有用于从文件读取的"),s("code",[e._v("createReadStream()")]),e._v("和用于写入文件的"),s("code",[e._v("createWriteStream()")]),e._v("，"),s("code",[e._v("HTTP")]),e._v("请求和响应对象本质上是"),s("code",[e._v("Streams")]),e._v("，并且"),s("code",[e._v("zlib")]),e._v("模块允许我们使用"),s("code",[e._v("Streams")]),e._v("式"),s("code",[e._v("API")]),e._v("压缩和解压缩数据块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在我们知道为什么"),t("code",[this._v("Streams")]),this._v("是如此重要，让我们退后一步，开始更详细地探索它。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"streams的结构-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streams的结构-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Streams的结构")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Node.js")]),this._v("中的每个"),t("code",[this._v("Streams")]),this._v("都是"),t("code",[this._v("Streams")]),this._v("核心模块中可用的四个基本抽象类之一的实现：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("stream.Readable")])]),this._v(" "),t("li",[t("code",[this._v("stream.Writable")])]),this._v(" "),t("li",[t("code",[this._v("stream.Duplex")])]),this._v(" "),t("li",[t("code",[this._v("stream.Transform")])])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("每个"),s("code",[e._v("stream")]),e._v("类也是"),s("code",[e._v("EventEmitter")]),e._v("的一个实例。实际上，"),s("code",[e._v("Streams")]),e._v("可以产生几种类型的事件，比如"),s("code",[e._v("end")]),e._v("事件会在一个可读的"),s("code",[e._v("Streams")]),e._v("完成读取，或者错误读取，或其过程中产生异常时触发。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("请注意，为简洁起见，在本章介绍的例子中，我们经常会忽略适当的错误处理。但是，在生产环境下中，总是建议为所有Stream注册错误事件侦听器。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Streams")]),this._v("之所以如此灵活的原因之一是它不仅能够处理二进制数据，而且几乎可以处理任何"),t("code",[this._v("JavaScript")]),this._v("值。实际上，"),t("code",[this._v("Streams")]),this._v("可以支持两种操作模式：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("二进制模式：以数据块形式（例如"),s("code",[e._v("buffers")]),e._v("或"),s("code",[e._v("strings")]),e._v("）流式传输数据")]),e._v(" "),s("li",[e._v("对象模式：将流数据视为一系列离散对象（这使得我们几乎可以使用任何"),s("code",[e._v("JavaScript")]),e._v("值）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这两种操作模式使我们不仅可以使用"),t("code",[this._v("I / O")]),this._v("流，而且还可以作为一种工具，以函数式的风格优雅地组合处理单元，我们将在本章后面看到。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("在本章中，我们将主要使用在Node.js 0.11中引入的Node.js流接口，也称为版本3。 有关与旧接口差异的更多详细信息，请参阅StrongLoop在https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/中的优秀博客文章。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"可读的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可读的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 可读的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("一个可读的"),s("code",[e._v("Streams")]),e._v("表示一个数据源，在"),s("code",[e._v("Node.js")]),e._v("中，它使用"),s("code",[e._v("stream")]),e._v("模块中的"),s("code",[e._v("Readableabstract")]),e._v("类实现。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"从streams中读取信息-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从streams中读取信息-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 从Streams中读取信息")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("从可读"),t("code",[this._v("Streams")]),this._v("接收数据有两种方式："),t("code",[this._v("non-flowing")]),this._v("模式和"),t("code",[this._v("flowing")]),this._v("模式。 我们来更详细地分析这些模式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"non-flowing模式（不流动模式）-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#non-flowing模式（不流动模式）-2","aria-hidden":"true"}},[this._v("#")]),this._v(" non-flowing模式（不流动模式）")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("从可读的"),s("code",[e._v("Streams")]),e._v("中读取数据的默认模式是为其附加一个可读事件侦听器，用于指示要读取的新数据的可用性。然后，在一个循环中，我们读取所有的数据，直到内部"),s("code",[e._v("buffer")]),e._v("被清空。这可以使用"),s("code",[e._v("read()")]),e._v("方法完成，该方法同步从内部缓冲区中读取数据，并返回表示数据块的"),s("code",[e._v("Buffer")]),e._v("或"),s("code",[e._v("String")]),e._v("对象。"),s("code",[e._v("read()")]),e._v("方法以如下使用模式：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("readable.read([size]);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用这种方法，数据随时可以直接从"),t("code",[this._v("Streams")]),this._v("中按需提取。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了说明这是如何工作的，我们创建一个名为"),t("code",[this._v("readStdin.js")]),this._v("的新模块，它实现了一个简单的程序，它从标准输入（一个可读流）中读取数据，并将所有数据回送到标准输出：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("process.stdin\n  .on('readable', () => {\n    let chunk;\n    console.log('New data available');\n    while ((chunk = process.stdin.read()) !== null) {\n      console.log(\n        `Chunk read: (${chunk.length}) \"${chunk.toString()}\"`\n      );\n    }\n  })\n  .on('end', () => process.stdout.write('End of stream'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("read()")]),e._v("方法是一个同步操作，它从可读"),s("code",[e._v("Streams")]),e._v("的内部"),s("code",[e._v("Buffers")]),e._v("区中提取数据块。如果"),s("code",[e._v("Streams")]),e._v("在二进制模式下工作，返回的数据块默认为一个"),s("code",[e._v("Buffer")]),e._v("对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("在以二进制模式工作的可读的Stream中，我们可以通过在Stream上调用setEncoding(encoding)来读取字符串而不是Buffer对象，并提供有效的编码格式（例如utf8）。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("数据是从可读的侦听器中读取的，只要有新的数据，就会调用这个侦听器。当内部缓冲区中没有更多数据可用时，"),s("code",[e._v("read()")]),e._v("方法返回"),s("code",[e._v("null")]),e._v("；在这种情况下，我们不得不等待另一个可读的事件被触发，告诉我们可以再次读取或者等待表示"),s("code",[e._v("Streams")]),e._v("读取过程结束的"),s("code",[e._v("end")]),e._v("事件触发。当一个流以二进制模式工作时，我们也可以通过向"),s("code",[e._v("read()")]),e._v("方法传递一个"),s("code",[e._v("size")]),e._v("参数来指定我们想要读取的数据大小。这在实现网络协议或解析特定数据格式时特别有用。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在，我们准备运行"),s("code",[e._v("readStdin")]),e._v("模块并进行实验。让我们在控制台中键入一些字符，然后按"),s("code",[e._v("Enter")]),e._v("键查看回显到标准输出中的数据。要终止流并因此生成一个正常的结束事件，我们需要插入一个"),s("code",[e._v("EOF")]),e._v("（文件结束）字符（在"),s("code",[e._v("Windows")]),e._v("上使用"),s("code",[e._v("Ctrl + Z")]),e._v("或在"),s("code",[e._v("Linux")]),e._v("上使用"),s("code",[e._v("Ctrl + D")]),e._v("）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们也可以尝试将我们的程序与其他程序连接起来;这可以使用管道运算符（"),t("code",[this._v("|")]),this._v("），它将程序的标准输出重定向到另一个程序的标准输入。例如，我们可以运行如下命令：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("cat <path to a file> | node readStdin\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"flowing模式（流动模式）-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flowing模式（流动模式）-2","aria-hidden":"true"}},[this._v("#")]),this._v(" flowing模式（流动模式）")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("从"),s("code",[e._v("Streams")]),e._v("中读取的另一种方法是将侦听器附加到"),s("code",[e._v("data")]),e._v("事件；这会将"),s("code",[e._v("Streams")]),e._v("切换为"),s("code",[e._v("flowing")]),e._v("模式，其中数据不是使用"),s("code",[e._v("read()")]),e._v("函数来提取的，而是一旦有数据到达"),s("code",[e._v("data")]),e._v("监听器就被推送到监听器内。例如，我们之前创建的"),s("code",[e._v("readStdin")]),e._v("应用程序将使用流动模式：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("process.stdin\n  .on('data', chunk => {\n    console.log('New data available');\n    console.log(\n      `Chunk read: (${chunk.length}) \"${chunk.toString()}\"`\n    );\n  })\n  .on('end', () => process.stdout.write('End of stream'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("flowing")]),e._v("模式是旧版"),s("code",[e._v("Streams")]),e._v("接口（也称为"),s("code",[e._v("Streams1")]),e._v("）的继承，其灵活性较低，"),s("code",[e._v("API")]),e._v("较少。随着"),s("code",[e._v("Streams2")]),e._v("接口的引入，"),s("code",[e._v("flowing")]),e._v("模式不是默认的工作模式，要启用它，需要将侦听器附加到"),s("code",[e._v("data")]),e._v("事件或显式调用"),s("code",[e._v("resume()")]),e._v("方法。 要暂时中断"),s("code",[e._v("Streams")]),e._v("触发"),s("code",[e._v("data")]),e._v("事件，我们可以调用"),s("code",[e._v("pause()")]),e._v("方法，导致任何传入数据缓存在内部"),s("code",[e._v("buffer")]),e._v("中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("调用pause()不会导致Streams切换回non-flowing模式。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现可读的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现可读的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现可读的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在我们知道如何从"),s("code",[e._v("Streams")]),e._v("中读取数据，下一步是学习如何实现一个新的"),s("code",[e._v("Readable")]),e._v("数据流。为此，有必要通过继承"),s("code",[e._v("stream.Readable")]),e._v("的原型来创建一个新的类。 具体流必须提供"),s("code",[e._v("_read()")]),e._v("方法的实现：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("readable._read(size)\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Readable")]),this._v("类的内部将调用"),t("code",[this._v("_read()")]),this._v("方法，而该方法又将启动 使用"),t("code",[this._v("push()")]),this._v("填充内部缓冲区：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("请注意，read()是Stream消费者调用的方法，而_read()是一个由Stream子类实现的方法，不能直接调用。下划线通常表示该方法为私有方法，不应该直接调用。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了演示如何实现新的可读"),s("code",[e._v("Streams")]),e._v("，我们可以尝试实现一个生成随机字符串的"),s("code",[e._v("Streams")]),e._v("。 我们来创建一个名为"),s("code",[e._v("randomStream.js")]),e._v("的新模块，它将包含我们的字符串的"),s("code",[e._v("generator")]),e._v("的代码：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\nconst Chance = require('chance');\n\nconst chance = new Chance();\n\nclass RandomStream extends stream.Readable {\n  constructor(options) {\n    super(options);\n  }\n\n  _read(size) {\n    const chunk = chance.string(); //[1]\n    console.log(`Pushing chunk of size: ${chunk.length}`);\n    this.push(chunk, 'utf8'); //[2]\n    if (chance.bool({\n        likelihood: 5\n      })) { //[3]\n      this.push(null);\n    }\n  }\n}\n\nmodule.exports = RandomStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("下一步是创建一个名为"),s("code",[e._v("RandomStream")]),e._v("的新类，并指定"),s("code",[e._v("stream.Readable")]),e._v("作为其父类。 在前面的代码中，我们调用父类的构造函数来初始化其内部状态，并将收到的"),s("code",[e._v("options")]),e._v("参数作为输入。通过"),s("code",[e._v("options")]),e._v("对象传递的可能参数包括以下内容：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("用于将"),s("code",[e._v("Buffers")]),e._v("转换为"),s("code",[e._v("Strings")]),e._v("的"),s("code",[e._v("encoding")]),e._v("参数（默认值为"),s("code",[e._v("null")]),e._v("）")]),e._v(" "),s("li",[e._v("是否启用对象模式（"),s("code",[e._v("objectMode")]),e._v("默认为"),s("code",[e._v("false")]),e._v("）")]),e._v(" "),s("li",[e._v("存储在内部"),s("code",[e._v("buffer")]),e._v("区中的数据的上限，一旦超过这个上限，则暂停从"),s("code",[e._v("data source")]),e._v("读取（"),s("code",[e._v("highWaterMark")]),e._v("默认为"),s("code",[e._v("16KB")]),e._v("）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("好的，现在让我们来解释一下我们重写的"),t("code",[this._v("stream.Readable")]),this._v("类的"),t("code",[this._v("_read()")]),this._v("方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("该方法使用"),s("code",[e._v("chance")]),e._v("生成随机字符串。")]),e._v(" "),s("li",[e._v("它将字符串"),s("code",[e._v("push")]),e._v("内部"),s("code",[e._v("buffer")]),e._v("。 请注意，由于我们"),s("code",[e._v("push")]),e._v("的是"),s("code",[e._v("String")]),e._v("，此外我们还指定了编码为"),s("code",[e._v("utf8")]),e._v("（如果数据块只是一个二进制"),s("code",[e._v("Buffer")]),e._v("，则不需要）。")]),e._v(" "),s("li",[e._v("以"),s("code",[e._v("5%")]),e._v("的概率随机中断"),s("code",[e._v("stream")]),e._v("的随机字符串产生，通过"),s("code",[e._v("push")]),e._v(" "),s("code",[e._v("null")]),e._v("到内部"),s("code",[e._v("Buffer")]),e._v("来表示"),s("code",[e._v("EOF")]),e._v("，即"),s("code",[e._v("stream")]),e._v("的结束。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们还可以看到在"),s("code",[e._v("_read()")]),e._v("函数的输入中给出的"),s("code",[e._v("size")]),e._v("参数被忽略了，因为它是一个建议的参数。 我们可以简单地把所有可用的数据都"),s("code",[e._v("push")]),e._v("到内部的"),s("code",[e._v("buffer")]),e._v("中，但是如果在同一个调用中有多个推送，那么我们应该检查"),s("code",[e._v("push()")]),e._v("是否返回"),s("code",[e._v("false")]),e._v("，因为这意味着内部"),s("code",[e._v("buffer")]),e._v("已经达到了"),s("code",[e._v("highWaterMark")]),e._v("限制，我们应该停止添加更多的数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("以上就是"),t("code",[this._v("RandomStream")]),this._v("模块，我们现在准备好使用它。我们来创建一个名为"),t("code",[this._v("generateRandom.js")]),this._v("的新模块，在这个模块中我们实例化一个新的"),t("code",[this._v("RandomStream")]),this._v("对象并从中提取一些数据：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const RandomStream = require('./randomStream');\nconst randomStream = new RandomStream();\n\nrandomStream.on('readable', () => {\n  let chunk;\n  while ((chunk = randomStream.read()) !== null) {\n    console.log(`Chunk received: ${chunk.toString()}`);\n  }\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，一切都准备好了，我们尝试新的自定义的"),t("code",[this._v("stream")]),this._v("。 像往常一样简单地执行"),t("code",[this._v("generateRandom")]),this._v("模块，观察随机的字符串在屏幕上流动。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"可写的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可写的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 可写的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("一个可写的"),s("code",[e._v("stream")]),e._v("表示一个数据终点，在"),s("code",[e._v("Node.js")]),e._v("中，它使用"),s("code",[e._v("stream")]),e._v("模块中的"),s("code",[e._v("Writable")]),e._v("抽象类来实现。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"写入一个stream-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写入一个stream-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 写入一个stream")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("把一些数据放在可写入的"),t("code",[this._v("stream")]),this._v("中是一件简单的事情， 我们所要做的就是使用"),t("code",[this._v("write()")]),this._v("方法，它具有以下格式：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("writable.write(chunk, [encoding], [callback])\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("encoding")]),e._v("参数是可选的，其在"),s("code",[e._v("chunk")]),e._v("是"),s("code",[e._v("String")]),e._v("类型时指定（默认为"),s("code",[e._v("utf8")]),e._v("，如果"),s("code",[e._v("chunk")]),e._v("是"),s("code",[e._v("Buffer")]),e._v("，则忽略）；当数据块被刷新到底层资源中时，"),s("code",[e._v("callback")]),e._v("就会被调用，"),s("code",[e._v("callback")]),e._v("参数也是可选的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了表示没有更多的数据将被写入"),t("code",[this._v("stream")]),this._v("中，我们必须使用"),t("code",[this._v("end()")]),this._v("方法：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("writable.end([chunk], [encoding], [callback])\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们可以通过"),s("code",[e._v("end()")]),e._v("方法提供最后一块数据。在这种情况下，"),s("code",[e._v("callbak")]),e._v("函数相当于为"),s("code",[e._v("finish")]),e._v("事件注册一个监听器，当数据块全部被写入"),s("code",[e._v("stream")]),e._v("中时，会触发该事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，让我们通过创建一个输出随机字符串序列的小型"),t("code",[this._v("HTTP")]),this._v("服务器来演示这是如何工作的：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const Chance = require('chance');\nconst chance = new Chance();\n\nrequire('http').createServer((req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/plain'\n  }); //[1]\n  while (chance.bool({\n      likelihood: 95\n    })) { //[2]\n    res.write(chance.string() + '\\n'); //[3]\n  }\n  res.end('\\nThe end...\\n'); //[4]\n  res.on('finish', () => console.log('All data was sent')); //[5]\n}).listen(8080, () => console.log('Listening on http://localhost:8080'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们创建了一个"),s("code",[e._v("HTTP服务器")]),e._v("，并把数据写入"),s("code",[e._v("res")]),e._v("对象，"),s("code",[e._v("res")]),e._v("对象是"),s("code",[e._v("http.ServerResponse")]),e._v("的一个实例，也是一个可写入的"),s("code",[e._v("stream")]),e._v("。下面来解释上述代码发生了什么：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们首先写"),s("code",[e._v("HTTP response")]),e._v("的头部。请注意，"),s("code",[e._v("writeHead()")]),e._v("不是"),s("code",[e._v("Writable")]),e._v("接口的一部分，实际上，这个方法是"),s("code",[e._v("http.ServerResponse")]),e._v("类公开的辅助方法。")]),e._v(" "),s("li",[e._v("我们开始一个"),s("code",[e._v("5％")]),e._v("的概率终止的循环（进入循环体的概率为"),s("code",[e._v("chance.bool()")]),e._v("产生，其为"),s("code",[e._v("95％")]),e._v("）。")]),e._v(" "),s("li",[e._v("在循环内部，我们写入一个随机字符串到"),s("code",[e._v("stream")]),e._v("。")]),e._v(" "),s("li",[e._v("一旦我们不在循环中，我们调用"),s("code",[e._v("stream")]),e._v("的"),s("code",[e._v("end()")]),e._v("，表示没有更多 数据块将被写入。另外，我们在结束之前提供一个最终的字符串写入流中。")]),e._v(" "),s("li",[e._v("最后，我们注册一个"),s("code",[e._v("finish")]),e._v("事件的监听器，当所有的数据块都被刷新到底层"),s("code",[e._v("socket")]),e._v("中时，这个事件将被触发。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以调用这个小模块称为"),t("code",[this._v("entropyServer.js")]),this._v("，然后执行它。要测试这个服务器，我们可以在地址"),t("code",[this._v("http：// localhost:8080")]),this._v("打开一个浏览器，或者从终端使用"),t("code",[this._v("curl")]),this._v("命令，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("curl localhost:8080\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("此时，服务器应该开始向您选择的"),t("code",[this._v("HTTP客户端")]),this._v("发送随机字符串（请注意，某些浏览器可能会缓冲数据，并且流式传输行为可能不明显）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"back-pressure（反压）-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#back-pressure（反压）-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Back-pressure（反压）")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("类似于在真实管道系统中流动的液体，"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("stream")]),e._v("也可能遭受瓶颈，数据写入速度可能快于"),s("code",[e._v("stream")]),e._v("的消耗。 解决这个问题的机制包括缓冲输入数据；然而，如果数据"),s("code",[e._v("stream")]),e._v("没有给生产者任何反馈，我们可能会产生越来越多的数据被累积到内部缓冲区的情况，导致内存泄露的发生。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了防止这种情况的发生，当内部"),s("code",[e._v("buffer")]),e._v("超过"),s("code",[e._v("highWaterMark")]),e._v("限制时，"),s("code",[e._v("writable.write()")]),e._v("将返回"),s("code",[e._v("false")]),e._v("。 可写入的"),s("code",[e._v("stream")]),e._v("具有"),s("code",[e._v("highWaterMark")]),e._v("属性，这是"),s("code",[e._v("write()")]),e._v("方法开始返回"),s("code",[e._v("false")]),e._v("的内部"),s("code",[e._v("Buffer")]),e._v("区大小的限制，一旦"),s("code",[e._v("Buffer")]),e._v("区的大小超过这个限制，表示应用程序应该停止写入。 当缓冲器被清空时，会触发一个叫做"),s("code",[e._v("drain")]),e._v("的事件，通知再次开始写入是安全的。 这种机制被称为"),s("code",[e._v("back-pressure")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("本节介绍的机制同样适用于可读的stream。事实上，在可读stream中也存在back-pressure，并且在_read()内调用的push()方法返回false时触发。 但是，这对于stream实现者来说是一个特定的问题，所以我们将不经常处理它。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过修改之前创建的"),t("code",[this._v("entropyServer")]),this._v("模块来演示可写入的"),t("code",[this._v("stream")]),this._v("的"),t("code",[this._v("back-pressure")]),this._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const Chance = require('chance');\nconst chance = new Chance();\n\nrequire('http').createServer((req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/plain'\n  });\n\n  function generateMore() { //[1]\n    while (chance.bool({\n        likelihood: 95\n      })) {\n      const shouldContinue = res.write(\n        chance.string({\n          length: (16 * 1024) - 1\n        }) //[2]\n      );\n      if (!shouldContinue) { //[3]\n        console.log('Backpressure');\n        return res.once('drain', generateMore);\n      }\n    }\n    res.end('\\nThe end...\\n', () => console.log('All data was sent'));\n  }\n  generateMore();\n}).listen(8080, () => console.log('Listening on http://localhost:8080'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们将主逻辑封装在一个名为"),s("code",[e._v("generateMore()")]),e._v("的函数中。")]),e._v(" "),s("li",[e._v("为了增加获得一些"),s("code",[e._v("back-pressure")]),e._v("的机会，我们将数据块的大小增加到"),s("code",[e._v("16KB-1Byte")]),e._v("，这非常接近默认的"),s("code",[e._v("highWaterMark")]),e._v("限制。")]),e._v(" "),s("li",[e._v("在写入一大块数据之后，我们检查"),s("code",[e._v("res.write()")]),e._v("的返回值。 如果它返回"),s("code",[e._v("false")]),e._v("，这意味着内部"),s("code",[e._v("buffer")]),e._v("已满，我们应该停止发送更多的数据。在这种情况下，我们从函数中退出，然后新注册一个写入事件的发布者，当"),s("code",[e._v("drain")]),e._v("事件触发时调用"),s("code",[e._v("generateMore")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果我们现在尝试再次运行服务器，然后使用"),t("code",[this._v("curl")]),this._v("生成客户端请求，则很可能会有一些"),t("code",[this._v("back-pressure")]),this._v("，因为服务器以非常高的速度生成数据，速度甚至会比底层"),t("code",[this._v("socket")]),this._v("更快。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现可写入的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现可写入的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现可写入的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过继承"),t("code",[this._v("stream.Writable")]),this._v("类来实现一个新的可写入的流，并为"),t("code",[this._v("_write()")]),this._v("方法提供一个实现。实现一个我们自定义的可写入的"),t("code",[this._v("Streams")]),this._v("类。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们构建一个可写入的"),t("code",[this._v("stream")]),this._v("，它接收对象的格式如下：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("{\n  path: <path to a file>\n  content: <string or buffer>\n}\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br"),t("span",{staticClass:"line-number"},[this._v("5")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("这个类的作用是这样的：对于每一个对象，我们的"),s("code",[e._v("stream")]),e._v("必须将"),s("code",[e._v("content")]),e._v("部分保存到在给定路径中创建的文件中。 我们可以立即看到，我们"),s("code",[e._v("stream")]),e._v("的输入是对象，而不是"),s("code",[e._v("Strings")]),e._v("或"),s("code",[e._v("Buffers")]),e._v("，这意味着我们的"),s("code",[e._v("stream")]),e._v("必须以对象模式工作。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("调用模块"),t("code",[this._v("toFileStream.js")]),this._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\nconst fs = require('fs');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\n\nclass ToFileStream extends stream.Writable {\n  constructor() {\n    super({\n      objectMode: true\n    });\n  }\n\n  _write(chunk, encoding, callback) {\n    mkdirp(path.dirname(chunk.path), err => {\n      if (err) {\n        return callback(err);\n      }\n      fs.writeFile(chunk.path, chunk.content, callback);\n    });\n  }\n}\nmodule.exports = ToFileStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("作为第一步，我们加载所有我们所需要的依赖包。注意，我们需要模块"),t("code",[this._v("mkdirp")]),this._v("，正如你应该从前几章中所知道的，它应该使用"),t("code",[this._v("npm")]),this._v("安装。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们创建了一个新类，它从"),t("code",[this._v("stream.Writable")]),this._v("扩展而来。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们不得不调用父构造函数来初始化其内部状态；我们还提供了一个"),t("code",[this._v("option")]),this._v("对象作为参数，用于指定流在对象模式下工作（"),t("code",[this._v("objectMode：true")]),this._v("）。"),t("code",[this._v("stream.Writable")]),this._v("接受的其他选项如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[s("code",[e._v("highWaterMark")]),e._v("（默认值是"),s("code",[e._v("16KB")]),e._v("）：控制"),s("code",[e._v("back-pressure")]),e._v("的上限。")]),e._v(" "),s("li",[s("code",[e._v("decodeStrings")]),e._v("（默认为"),s("code",[e._v("true")]),e._v("）：在字符串传递给"),s("code",[e._v("_write()")]),e._v("方法之前，将字符串自动解码为二进制"),s("code",[e._v("buffer")]),e._v("区。 在对象模式下这个参数被忽略。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("最后，我们为"),s("code",[e._v("_write()")]),e._v("方法提供了一个实现。正如你所看到的，这个方法接受一个数据块，一个编码方式（只有在二进制模式下，"),s("code",[e._v("stream")]),e._v("选项"),s("code",[e._v("decodeStrings")]),e._v("设置为"),s("code",[e._v("false")]),e._v("时才有意义）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另外，该方法接受一个回调函数，该函数在操作完成时需要调用；而不必要传递操作的结果，但是如果需要的话，我们仍然可以传递一个"),t("code",[this._v("error")]),this._v("对象，这将导致"),t("code",[this._v("stream")]),this._v("触发"),t("code",[this._v("error")]),this._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，为了尝试我们刚刚构建的"),t("code",[this._v("stream")]),this._v("，我们可以创建一个名为"),t("code",[this._v("writeToFile.js")]),this._v("的新模块，并对该流执行一些写操作：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const ToFileStream = require(\'./toFileStream.js\');\nconst tfs = new ToFileStream();\n\ntfs.write({path: "file1.txt", content: "Hello"});\ntfs.write({path: "file2.txt", content: "Node.js"});\ntfs.write({path: "file3.txt", content: "Streams"});\ntfs.end(() => console.log("All files created"));\n复制代码\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"双重的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双重的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 双重的Streams")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("双重的"),s("code",[e._v("stream")]),e._v("既是可读的，也可写的。 当我们想描述一个既是数据源又是数据终点的实体时（例如"),s("code",[e._v("socket")]),e._v("），这就显得十分有用了。 双工流继承"),s("code",[e._v("stream.Readable")]),e._v("和"),s("code",[e._v("stream.Writable")]),e._v("的方法，所以它对我们来说并不新鲜。这意味着我们可以"),s("code",[e._v("read()")]),e._v("或"),s("code",[e._v("write()")]),e._v("数据，或者可以监听"),s("code",[e._v("readable")]),e._v("和"),s("code",[e._v("drain")]),e._v("事件。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("要创建一个自定义的双重"),s("code",[e._v("stream")]),e._v("，我们必须为"),s("code",[e._v("_read()")]),e._v("和"),s("code",[e._v("_write()")]),e._v("提供一个实现。传递给"),s("code",[e._v("Duplex()")]),e._v("构造函数的"),s("code",[e._v("options")]),e._v("对象在内部被转发给"),s("code",[e._v("Readable")]),e._v("和"),s("code",[e._v("Writable")]),e._v("的构造函数。"),s("code",[e._v("options")]),e._v("参数的内容与前面讨论的相同，"),s("code",[e._v("options")]),e._v("增加了一个名为"),s("code",[e._v("allowHalfOpen")]),e._v("值（默认为"),s("code",[e._v("true")]),e._v("），如果设置为"),s("code",[e._v("false")]),e._v("，则会导致只要"),s("code",[e._v("stream")]),e._v("的一方（"),s("code",[e._v("Readable")]),e._v("和"),s("code",[e._v("Writable")]),e._v("）结束，"),s("code",[e._v("stream")]),e._v("就结束了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("为了使双重的stream在一方以对象模式工作，而在另一方以二进制模式工作，我们需要在流构造器中手动设置以下属性：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("this._writableState.objectMode\nthis._readableState.objectMode\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"转换的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 转换的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("转换的"),t("code",[this._v("Streams")]),this._v("是专门设计用于处理数据转换的一种特殊类型的双重"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在一个简单的双重"),s("code",[e._v("Streams")]),e._v("中，从"),s("code",[e._v("stream")]),e._v("中读取的数据和写入到其中的数据之间没有直接的关系（至少"),s("code",[e._v("stream")]),e._v("是不可知的）。 想想一个"),s("code",[e._v("TCP socket")]),e._v("，它只是向远程节点发送数据和从远程节点接收数据。"),s("code",[e._v("TCP socket")]),e._v("自身没有意识到输入和输出之间有任何关系。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下图说明了双重"),t("code",[this._v("Streams")]),this._v("中的数据流：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8ebb1158b0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另一方面，转换的"),t("code",[this._v("Streams")]),this._v("对从可写入端接收到的每个数据块应用某种转换，然后在其可读端使转换的数据可用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下图显示了数据如何在转换的"),t("code",[this._v("Streams")]),this._v("中流动：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8ef108f983?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("从外面看，转换的"),s("code",[e._v("Streams")]),e._v("的接口与双重"),s("code",[e._v("Streams")]),e._v("的接口完全相同。但是，当我们想要构建一个新的双重"),s("code",[e._v("Streams")]),e._v("时，我们必须提供"),s("code",[e._v("_read()")]),e._v("和"),s("code",[e._v("_write()")]),e._v("方法，而为了实现一个新的变换流，我们必须填写另一对方法："),s("code",[e._v("_transform()")]),e._v("和"),s("code",[e._v("_flush()")]),e._v("）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们来演示如何用一个例子来创建一个新的转换的"),t("code",[this._v("Streams")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现转换的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现转换的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现转换的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们来实现一个转换的"),t("code",[this._v("Streams")]),this._v("，它将替换给定所有出现的字符串。 要做到这一点，我们必须创建一个名为"),t("code",[this._v("replaceStream.js")]),this._v("的新模块。 让我们直接看怎么实现它：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\nconst util = require('util');\n\nclass ReplaceStream extends stream.Transform {\n  constructor(searchString, replaceString) {\n    super();\n    this.searchString = searchString;\n    this.replaceString = replaceString;\n    this.tailPiece = '';\n  }\n\n  _transform(chunk, encoding, callback) {\n    const pieces = (this.tailPiece + chunk)         //[1]\n      .split(this.searchString);\n    const lastPiece = pieces[pieces.length - 1];\n    const tailPieceLen = this.searchString.length - 1;\n\n    this.tailPiece = lastPiece.slice(-tailPieceLen);     //[2]\n    pieces[pieces.length - 1] = lastPiece.slice(0,-tailPieceLen);\n\n    this.push(pieces.join(this.replaceString));       //[3]\n    callback();\n  }\n\n  _flush(callback) {\n    this.push(this.tailPiece);\n    callback();\n  }\n}\n\nmodule.exports = ReplaceStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("然后我们创建了一个从"),s("code",[e._v("stream.Transform")]),e._v("基类继承的新类。该类的构造函数接受两个参数："),s("code",[e._v("searchString")]),e._v("和"),s("code",[e._v("replaceString")]),e._v("。 正如你所想象的那样，它们允许我们定义要匹配的文本以及用作替换的字符串。 我们还初始化一个将由"),s("code",[e._v("_transform()")]),e._v("方法使用的"),s("code",[e._v("tailPiece")]),e._v("内部变量。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在，我们来分析一下"),s("code",[e._v("_transform()")]),e._v("方法，它是我们新类的核心。"),s("code",[e._v("_transform()")]),e._v("方法与可写入的"),s("code",[e._v("stream")]),e._v("的"),s("code",[e._v("_write()")]),e._v("方法具有几乎相同的格式，但不是将数据写入底层资源，而是使用"),s("code",[e._v("this.push()")]),e._v("将其推入内部"),s("code",[e._v("buffer")]),e._v("，这与我们会在可读流的"),s("code",[e._v("_read()")]),e._v("方法中执行。这显示了转换的"),s("code",[e._v("Streams")]),e._v("的双方如何实际连接。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("ReplaceStream")]),this._v("的"),t("code",[this._v("_transform()")]),this._v("方法实现了我们这个新类的核心。正常情况下，搜索和替换"),t("code",[this._v("buffer")]),this._v("区中的字符串是一件容易的事情；但是，当数据流式传输时，情况则完全不同，可能的匹配可能分布在多个数据块中。代码后面的程序可以解释如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们的算法使用"),s("code",[e._v("searchString")]),e._v("函数作为分隔符来分割块。")]),e._v(" "),s("li",[e._v("然后，它取出分隔后生成的数组的最后一项"),s("code",[e._v("lastPiece")]),e._v("，并提取其最后一个字符"),s("code",[e._v("searchString.length - 1")]),e._v("。结果被保存到"),s("code",[e._v("tailPiece")]),e._v("变量中，它将会被作为下一个数据块的前缀。")]),e._v(" "),s("li",[e._v("最后，所有从"),s("code",[e._v("split()")]),e._v("得到的片段用"),s("code",[e._v("replaceString")]),e._v("作为分隔符连接在一起，并推入内部"),s("code",[e._v("buffer")]),e._v("区。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("当"),s("code",[e._v("stream")]),e._v("结束时，我们可能仍然有最后一个"),s("code",[e._v("tailPiece")]),e._v("变量没有被压入内部缓冲区。这正是"),s("code",[e._v("_flush()")]),e._v("方法的用途；它在"),s("code",[e._v("stream")]),e._v("结束之前被调用，并且这是我们最终有机会完成流或者在完全结束流之前推送任何剩余数据的地方。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("_flush()")]),this._v("方法只需要一个回调函数作为参数，当所有的操作完成后，我们必须确保调用这个回调函数。完成了这个，我们已经完成了我们的"),t("code",[this._v("ReplaceStream")]),this._v("类。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，是时候尝试新的"),t("code",[this._v("stream")]),this._v("。我们可以创建另一个名为"),t("code",[this._v("replaceStreamTest.js")]),this._v("的模块来写入一些数据，然后读取转换的结果：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const ReplaceStream = require('./replaceStream');\n\nconst rs = new ReplaceStream('World', 'Node.js');\nrs.on('data', chunk => console.log(chunk.toString()));\n\nrs.write('Hello W');\nrs.write('orld!');\nrs.end();\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了使得这个例子更复杂一些，我们把搜索词分布在两个不同的数据块上；然后，使用"),t("code",[this._v("flowing")]),this._v("模式，我们从同一个"),t("code",[this._v("stream")]),this._v("中读取数据，记录每个已转换的块。运行前面的程序应该产生以下输出：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Hel\nlo Node.js\n!\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("有一个值得提及是，第五种类型的stream：stream.PassThrough。 与我们介绍的其他流类不同，PassThrough不是抽象的，可以直接实例化，而不需要实现任何方法。实际上，这是一个可转换的stream，它可以输出每个数据块，而不需要进行任何转换。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"使用管道连接streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用管道连接streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用管道连接Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Unix")]),this._v("管道的概念是由"),t("code",[this._v("Douglas Mcllroy")]),this._v("发明的；这使程序的输出能够连接到下一个的输入。看看下面的命令：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("echo Hello World! | sed s/World/Node.js/g\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在前面的命令中，"),s("code",[e._v("echo")]),e._v("会将"),s("code",[e._v("Hello World!")]),e._v("写入标准输出，然后被重定向到"),s("code",[e._v("sed")]),e._v("命令的标准输入（因为有管道操作符 "),s("code",[e._v("|")]),e._v("）。 然后"),s("code",[e._v("sed")]),e._v("用"),s("code",[e._v("Node.js")]),e._v("替换任何"),s("code",[e._v("World")]),e._v("，并将结果打印到它的标准输出（这次是控制台）。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("以类似的方式，可以使用可读的"),s("code",[e._v("Streams")]),e._v("的"),s("code",[e._v("pipe()")]),e._v("方法将"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("连接在一起，它具有以下接口：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("readable.pipe(writable, [options])\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("非常直观地，"),s("code",[e._v("pipe()")]),e._v("方法将从可读的"),s("code",[e._v("Streams")]),e._v("中发出的数据抽取到所提供的可写入的"),s("code",[e._v("Streams")]),e._v("中。 另外，当可读的"),s("code",[e._v("Streams")]),e._v("发出"),s("code",[e._v("end")]),e._v("事件（除非我们指定"),s("code",[e._v("{end：false}")]),e._v("作为"),s("code",[e._v("options")]),e._v("）时，可写入的"),s("code",[e._v("Streams")]),e._v("将自动结束。 "),s("code",[e._v("pipe()")]),e._v("方法返回作为参数传递的可写入的"),s("code",[e._v("Streams")]),e._v("，如果这样的"),s("code",[e._v("stream")]),e._v("也是可读的（例如双重或可转换的"),s("code",[e._v("Streams")]),e._v("），则允许我们创建链式调用。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("将两个"),s("code",[e._v("Streams")]),e._v("连接到一起时，则允许数据自动流向可写入的"),s("code",[e._v("Streams")]),e._v("，所以不需要调用"),s("code",[e._v("read()")]),e._v("或"),s("code",[e._v("write()")]),e._v("方法；但最重要的是不需要控制"),s("code",[e._v("back-pressure")]),e._v("，因为它会自动处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("举个简单的例子（将会有大量的例子），我们可以创建一个名为"),t("code",[this._v("replace.js")]),this._v("的新模块，它接受来自标准输入的文本流，应用替换转换，然后将数据返回到标准输出：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const ReplaceStream = require('./replaceStream');\nprocess.stdin\n  .pipe(new ReplaceStream(process.argv[2], process.argv[3]))\n  .pipe(process.stdout);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br"),t("span",{staticClass:"line-number"},[this._v("5")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上述程序将来自标准输入的数据传送到"),t("code",[this._v("ReplaceStream")]),this._v("，然后返回到标准输出。 现在，为了实践这个小应用程序，我们可以利用"),t("code",[this._v("Unix")]),this._v("管道将一些数据重定向到它的标准输入，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("echo Hello World! | node replace World Node.js\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Hello Node.js\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这个简单的例子演示了"),t("code",[this._v("Streams")]),this._v("（特别是文本"),t("code",[this._v("Streams")]),this._v("）是一个通用接口，管道几乎是构成和连接所有这些接口的通用方式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[t("code",[this._v("error")]),this._v("事件不会通过管道自动传播。举个例子，看如下代码片段：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("stream1\n  .pipe(stream2)\n  .on('error', function() {});\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("blockquote",[s("p",[e._v("在前面的链式调用中，我们将只捕获来自"),s("code",[e._v("stream2")]),e._v("的错误，这是由于我们给其添加了"),s("code",[e._v("erorr")]),e._v("事件侦听器。这意味着，如果我们想捕获从"),s("code",[e._v("stream1")]),e._v("生成的任何错误，我们必须直接附加另一个错误侦听器。 稍后我们将看到一种可以实现共同错误捕获的另一种模式（合并"),s("code",[e._v("Streams")]),e._v("）。 此外，我们应该注意到，如果目标"),s("code",[e._v("Streams")]),e._v("（读取的"),s("code",[e._v("Streams")]),e._v("）发出错误，它将会对源"),s("code",[e._v("Streams")]),e._v("通知一个"),s("code",[e._v("error")]),e._v("，之后导致管道的中断。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"streams如何通过管道-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streams如何通过管道-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Streams如何通过管道")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("到目前为止，我们创建自定义"),s("code",[e._v("Streams")]),e._v("的方式并不完全遵循"),s("code",[e._v("Node")]),e._v("定义的模式；实际上，从"),s("code",[e._v("stream")]),e._v("基类继承是违反"),s("code",[e._v("small surface area")]),e._v("的，并需要一些示例代码。 这并不意味着"),s("code",[e._v("Streams")]),e._v("设计得不好，实际上，我们不应该忘记，因为"),s("code",[e._v("Streams")]),e._v("是"),s("code",[e._v("Node.js")]),e._v("核心的一部分，所以它们必须尽可能地灵活，广泛拓展"),s("code",[e._v("Streams")]),e._v("以致于用户级模块能够将它们充分运用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const transform = through2([options], [_transform], [_flush]);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const readable = from2([options], _read);\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"基于streams的异步控制流-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于streams的异步控制流-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于Streams的异步控制流")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("通过我们已经介绍的例子，应该清楚的是，"),t("code",[this._v("Streams")]),this._v("不仅可以用来处理"),t("code",[this._v("I / O")]),this._v("，而且可以用作处理任何类型数据的优雅编程模式。 但优点并不止这些；还可以利用"),t("code",[this._v("Streams")]),this._v("来实现异步控制流，在本节将会看到。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"顺序执行-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序执行-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 顺序执行")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("默认情况下，"),s("code",[e._v("Streams")]),e._v("将按顺序处理数据；例如，转换的"),s("code",[e._v("Streams")]),e._v("的"),s("code",[e._v("_transform()")]),e._v("函数在前一个数据块执行"),s("code",[e._v("callback()")]),e._v("之后才会进行下一块数据块的调用。这是"),s("code",[e._v("Streams")]),e._v("的一个重要属性，按正确顺序处理每个数据块至关重要，但是也可以利用这一属性将"),s("code",[e._v("Streams")]),e._v("实现优雅的传统控制流模式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("代码总是比太多的解释要好得多，所以让我们来演示一下如何使用流来按顺序执行异步任务的例子。让我们创建一个函数来连接一组接收到的文件作为输入，确保遵守提供的顺序。我们创建一个名为"),t("code",[this._v("concatFiles.js")]),this._v("的新模块，并从其依赖开始：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const fromArray = require('from2-array');\nconst through = require('through2');\nconst fs = require('fs');\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们将使用"),s("code",[e._v("through2")]),e._v("来简化转换的"),s("code",[e._v("Streams")]),e._v("的创建，并使用"),s("code",[e._v("from2-array")]),e._v("从一个对象数组中创建可读的"),s("code",[e._v("Streams")]),e._v("。 接下来，我们可以定义"),s("code",[e._v("concatFiles()")]),e._v("函数：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function concatFiles(destination, files, callback) {\n  const destStream = fs.createWriteStream(destination);\n  fromArray.obj(files)             //[1]\n    .pipe(through.obj((file, enc, done) => {   //[2]\n      const src = fs.createReadStream(file);\n      src.pipe(destStream, {end: false});\n      src.on('end', done); //[3]\n    }))\n    .on('finish', () => {         //[4]\n      destStream.end();\n      callback();\n    });\n}\n\nmodule.exports = concatFiles;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("前面的函数通过将"),t("code",[this._v("files")]),this._v("数组转换为"),t("code",[this._v("Streams")]),this._v("来实现对"),t("code",[this._v("files")]),this._v("数组的顺序迭代。 该函数所遵循的程序解释如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("首先，我们使用"),s("code",[e._v("from2-array")]),e._v("从"),s("code",[e._v("files")]),e._v("数组创建一个可读的"),s("code",[e._v("Streams")]),e._v("。")]),e._v(" "),s("li",[e._v("接下来，我们使用"),s("code",[e._v("through")]),e._v("来创建一个转换的"),s("code",[e._v("Streams")]),e._v("来处理序列中的每个文件。对于每个文件，我们创建一个可读的"),s("code",[e._v("Streams")]),e._v("，并通过管道将其输入到表示输出文件的"),s("code",[e._v("destStream")]),e._v("中。 在源文件完成读取后，通过在"),s("code",[e._v("pipe()")]),e._v("方法的第二个参数中指定"),s("code",[e._v("{end：false}")]),e._v("，我们确保不关闭"),s("code",[e._v("destStream")]),e._v("。")]),e._v(" "),s("li",[e._v("当源文件的所有内容都被传送到"),s("code",[e._v("destStream")]),e._v("时，我们调用"),s("code",[e._v("through.obj")]),e._v("公开的"),s("code",[e._v("done")]),e._v("函数来传递当前处理已经完成，在我们的情况下这是需要触发处理下一个文件。")]),e._v(" "),s("li",[e._v("所有文件处理完后，"),s("code",[e._v("finish")]),e._v("事件被触发。我们最后可以结束"),s("code",[e._v("destStream")]),e._v("并调用"),s("code",[e._v("concatFiles()")]),e._v("的"),s("code",[e._v("callback()")]),e._v("函数，这个函数表示整个操作的完成。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们现在可以尝试使用我们刚刚创建的小模块。让我们创建一个名为"),t("code",[this._v("concat.js")]),this._v("的新文件来完成一个示例：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const concatFiles = require('./concatFiles');\n\nconcatFiles(process.argv[2], process.argv.slice(3), () => {\n  console.log('Files concatenated successfully');\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node concat allTogether.txt file1.txt file2.txt\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("执行这一条命令，会创建一个名为"),t("code",[this._v("allTogether.txt")]),this._v("的新文件，其中按顺序保存"),t("code",[this._v("file1.txt")]),this._v("和"),t("code",[this._v("file2.txt")]),this._v("的内容。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("使用"),s("code",[e._v("concatFiles()")]),e._v("函数，我们能够仅使用"),s("code",[e._v("Streams")]),e._v("实现异步操作的顺序执行。正如我们在"),s("code",[e._v("Chapter3 Asynchronous Control Flow Patters with Callbacks")]),e._v("中看到的那样，如果使用纯"),s("code",[e._v("JavaScript")]),e._v("实现，或者使用"),s("code",[e._v("async")]),e._v("等外部库，则需要使用或实现迭代器。我们现在提供了另外一个可以达到同样效果的方法，正如我们所看到的，它的实现方式非常优雅且可读性高。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("模式：使用Streams或Streams的组合，可以轻松地按顺序遍历一组异步任务。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"无序并行执行-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无序并行执行-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 无序并行执行")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们刚刚看到"),s("code",[e._v("Streams")]),e._v("按顺序处理每个数据块，但有时这可能并不能这么做，因为这样并没有充分利用"),s("code",[e._v("Node.js")]),e._v("的并发性。如果我们必须对每个数据块执行一个缓慢的异步操作，那么并行化执行这一组异步任务完全是有必要的。当然，只有在每个数据块之间没有关系的情况下才能应用这种模式，这些数据块可能经常发生在对象模式的"),s("code",[e._v("Streams")]),e._v("中，但是对于二进制模式的"),s("code",[e._v("Streams")]),e._v("很少使用无序的并行执行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意：当处理数据的顺序很重要时，不能使用无序并行执行的Streams。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了并行化一个可转换的"),t("code",[this._v("Streams")]),this._v("的执行，我们可以运用"),t("code",[this._v("Chapter3 Asynchronous Control Flow Patters with Callbacks")]),this._v("所讲到的无序并行执行的相同模式，然后做出一些改变使它们适用于"),t("code",[this._v("Streams")]),this._v("。让我们看看这是如何更改的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"实现一个无序并行的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个无序并行的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个无序并行的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们用一个例子直接说明：我们创建一个叫做"),t("code",[this._v("parallelStream.js")]),this._v("的模块，然后自定义一个普通的可转换的"),t("code",[this._v("Streams")]),this._v("，然后给出一系列可转换流的方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const stream = require('stream');\n\nclass ParallelStream extends stream.Transform {\n  constructor(userTransform) {\n    super({objectMode: true});\n    this.userTransform = userTransform;\n    this.running = 0;\n    this.terminateCallback = null;\n  }\n\n  _transform(chunk, enc, done) {\n    this.running++;\n    this.userTransform(chunk, enc, this._onComplete.bind(this), this.push.bind(this));\n    done();\n  }\n\n  _flush(done) {\n    if(this.running > 0) {\n      this.terminateCallback = done;\n    } else {\n      done();\n    }\n  }\n\n  _onComplete(err) {\n    this.running--;\n    if(err) {\n      return this.emit('error', err);\n    }\n    if(this.running === 0) {\n      this.terminateCallback && this.terminateCallback();\n    }\n  }\n}\n\nmodule.exports = ParallelStream;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们来分析一下这个新的自定义的类。正如你所看到的一样，构造函数接受一个"),t("code",[this._v("userTransform()")]),this._v("函数作为参数，然后将其另存为一个实例变量；我们也调用父构造函数，并且我们默认启用对象模式。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("接下来，来看"),s("code",[e._v("_transform()")]),e._v("方法，在这个方法中，我们执行"),s("code",[e._v("userTransform()")]),e._v("函数，然后增加当前正在运行的任务个数; 最后，我们通过调用"),s("code",[e._v("done()")]),e._v("来通知当前转换步骤已经完成。"),s("code",[e._v("_transform()")]),e._v("方法展示了如何并行处理另一项任务。我们不用等待"),s("code",[e._v("userTransform()")]),e._v("方法执行完毕再调用"),s("code",[e._v("done()")]),e._v("。 相反，我们立即执行"),s("code",[e._v("done()")]),e._v("方法。另一方面，我们提供了一个特殊的回调函数给"),s("code",[e._v("userTransform()")]),e._v("方法，这就是"),s("code",[e._v("this._onComplete()")]),e._v("方法；以便我们在"),s("code",[e._v("userTransform()")]),e._v("完成的时候收到通知。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在"),s("code",[e._v("Streams")]),e._v("终止之前，会调用"),s("code",[e._v("_flush()")]),e._v("方法，所以如果仍有任务正在运行，我们可以通过不立即调用"),s("code",[e._v("done()")]),e._v("回调函数来延迟"),s("code",[e._v("finish")]),e._v("事件的触发。相反，我们将其分配给"),s("code",[e._v("this.terminateCallback")]),e._v("变量。为了理解"),s("code",[e._v("Streams")]),e._v("如何正确终止，来看"),s("code",[e._v("_onComplete()")]),e._v("方法。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在每组异步任务最终完成时，"),s("code",[e._v("_onComplete()")]),e._v("方法会被调用。首先，它会检查是否有任务正在运行，如果没有，则调用"),s("code",[e._v("this.terminateCallback()")]),e._v("函数，这将导致"),s("code",[e._v("Streams")]),e._v("结束，触发"),s("code",[e._v("_flush()")]),e._v("方法的"),s("code",[e._v("finish")]),e._v("事件。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("利用刚刚构建的"),s("code",[e._v("ParallelStream")]),e._v("类可以轻松地创建一个无序并行执行的可转换的"),s("code",[e._v("Streams")]),e._v("实例，但是有个注意：它不会保留项目接收的顺序。实际上，异步操作可以在任何时候都有可能完成并推送数据，而跟它们开始的时刻并没有必然的联系。因此我们知道，对于二进制模式的"),s("code",[e._v("Streams")]),e._v("并不适用，因为二进制的"),s("code",[e._v("Streams")]),e._v("对顺序要求较高。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"实现一个url监控应用程序-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个url监控应用程序-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个URL监控应用程序")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("现在，让我们使用"),s("code",[e._v("ParallelStream")]),e._v("模块实现一个具体的例子。让我们想象以下我们想要构建一个简单的服务来监控一个大"),s("code",[e._v("URL")]),e._v("列表的状态，让我们想象以下，所有的这些"),s("code",[e._v("URL")]),e._v("包含在一个单独的文件中，并且每一个"),s("code",[e._v("URL")]),e._v("占据一个空行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Streams")]),this._v("能够为这个场景提供一个高效且优雅的解决方案。特别是当我们使用我们刚刚写的"),t("code",[this._v("ParallelStream")]),this._v("类来无序地审核这些"),t("code",[this._v("URL")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("接下来，让我们创建一个简单的放在"),t("code",[this._v("checkUrls.js")]),this._v("模块的应用程序。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst split = require('split');\nconst request = require('request');\nconst ParallelStream = require('./parallelStream');\n\nfs.createReadStream(process.argv[2])         //[1]\n  .pipe(split())                             //[2]\n  .pipe(new ParallelStream((url, enc, done, push) => {     //[3]\n    if(!url) return done();\n    request.head(url, (err, response) => {\n      push(url + ' is ' + (err ? 'down' : 'up') + '\\n');\n      done();\n    });\n  }))\n  .pipe(fs.createWriteStream('results.txt'))   //[4]\n  .on('finish', () => console.log('All urls were checked'))\n;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[this._v("首先，我们通过给定的文件参数创建一个可读的"),t("code",[this._v("Streams")]),this._v("，便于接下来读取文件。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("li",[e._v("然后，是时候使用我们的"),s("code",[e._v("ParallelStream")]),e._v("来检查"),s("code",[e._v("URL")]),e._v("了，我们发送一个"),s("code",[e._v("HEAD")]),e._v("请求然后等待请求的"),s("code",[e._v("response")]),e._v("。当请求返回时，我们把请求的结果"),s("code",[e._v("push")]),e._v("到"),s("code",[e._v("stream")]),e._v("中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[this._v("最后，通过管道把结果保存到"),t("code",[this._v("results.txt")]),this._v("文件中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node checkUrls urlList.txt\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这里的文件"),t("code",[this._v("urlList.txt")]),this._v("包含一组"),t("code",[this._v("URL")]),this._v("，例如：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("http://www.mariocasciaro.me/")])]),this._v(" "),t("li",[t("code",[this._v("http://loige.co/")])]),this._v(" "),t("li",[t("code",[this._v("http://thiswillbedownforsure.com/")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("当应用执行完成后，我们可以看到一个文件"),t("code",[this._v("results.txt")]),this._v("被创建，里面包含有操作的结果，例如：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("http://thiswillbedownforsure.com is down")])]),this._v(" "),t("li",[t("code",[this._v("http://loige.co is up")])]),this._v(" "),t("li",[t("code",[this._v("http://www.mariocasciaro.me is up")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("输出的结果的顺序很有可能与输入文件中指定"),t("code",[this._v("URL")]),this._v("的顺序不同。这是"),t("code",[this._v("Streams")]),this._v("无序并行执行任务的明显特征。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("出于好奇，我们可能想尝试用一个正常的through2流替换ParallelStream，并比较两者的行为和性能（你可能想这样做的一个练习）。我们将会看到，使用through2的方式会比较慢，因为每个URL都将按顺序进行检查，而且文件results.txt中结果的顺序也会被保留。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"无序限制并行执行-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无序限制并行执行-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 无序限制并行执行")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果运行包含数千或数百万个URL的文件的"),t("code",[this._v("checkUrls")]),this._v("应用程序，我们肯定会遇到麻烦。我们的应用程序将同时创建不受控制的连接数量，并行发送大量数据，并可能破坏应用程序的稳定性和整个系统的可用性。我们已经知道，控制负载的无序限制并行执行是一个极好的解决方案。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们通过创建一个"),t("code",[this._v("limitedParallelStream.js")]),this._v("模块来看看它是如何工作的，这个模块是改编自上一节中创建的"),t("code",[this._v("parallelStream.js")]),this._v("模块。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class LimitedParallelStream extends stream.Transform {\n  constructor(concurrency, userTransform) {\n    super({objectMode: true});\n    this.concurrency = concurrency;\n    this.userTransform = userTransform;\n    this.running = 0;\n    this.terminateCallback = null;\n    this.continueCallback = null;\n  }\n// ...\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们需要一个"),s("code",[e._v("concurrency")]),e._v("变量作为输入来限制并发量，这次我们要保存两个回调函数，"),s("code",[e._v("continueCallback")]),e._v("用于任何挂起的"),s("code",[e._v("_transform")]),e._v("方法，"),s("code",[e._v("terminateCallback")]),e._v("用于_flush方法的回调。 接下来看"),s("code",[e._v("_transform()")]),e._v("方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_transform(chunk, enc, done) {\n  this.running++;\n  this.userTransform(chunk, enc,  this.push.bind(this), this._onComplete.bind(this));\n  if(this.running < this.concurrency) {\n    done();\n  } else {\n    this.continueCallback = done;\n  }\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("这次在"),s("code",[e._v("_transform()")]),e._v("方法中，我们必须在调用"),s("code",[e._v("done()")]),e._v("之前检查是否达到了最大并行数量的限制，如果没有达到了限制，才能触发下一个项目的处理。如果我们已经达到最大并行数量的限制，我们可以简单地将"),s("code",[e._v("done()")]),e._v("回调保存到"),s("code",[e._v("continueCallback")]),e._v("变量中，以便在任务完成后立即调用它。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("_flush()")]),this._v("方法与"),t("code",[this._v("ParallelStream")]),this._v("类保持完全一样，所以我们直接转到实现"),t("code",[this._v("_onComplete()")]),this._v("方法：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_onComplete(err) {\n  this.running--;\n  if(err) {\n    return this.emit('error', err);\n  }\n  const tmpCallback = this.continueCallback;\n  this.continueCallback = null;\n  tmpCallback && tmpCallback();\n  if(this.running === 0) {\n    this.terminateCallback && this.terminateCallback();\n  }\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("每当任务完成，我们调用任何已保存的"),t("code",[this._v("continueCallback()")]),this._v("将导致 "),t("code",[this._v("stream")]),this._v("解锁，触发下一个项目的处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这就是"),t("code",[this._v("limitedParallelStream")]),this._v("模块。 我们现在可以在"),t("code",[this._v("checkUrls")]),this._v("模块中使用它来代替"),t("code",[this._v("parallelStream")]),this._v("，并且将我们的任务的并发限制在我们设置的值上。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"顺序并行执行-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序并行执行-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 顺序并行执行")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们以前创建的并行"),t("code",[this._v("Streams")]),this._v("可能会使得数据的顺序混乱，但是在某些情况下这是不可接受的。有时，实际上，有那种需要每个数据块都以接收到的相同顺序发出的业务场景。我们仍然可以并行运行"),t("code",[this._v("transform")]),this._v("函数。我们所要做的就是对每个任务发出的数据进行排序，使其遵循与接收数据相同的顺序。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过修改现有的"),t("code",[this._v("checkUrls")]),this._v("模块来快速检查一个有序的并行执行的行为。 假设我们希望我们的结果按照与输入文件中的"),t("code",[this._v("URL")]),this._v("相同的顺序编写。 我们可以使用通过"),t("code",[this._v("through2-parallel")]),this._v("来实现：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst split = require('split');\nconst request = require('request');\nconst throughParallel = require('through2-parallel');\n\nfs.createReadStream(process.argv[2])\n  .pipe(split())\n  .pipe(throughParallel.obj({concurrency: 2}, function (url, enc, done) {\n    if(!url) return done();\n    request.head(url, (err, response) => {\n      this.push(url + ' is ' + (err ? 'down' : 'up') + '\\n');\n      done();\n    });\n  }))\n  .pipe(fs.createWriteStream('results.txt'))\n  .on('finish', () => console.log('All urls were checked'))\n;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("正如我们所看到的，"),s("code",[e._v("through2-parallel")]),e._v("的接口与"),s("code",[e._v("through2")]),e._v("的接口非常相似；唯一的不同是在"),s("code",[e._v("through2-parallel")]),e._v("还可以为我们提供的"),s("code",[e._v("transform")]),e._v("函数指定一个并发限制。如果我们尝试运行这个新版本的"),s("code",[e._v("checkUrls")]),e._v("，我们会看到"),s("code",[e._v("results.txt")]),e._v("文件列出结果的顺序与输入文件中 URLs的出现顺序是一样的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("通过这个，我们总结了使用"),t("code",[this._v("Streams")]),this._v("实现异步控制流的分析；接下来，我们研究管道模式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"管道模式-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管道模式-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 管道模式")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("就像在现实生活中一样，"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("也可以按照不同的模式进行管道连接。事实上，我们可以将两个不同的"),s("code",[e._v("Streams")]),e._v("合并成一个"),s("code",[e._v("Streams")]),e._v("，将一个"),s("code",[e._v("Streams")]),e._v("分成两个或更多的管道，或者根据条件重定向流。 在本节中，我们将探讨可应用于"),s("code",[e._v("Node.js")]),e._v("的"),s("code",[e._v("Streams")]),e._v("最重要的管道技术。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"组合的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 组合的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在本章中，我们强调"),t("code",[this._v("Streams")]),this._v("提供了一个简单的基础结构来模块化和重用我们的代码，但是却漏掉了一个重要的部分：如果我们想要模块化和重用整个流水线？如果我们想要合并多个"),t("code",[this._v("Streams")]),this._v("，使它们看起来像外部的"),t("code",[this._v("Streams")]),this._v("，那该怎么办？下图显示了这是什么意思：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8efb092002?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("当我们写入组合的"),s("code",[e._v("Streams")]),e._v("的时候，实际上我们是写入组合的"),s("code",[e._v("Streams")]),e._v("的第一个单元，即"),s("code",[e._v("StreamA")]),e._v("。")]),e._v(" "),s("li",[e._v("当我们从组合的"),s("code",[e._v("Streams")]),e._v("中读取信息时，实际上我们从组合的"),s("code",[e._v("Streams")]),e._v("的最后一个单元中读取。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("一个组合的"),t("code",[this._v("Streams")]),this._v("通常是一个多重的"),t("code",[this._v("Streams")]),this._v("，通过连接第一个单元的写入端和连接最后一个单元的读取端。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("但上述这么做并不完整。实际上，组合的"),s("code",[e._v("Streams")]),e._v("还应该做到捕获到管道中任意一段"),s("code",[e._v("Streams")]),e._v("单元产生的错误。我们已经说过，任何错误都不会自动传播到管道中。 所以，我们必须有适当的错误管理，我们将不得不显式附加一个错误监听器到每个"),s("code",[e._v("Streams")]),e._v("。但是，组合的"),s("code",[e._v("Streams")]),e._v("实际上是一个黑盒，这意味着我们无法访问管道中间的任何单元，所以对于管道中任意单元的异常捕获，组合的"),s("code",[e._v("Streams")]),e._v("也充当聚合器的角色。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("总而言之，组合的"),t("code",[this._v("Streams")]),this._v("具有两个主要优点：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("管道内部是一个黑盒，对使用者不可见。")]),this._v(" "),t("li",[this._v("简化了错误管理，因为我们不必为管道中的每个单元附加一个错误侦听器，而只需要给组合的"),t("code",[this._v("Streams")]),this._v("自身附加上就可以了。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现一个组合的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个组合的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个组合的Streams")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了说明一个简单的例子，我们来考虑下面两个组合的"),t("code",[this._v("Streams")]),this._v("的情况：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("压缩和加密数据")]),this._v(" "),t("li",[this._v("解压和解密数据")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("使用诸如"),s("code",[e._v("multipipe")]),e._v("之类的库，我们可以通过组合一些核心库中已有的"),s("code",[e._v("Streams")]),e._v("（文件"),s("code",[e._v("combinedStreams.js")]),e._v("）来轻松地构建组合的"),s("code",[e._v("Streams")]),e._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const zlib = require('zlib');\nconst crypto = require('crypto');\nconst combine = require('multipipe');\nmodule.exports.compressAndEncrypt = password => {\n  return combine(\n    zlib.createGzip(),\n    crypto.createCipher('aes192', password)\n  );\n};\nmodule.exports.decryptAndDecompress = password => {\n  return combine(\n    crypto.createDecipher('aes192', password),\n    zlib.createGunzip()\n  );\n};\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("例如，我们现在可以使用这些组合的数据流，如同黑盒，这些对我们均是不可见的，可以创建一个小型应用程序，通过压缩和加密来归档文件。 让我们在一个名为"),t("code",[this._v("archive.js")]),this._v("的新模块中做这件事：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst compressAndEncryptStream = require('./combinedStreams').compressAndEncrypt;\nfs.createReadStream(process.argv[3])\n  .pipe(compressAndEncryptStream(process.argv[2]))\n  .pipe(fs.createWriteStream(process.argv[3] + \".gz.enc\"));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过从我们创建的流水线中构建一个组合的"),t("code",[this._v("Stream")]),this._v("来进一步改进前面的代码，但这次并不只是为了获得对外不可见的黑盒，而是为了进行异常捕获。 实际上，正如我们已经提到过的那样，写下如下的代码只会捕获最后一个"),t("code",[this._v("Stream")]),this._v("单元发出的错误：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("fs.createReadStream(process.argv[3])\n  .pipe(compressAndEncryptStream(process.argv[2]))\n  .pipe(fs.createWriteStream(process.argv[3] + \".gz.enc\"))\n  .on('error', function(err) {\n    // 只会捕获最后一个单元的错误\n    console.log(err);\n  });\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("但是，通过把所有的"),t("code",[this._v("Streams")]),this._v("结合在一起，我们可以优雅地解决这个问题。重构后的"),t("code",[this._v("archive.js")]),this._v("如下：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const combine = require('multipipe');\n   const fs = require('fs');\n   const compressAndEncryptStream =\n     require('./combinedStreams').compressAndEncrypt;\n   combine(\n     fs.createReadStream(process.argv[3])\n     .pipe(compressAndEncryptStream(process.argv[2]))\n     .pipe(fs.createWriteStream(process.argv[3] + \".gz.enc\"))\n   ).on('error', err => {\n     // 使用组合的Stream可以捕获任意位置的错误\n     console.log(err);\n   });\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("正如我们所看到的，我们现在可以将一个错误侦听器直接附加到组合的"),s("code",[e._v("Streams")]),e._v("，它将接收任何内部流发出的任何"),s("code",[e._v("error")]),e._v("事件。 现在，要运行"),s("code",[e._v("archive")]),e._v("模块，只需在命令行参数中指定"),s("code",[e._v("password")]),e._v("和"),s("code",[e._v("file")]),e._v("参数，即压缩模块的参数：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node archive mypassword /path/to/a/file.text\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("通过这个例子，我们已经清楚地证明了组合的"),t("code",[this._v("Stream")]),this._v("是多么重要; 从一个方面来说，它允许我们创建流的可重用组合，从另一方面来说，它简化了管道的错误管理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"分开的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分开的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 分开的"),t("code",[this._v("Streams")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以通过将单个可读的"),t("code",[this._v("Stream")]),this._v("管道化为多个可写入的"),t("code",[this._v("Stream")]),this._v("来执行"),t("code",[this._v("Stream")]),this._v("的分支。当我们想要将相同的数据发送到不同的目的地时，这便体现其作用了，例如，两个不同的套接字或两个不同的文件。当我们想要对相同的数据执行不同的转换时，或者当我们想要根据一些标准拆分数据时，也可以使用它。如图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8eff79bcea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在"),t("code",[this._v("Node.js")]),this._v("中分开的"),t("code",[this._v("Stream")]),this._v("是一件小事。举例说明。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"实现一个多重校验和的生成器-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个多重校验和的生成器-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现一个多重校验和的生成器")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们创建一个输出给定文件的"),t("code",[this._v("sha1")]),this._v("和"),t("code",[this._v("md5")]),this._v("散列的小工具。我们来调用这个新模块"),t("code",[this._v("generateHashes.js")]),this._v("，看如下的代码：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fs = require('fs');\nconst crypto = require('crypto');\nconst sha1Stream = crypto.createHash('sha1');\nsha1Stream.setEncoding('base64');\nconst md5Stream = crypto.createHash('md5');\nmd5Stream.setEncoding('base64');\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("目前为止没什么特别的 该模块的下一个部分实际上是我们将从文件创建一个可读的"),t("code",[this._v("Stream")]),this._v("，并将其分叉到两个不同的流，以获得另外两个文件，其中一个包含"),t("code",[this._v("sha1")]),this._v("散列，另一个包含"),t("code",[this._v("md5")]),this._v("校验和：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const inputFile = process.argv[2];\nconst inputStream = fs.createReadStream(inputFile);\ninputStream\n  .pipe(sha1Stream)\n  .pipe(fs.createWriteStream(inputFile + '.sha1'));\ninputStream\n  .pipe(md5Stream)\n  .pipe(fs.createWriteStream(inputFile + '.md5'));\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这很简单："),t("code",[this._v("inputStream")]),this._v("变量通过管道一边输入到"),t("code",[this._v("sha1Stream")]),this._v("，另一边输入到"),t("code",[this._v("md5Stream")]),this._v("。但是要注意：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("当"),s("code",[e._v("inputStream")]),e._v("结束时，"),s("code",[e._v("md5Stream")]),e._v("和"),s("code",[e._v("sha1Stream")]),e._v("会自动结束，除非当调用"),s("code",[e._v("pipe()")]),e._v("时指定了"),s("code",[e._v("end")]),e._v("选项为"),s("code",[e._v("false")]),e._v("。")]),e._v(" "),s("li",[s("code",[e._v("Stream")]),e._v("的两个分支会接受相同的数据块，因此当对数据执行一些副作用的操作时我们必须非常谨慎，因为那样会影响另外一个分支。")]),e._v(" "),s("li",[e._v("黑盒外会产生背压，来自"),s("code",[e._v("inputStream")]),e._v("的数据流的流速会根据接收最慢的分支的流速作出调整。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"合并的streams-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并的streams-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 合并的"),t("code",[this._v("Streams")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("合并与分开相对，通过把一组可读的"),t("code",[this._v("Streams")]),this._v("合并到一个单独的可写的"),t("code",[this._v("Stream")]),this._v("里，如图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8efd24ea8a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("将多个"),s("code",[e._v("Streams")]),e._v("合并为一个通常是一个简单的操作; 然而，我们必须注意我们处理"),s("code",[e._v("end")]),e._v("事件的方式，因为使用自动结束选项的管道系统会在一个源结束时立即结束目标流。 这通常会导致错误，因为其他还未结束的源将继续写入已终止的"),s("code",[e._v("Stream")]),e._v("。 解决此问题的方法是在将多个源传输到单个目标时使用选项"),s("code",[e._v("{end：false}")]),e._v("，并且只有在所有源完成读取后才在目标"),s("code",[e._v("Stream")]),e._v("上调用"),s("code",[e._v("end()")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"用多个源文件压缩为一个压缩包-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用多个源文件压缩为一个压缩包-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 用多个源文件压缩为一个压缩包")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("举一个简单的例子，我们来实现一个小程序，它根据两个不同目录的内容创建一个压缩包。 为此，我们将介绍两个新的"),t("code",[this._v("npm")]),this._v("模块：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们创建一个新模块"),t("code",[this._v("mergeTar.js")]),this._v("，如下开始初始化：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var tar = require('tar');\nvar fstream = require('fstream');\nvar path = require('path');\nvar destination = path.resolve(process.argv[2]);\nvar sourceA = path.resolve(process.argv[3]);\nvar sourceB = path.resolve(process.argv[4]);\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在前面的代码中，我们只加载全部依赖包和初始化包含目标文件和两个源目录("),t("code",[this._v("sourceA")]),this._v("和"),t("code",[this._v("sourceB")]),this._v(")的变量。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("接下来，我们创建"),t("code",[this._v("tar")]),this._v("的"),t("code",[this._v("Stream")]),this._v("并通过管道输出到一个可写入的"),t("code",[this._v("Stream")]),this._v("：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const pack = tar.Pack();\npack.pipe(fstream.Writer(destination));\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，我们开始初始化源"),t("code",[this._v("Stream")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let endCount = 0;\n\nfunction onEnd() {\n  if (++endCount === 2) {\n    pack.end();\n  }\n}\n\nconst sourceStreamA = fstream.Reader({\n    type: \"Directory\",\n    path: sourceA\n  })\n  .on('end', onEnd);\n\nconst sourceStreamB = fstream.Reader({\n    type: \"Directory\",\n    path: sourceB\n  })\n  .on('end', onEnd);\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在前面的代码中，我们创建了从两个源目录（"),s("code",[e._v("sourceStreamA")]),e._v("和"),s("code",[e._v("sourceStreamB")]),e._v("）中读取的"),s("code",[e._v("Stream")]),e._v("那么对于每个源"),s("code",[e._v("Stream")]),e._v("，我们附加一个"),s("code",[e._v("end")]),e._v("事件订阅者，只有当这两个目录被完全读取时，才会触发"),s("code",[e._v("pack")]),e._v("的"),s("code",[e._v("end")]),e._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("最后，合并两个"),t("code",[this._v("Stream")]),this._v("：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("sourceStreamA.pipe(pack, {end: false});\nsourceStreamB.pipe(pack, {end: false});\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们将两个源文件都压缩到"),s("code",[e._v("pack")]),e._v("这个"),s("code",[e._v("Stream")]),e._v("中，并通过设定"),s("code",[e._v("pipe()")]),e._v("的"),s("code",[e._v("option")]),e._v("参数为"),s("code",[e._v("{end：false}")]),e._v("配置终点"),s("code",[e._v("Stream")]),e._v("的自动触发"),s("code",[e._v("end")]),e._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这样，我们已经完成了我们简单的"),t("code",[this._v("TAR")]),this._v("程序。我们可以通过提供目标文件作为第一个命令行参数，然后是两个源目录来尝试运行这个实用程序：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node mergeTar dest.tar /path/to/sourceA /path/to/sourceB\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在"),t("code",[this._v("npm")]),this._v("中我们可以找到一些可以简化"),t("code",[this._v("Stream")]),this._v("的合并的模块：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("要注意，流入目标"),t("code",[this._v("Stream")]),this._v("的数据是随机混合的，这是一个在某些类型的对象流中可以接受的属性（正如我们在上一个例子中看到的那样），但是在处理二进制"),t("code",[this._v("Stream")]),this._v("时通常是一个不希望这样。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"多路复用和多路分解-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多路复用和多路分解-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 多路复用和多路分解")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("合并"),s("code",[e._v("Stream")]),e._v("模式有一个特殊的模式，我们并不是真的只想将多个"),s("code",[e._v("Stream")]),e._v("合并在一起，而是使用一个共享通道来传送一组数据"),s("code",[e._v("Stream")]),e._v("。与之前的不一样，因为源数据"),s("code",[e._v("Stream")]),e._v("在共享通道内保持逻辑分离，这使得一旦数据到达共享通道的另一端，我们就可以再次分离数据"),s("code",[e._v("Stream")]),e._v("。如图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8f05fcf733?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("将多个"),s("code",[e._v("Stream")]),e._v("组合在单个"),s("code",[e._v("Stream")]),e._v("上传输的操作被称为多路复用，而相反的操作（即，从共享"),s("code",[e._v("Stream")]),e._v("接收数据重构原始的"),s("code",[e._v("Stream")]),e._v("）则被称为多路分用。执行这些操作的设备分别称为多路复用器和多路分解器（。 这是一个在计算机科学和电信领域广泛研究的话题，因为它是几乎任何类型的通信媒体，如电话，广播，电视，当然还有互联网本身的基础之一。 对于本书的范围，我们不会过多解释，因为这是一个很大的话题。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们想在本节中演示的是，如何使用共享的"),t("code",[this._v("Node.js Streams")]),this._v("来传送多个逻辑上分离的"),t("code",[this._v("Stream")]),this._v("，然后在共享"),t("code",[this._v("Stream")]),this._v("的另一端再次分离，即实现一次多路复用和多路分解。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"创建一个远程logger日志记录-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个远程logger日志记录-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建一个远程logger日志记录")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("举例说明，我们希望有一个小程序来启动子进程，并将其标准输出和标准错误都重定向到远程服务器，服务器接受它们然后保存为两个单独的文件。因此，在这种情况下，共享介质是"),s("code",[e._v("TCP")]),e._v("连接，而要复用的两个通道是子进程的"),s("code",[e._v("stdout")]),e._v("和"),s("code",[e._v("stderr")]),e._v("。 我们将利用分组交换的技术，这种技术与"),s("code",[e._v("IP")]),e._v("，"),s("code",[e._v("TCP")]),e._v("或"),s("code",[e._v("UDP")]),e._v("等协议所使用的技术相同，包括将数据封装在数据包中，允许我们指定各种源信息，这对多路复用，路由，控制 流程，检查损坏的数据都十分有帮助。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"在客户端实现多路复用-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在客户端实现多路复用-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 在客户端实现多路复用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("先说客户端，创建一个名为"),t("code",[this._v("client.js")]),this._v("的模块，这是我们这个应用程序的一部分，它负责启动一个子进程并实现"),t("code",[this._v("Stream")]),this._v("多路复用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const child_process = require('child_process');\nconst net = require('net');\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function multiplexChannels(sources, destination) {\n  let totalChannels = sources.length;\n\n  for(let i = 0; i < sources.length; i++) {\n    sources[i]\n      .on('readable', function() { // [1]\n        let chunk;\n        while ((chunk = this.read()) !== null) {\n          const outBuff = new Buffer(1 + 4 + chunk.length); // [2]\n          outBuff.writeUInt8(i, 0);\n          outBuff.writeUInt32BE(chunk.length, 1);\n          chunk.copy(outBuff, 5);\n          console.log('Sending packet to channel: ' + i);\n          destination.write(outBuff); // [3]\n        }\n      })\n      .on('end', () => { //[4]\n        if (--totalChannels === 0) {\n          destination.end();\n        }\n      });\n  }\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("multiplexChannels()")]),this._v("函数接受要复用的源"),t("code",[this._v("Stream")]),this._v("作为输入 和复用接口作为参数，然后执行以下步骤：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("对于每个源"),s("code",[e._v("Stream")]),e._v("，它会注册一个"),s("code",[e._v("readable")]),e._v("事件侦听器，我们使用"),s("code",[e._v("non-flowing")]),e._v("模式从流中读取数据。")]),e._v(" "),s("li",[e._v("每读取一个数据块，我们将其封装到一个首部中，首部的顺序为："),s("code",[e._v("channel ID")]),e._v("为1字节（"),s("code",[e._v("UInt8")]),e._v("），数据包大小为4字节（"),s("code",[e._v("UInt32BE")]),e._v("），然后为实际数据。")]),e._v(" "),s("li",[e._v("数据包准备好后，我们将其写入目标"),s("code",[e._v("Stream")]),e._v("。")]),e._v(" "),s("li",[e._v("我们为"),s("code",[e._v("end")]),e._v("事件注册一个监听器，以便当所有源"),s("code",[e._v("Stream")]),e._v("结束时，"),s("code",[e._v("end")]),e._v("事件触发，通知目标"),s("code",[e._v("Stream")]),e._v("触发"),s("code",[e._v("end")]),e._v("事件。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意，我们的协议最多能够复用多达256个不同的源流，因为我们只有1个字节来标识"),t("code",[this._v("channel")]),this._v("。")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const socket = net.connect(3000, () => { // [1]\n  const child = child_process.fork( // [2]\n    process.argv[2],\n    process.argv.slice(3), {\n      silent: true\n    }\n  );\n  multiplexChannels([child.stdout, child.stderr], socket); // [3]\n});\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们创建一个新的"),s("code",[e._v("TCP")]),e._v("客户端连接到地址"),s("code",[e._v("localhost:3000")]),e._v("。")]),e._v(" "),s("li",[e._v("我们通过使用第一个命令行参数作为路径来启动子进程，同时我们提供剩余的"),s("code",[e._v("process.argv")]),e._v("数组作为子进程的参数。我们指定选项"),s("code",[e._v("{silent：true}")]),e._v("，以便子进程不会继承父级的"),s("code",[e._v("stdout")]),e._v("和"),s("code",[e._v("stderr")]),e._v("。")]),e._v(" "),s("li",[e._v("我们使用"),s("code",[e._v("mutiplexChannels()")]),e._v("函数将"),s("code",[e._v("stdout")]),e._v("和"),s("code",[e._v("stderr")]),e._v("多路复用到"),s("code",[e._v("socket")]),e._v("里。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"在服务端实现多路分解-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在服务端实现多路分解-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 在服务端实现多路分解")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在来看服务端，创建"),t("code",[this._v("server.js")]),this._v("模块，在这里我们将来自远程连接的"),t("code",[this._v("Stream")]),this._v("多路分解，并将它们传送到两个不同的文件中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("首先创建一个名为"),t("code",[this._v("demultiplexChannel()")]),this._v("的函数：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function demultiplexChannel(source, destinations) {\n  let currentChannel = null;\n  let currentLength = null;\n  source\n    .on('readable', () => { //[1]\n      let chunk;\n      if(currentChannel === null) {          //[2]\n        chunk = source.read(1);\n        currentChannel = chunk && chunk.readUInt8(0);\n      }\n    \n      if(currentLength === null) {          //[3]\n        chunk = source.read(4);\n        currentLength = chunk && chunk.readUInt32BE(0);\n        if(currentLength === null) {\n          return;\n        }\n      }\n    \n      chunk = source.read(currentLength);        //[4]\n      if(chunk === null) {\n        return;\n      }\n    \n      console.log('Received packet from: ' + currentChannel);\n    \n      destinations[currentChannel].write(chunk);      //[5]\n      currentChannel = null;\n      currentLength = null;\n    })\n    .on('end', () => {            //[6]\n      destinations.forEach(destination => destination.end());\n      console.log('Source channel closed');\n    })\n  ;\n}\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面的代码可能看起来很复杂，仔细阅读并非如此；由于"),t("code",[this._v("Node.js")]),this._v("可读的"),t("code",[this._v("Stream")]),this._v("的拉动特性，我们可以很容易地实现我们的小协议的多路分解，如下所示：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[e._v("我们开始使用"),s("code",[e._v("non-flowing")]),e._v("模式从流中读取数据。")]),e._v(" "),s("li",[e._v("首先，如果我们还没有读取"),s("code",[e._v("channel ID")]),e._v("，我们尝试从流中读取1个字节，然后将其转换为数字。")]),e._v(" "),s("li",[e._v("下一步是读取首部的长度。我们需要读取4个字节，所以有可能在内部"),s("code",[e._v("Buffer")]),e._v("还没有足够的数据，这将导致"),s("code",[e._v("this.read()")]),e._v("调用返回"),s("code",[e._v("null")]),e._v("。在这种情况下，我们只是中断解析，然后重试下一个"),s("code",[e._v("readable")]),e._v("事件。")]),e._v(" "),s("li",[e._v("当我们最终还可以读取数据大小时，我们知道从内部"),s("code",[e._v("Buffer")]),e._v("中拉出多少数据，所以我们尝试读取所有数据。")]),e._v(" "),s("li",[e._v("当我们读取所有的数据时，我们可以把它写到正确的目标通道，一定要记得重置"),s("code",[e._v("currentChannel")]),e._v("和"),s("code",[e._v("currentLength")]),e._v("变量（这些变量将被用来解析下一个数据包）。")]),e._v(" "),s("li",[e._v("最后，当源"),s("code",[e._v("channel")]),e._v("结束时，一定不要忘记调用目标"),s("code",[e._v("Stream")]),e._v("的"),s("code",[e._v("end()")]),e._v("方法。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("既然我们可以多路分解源"),t("code",[this._v("Stream")]),this._v("，进行如下调用：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("net.createServer(socket => {\n  const stdoutStream = fs.createWriteStream('stdout.log');\n  const stderrStream = fs.createWriteStream('stderr.log');\n  demultiplexChannel(socket, [stdoutStream, stderrStream]);\n})\n  .listen(3000, () => console.log('Server started'))\n;\n复制代码\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在上面的代码中，我们首先在"),s("code",[e._v("3000")]),e._v("端口上启动一个"),s("code",[e._v("TCP")]),e._v("服务器，然后对于我们接收到的每个连接，我们将创建两个可写入的"),s("code",[e._v("Stream")]),e._v("，指向两个不同的文件，一个用于标准输出，另一个用于标准错误; 这些是我们的目标"),s("code",[e._v("channel")]),e._v("。 最后，我们使用"),s("code",[e._v("demultiplexChannel()")]),e._v("将套接字流解复用为"),s("code",[e._v("stdoutStream")]),e._v("和"),s("code",[e._v("stderrStream")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",{attrs:{id:"运行多路复用和多路分解应用程序-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行多路复用和多路分解应用程序-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 运行多路复用和多路分解应用程序")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在，我们准备尝试运行我们的新的多路复用/多路分解应用程序，但首先让我们创建一个小的"),t("code",[this._v("Node.js")]),this._v("程序来产生一些示例输出; 我们把它叫做"),t("code",[this._v("generateData.js")]),this._v("：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('console.log("out1");\nconsole.log("out2");\nconsole.error("err1");\nconsole.log("out3");\nconsole.error("err2");\n复制代码\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node server\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("node client generateData.js\n复制代码\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8f27939bc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("客户端几乎立马运行，但是进程结束时，"),t("code",[this._v("generateData")]),this._v("应用程序的标准输入和标准输出经过一个"),t("code",[this._v("TCP")]),this._v("连接，然后在服务器端，被多路分解成两个文件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意，当我们使用"),t("code",[this._v("child_process.fork()")]),this._v("时，我们的客户端能够启动别的"),t("code",[this._v("Node.js")]),this._v("模块。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"对象streams的多路复用和多路分解-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象streams的多路复用和多路分解-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 对象Streams的多路复用和多路分解")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("我们刚刚展示的例子演示了如何复用和解复用二进制/文本"),s("code",[e._v("Stream")]),e._v("，但值得一提的是，相同的规则也适用于对象"),s("code",[e._v("Stream")]),e._v("。 最大的区别是，使用对象，我们已经有了使用原子消息（对象）传输数据的方法，所以多路复用就像设置一个属性"),s("code",[e._v("channel ID")]),e._v("到每个对象一样简单，而多路分解只需要读"),s("code",[e._v("·channel ID")]),e._v("属性，并将每个对象路由到正确的目标"),s("code",[e._v("Stream")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("还有一种模式是取一个对象上的几个属性并分发到多个目的"),t("code",[this._v("Stream")]),this._v("的模式 通过这种模式，我们可以实现复杂的流程，如下图所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/1/160b1e8f2510f072?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("如上图所示，取一个对象"),s("code",[e._v("Stream")]),e._v("表示"),s("code",[e._v("animals")]),e._v("，然后根据动物类型："),s("code",[e._v("reptiles")]),e._v("，"),s("code",[e._v("amphibians")]),e._v("和"),s("code",[e._v("mammals")]),e._v("，然后分发到正确的目标"),s("code",[e._v("Stream")]),e._v("中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在本章中，我们已经对"),s("code",[e._v("Node.js Streams")]),e._v("及其使用案例进行了阐述，但同时也应该为编程范式打开一扇大门，几乎具有无限的可能性。我们了解了为什么"),s("code",[e._v("Stream")]),e._v("被"),s("code",[e._v("Node.js")]),e._v("社区赞誉，并且我们掌握了它们的基本功能，使我们能够利用它做更多有趣的事情。我们分析了一些先进的模式，并开始了解如何将不同配置的"),s("code",[e._v("Streams")]),e._v("连接在一起，掌握这些特性，从而使流如此多才多艺，功能强大。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("如果我们遇到不能用一个"),s("code",[e._v("Stream")]),e._v("来实现的功能，我们可以通过将其他"),s("code",[e._v("Streams")]),e._v("连接在一起来实现，这是"),s("code",[e._v("Node.js")]),e._v("的一个很好的特性；"),s("code",[e._v("Streams")]),e._v("在处理二进制数据，字符串和对象都十分有用，并具有鲜明的特点。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在下一章中，我们将重点介绍传统的面向对象的设计模式。尽管"),t("code",[this._v("JavaScript")]),this._v("在某种程度上是面向对象的语言，但在"),t("code",[this._v("Node.js")]),this._v("中，函数式或混合方法通常是首选。在阅读下一章便揭晓答案。")])}],!1,null,null,null);r.options.__file="《Node.js设计模式》使用流进行编码.md";t.default=r.exports}}]);